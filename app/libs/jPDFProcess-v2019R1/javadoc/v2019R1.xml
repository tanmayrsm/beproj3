<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Fri Jun 14 20:31:53 EDT 2019 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="v2019R1"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\build\jdiff.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\build\xerces.jar -public -doctitle jPDFProcess - Java library to process PDF documents. -classpath C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFProcess;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFNotes;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFEditor\bin;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFKey;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\JBIG2;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\JPEG2000\bin;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\lib\rhino.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\lib\bcprov-jdk14-154.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\lib\bcpkix-jdk14-154.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\lib\jai_imageio.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFProcess\lib\jai_codec.jar;C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFViewer\lib\miglayout.jar -apidir C:\Program Files (x86)\Jenkins\jobs\Libraries - v2019R1\workspace\jPDFProcess/build-output/jPDFProcess/javadoc/current -apiname v2019R1 -verbose -->
<package name="com.qoppa.ocr">
  <!-- start class com.qoppa.ocr.OCRBridge -->
  <class name="OCRBridge" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OCRBridge"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tesseractLibraryPath" type="java.lang.String"/>
      <param name="tesseractDataPath" type="java.lang.String"/>
      <exception name="OCRException" type="com.qoppa.ocr.OCRException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes the Tesseract bridge with the path to the native libraries
 and the path to the language data files. This method must be called
 before performing OCR. Once the Tesseract bridge is initialized, this
 method will throw an OCRException if the method is called again.
 
 @param tesseractLibraryPath the path to the native Tesseract libraries
 @param tesseractDataPath the path to the Tesseract language data files
 @throws OCRException
 @throws IOException]]>
      </doc>
    </method>
    <method name="isLoaded" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines whether the OCRBridge is successfully loaded.
 
 @return <code>true</code> if successfully loaded, <code>false</code>
         otherwise]]>
      </doc>
    </method>
    <method name="getTessLibFilepath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns Tesseract library file path - for diagnostic messages
 
 @return Full file path to Tesseract library.]]>
      </doc>
    </method>
    <method name="isInitialized" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Determines whether the OCRBridge is initialized.
 
 @return <code>true</code> if initialized, <code>false</code> otherwise]]>
      </doc>
    </method>
    <method name="getTesseractDataPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the path to the Tesseract language data
 
 @return this component's name]]>
      </doc>
    </method>
    <method name="setTesseractDataPath"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tesseractDataPath" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the path to the Tesseract language data
 
 @param tesseractDataPath path to the Tesseract language data]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides method to configure and use the Tesseract OCR engine.  The OCR engine is implemented in native
 code, so this class provides methods to load the JNI libraries and tell the engine where data files are located.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.ocr.OCRBridge -->
  <!-- start class com.qoppa.ocr.OCRException -->
  <class name="OCRException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OCRException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[OCRException with a simple error message.]]>
      </doc>
    </constructor>
    <constructor name="OCRException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[OCRException with an error message and an underlying cause.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[General exception thrown when there are any errors while performing OCR on a
 PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.ocr.OCRException -->
  <!-- start class com.qoppa.ocr.OCROptions -->
  <class name="OCROptions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="OCROptions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a default OCROptions object.]]>
      </doc>
    </constructor>
    <method name="setDeskew"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deskew" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to deskew the image before performing OCR. The deskew flag
 is initialized to false.
 
 @param deskew
            The new value of the deskew flag.]]>
      </doc>
    </method>
    <method name="isDeskew" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flag to deskew the image before performing OCR.
 
 @return The value of the deskew flag.]]>
      </doc>
    </method>
    <method name="setDiscardInvisibleText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="discard" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to discard invisible text in the document before performing
 OCR. The discard invisible text flag is initialized to false.
 
 @param discard
            The new value of the discard invisible text flag.]]>
      </doc>
    </method>
    <method name="isDiscardInvisibleText" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flag to discard invisible text in the document before
 performing OCR.
 
 @return The value of the discard invisible text flag.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This object holds the settings to be applied when performing OCR.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.ocr.OCROptions -->
  <!-- start class com.qoppa.ocr.TessJNI -->
  <class name="TessJNI" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TessJNI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="performOCR" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="language" type="java.lang.String"/>
      <param name="image" type="java.awt.image.BufferedImage"/>
      <exception name="OCRException" type="com.qoppa.ocr.OCRException"/>
      <doc>
      <![CDATA[Performs OCR on an image and returns an hOCR result string.  This method makes a call to the Tesseract OCR
 engine to perform character recognition on the image.  The results are in hOCR format, a standard format
 for OCR results that includes recognized text as well as location and size information.
 
 @param language The language to use in performing the OCR.  This can be multiple languages separated by a plus character (ex. "eng+fra")
 @param image The image to process
 @return The OCR results, in hOCR format.
 
 @throws OCRException]]>
      </doc>
    </method>
    <method name="performOCR" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="language" type="java.lang.String"/>
      <param name="pdfPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="OCRException" type="com.qoppa.ocr.OCRException"/>
      <doc>
      <![CDATA[Performs OCR on a PDF page and returns an hOCR result string.  This method converts the PDF page to an image and then
 makes a call to the Tesseract OCR engine to perform character recognition on the image.  The results are in hOCR format,
 a standard format for OCR results that includes recognized text as well as location and size information.
 
 @param language The language to use in performing the OCR.  This can be multiple languages separated a plus character (ex. "eng+fra").
 @param pdfPage The PDF page to process.
 @param dpi Dots per inch at which to render the image.
 @return The OCR results, in hOCR format.
 
 @throws OCRException]]>
      </doc>
    </method>
    <method name="performOCR" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="language" type="java.lang.String"/>
      <param name="pdfPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="dpi" type="int"/>
      <param name="options" type="com.qoppa.ocr.OCROptions"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="OCRException" type="com.qoppa.ocr.OCRException"/>
      <doc>
      <![CDATA[Performs OCR on a PDF page and returns an hOCR result string.  This method converts the PDF page to an image and then
 makes a call to the Tesseract OCR engine to perform character recognition on the image.  The results are in hOCR format,
 a standard format for OCR results that includes recognized text as well as location and size information.
 
 @param language The language to use in performing the OCR.  This can be multiple languages separated a plus character (ex. "eng+fra").
 @param pdfPage The PDF page to process.
 @param dpi Dots per inch at which to render the image.
 @param options The OCR options.
 @return The OCR results, in hOCR format.
 
 @throws PDFException
 @throws OCRException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides a native interface to the Tesseract OCR engine.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.ocr.TessJNI -->
</package>
<package name="com.qoppa.pdf">
  <!-- start interface com.qoppa.pdf.Bookmark -->
  <interface name="Bookmark"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.swing.tree.TreeNode"/>
    <method name="getActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the list of actions for this Bookmark.
 
 @return A Vector containing the actions to execute when this bookmark
 is clicked.]]>
      </doc>
    </method>
    <method name="addAction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="action" type="com.qoppa.pdf.actions.Action"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds an Action to this Bookmark
 
 @param action The new action]]>
      </doc>
    </method>
    <method name="setActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actions" type="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the list of actions for this Bookmark.
 
 @param actions A Vector containing the actions to execute when this bookmark
 is clicked.]]>
      </doc>
    </method>
    <method name="addChildBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Add a child bookmark.
 
 @param title The title of the new child bookmark.
 
 @return The new child Bookmark.]]>
      </doc>
    </method>
    <method name="insertChildBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <param name="index" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Insert a child bookmark at the given index in the node's children.
 
 @param title The title of the new child bookmark.
 @param index index where the new child bookmark will be inserted
 
 @return The new child Bookmark.]]>
      </doc>
    </method>
    <method name="getChildren" return="java.util.Vector&lt;com.qoppa.pdf.Bookmark&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the children of the node as a Vector.]]>
      </doc>
    </method>
    <method name="getParentBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parent node / Bookmark.  This method returns the
 parent Bookmark for this Bookmark.]]>
      </doc>
    </method>
    <method name="getChildBookmarkAt" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="childIndex" type="int"/>
      <doc>
      <![CDATA[Returns the child bookmark at the given index.]]>
      </doc>
    </method>
    <method name="getBookmarkIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bookmark" type="com.qoppa.pdf.Bookmark"/>
      <doc>
      <![CDATA[Returns the index of the bookmark node in the node's children.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the title or name of the bookmark.]]>
      </doc>
    </method>
    <method name="setTitle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this bookmarks title.  The title is the string that is displayed
 in the 'outline' view of a PDF document.
 
 @param title The new title.]]>
      </doc>
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets this bookmarks title.  The title is the string that is displayed
 in the 'outline' view of a PDF document.
 
 @return The title.]]>
      </doc>
    </method>
    <method name="getTextColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text color that should be used when showing this bookmark.
 
 @return The color of the text.]]>
      </doc>
    </method>
    <method name="setTextColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textColor" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the text color to use when displaying this bookmark.
 
 @param textColor The text color.]]>
      </doc>
    </method>
    <method name="getTextStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text style to use when displaying the bookmark.
 
 @return The text style.]]>
      </doc>
    </method>
    <method name="setTextStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textStyle" type="int"/>
      <doc>
      <![CDATA[Sets the text style to use when displaying this bookmark.
 
 @param textStyle The text style.]]>
      </doc>
    </method>
    <method name="removeChildBookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Removes a child bookmark from the bookmark
 
 @param index index of the child bookmark to remove]]>
      </doc>
    </method>
    <method name="setOpen"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isOpen" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the item as either open or closed when the document is opened.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this item is opened or closed when the document is opened.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface represents a Bookmark in a PDF document.  A bookmark is essentially a node
 on a tree that has a list of actions associated with it and a number of children.<br>
 The class implements the <code>TreeNode</code> interface so that it can be used directly 
 in a <code>JTree</code>.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.Bookmark -->
  <!-- start class com.qoppa.pdf.DocumentEvent -->
  <class name="DocumentEvent" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DocumentEvent" type="com.qoppa.pdf.dom.IPDFDocument, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DocumentEvent" type="com.qoppa.pdf.dom.IPDFDocument, int, int, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEventType" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getDocument" return="com.qoppa.pdf.dom.IPDFDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPageIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="PAGE_CONTENT_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INSERT_LAYER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_ADDED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_REMOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOTATIONS_IMPORTED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEFIELDS_FLATTENED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOCUMENT_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOTATION_ADDED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEANNOTS_REMOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOT_REMOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BOOKMARK_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOTATION_MODIFIED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_SIZE_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACH_ADDED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACH_REMOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BOOKMARK_CREATED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOTATION_MOVED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="REPLACECONTENT_OCCURED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ANNOTATION_STATEMODEL_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_LABEL_CHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Event object that gets sent to IDocumentListener methods whenever a document is changed.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.DocumentEvent -->
  <!-- start class com.qoppa.pdf.DocumentInfo -->
  <class name="DocumentInfo" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DocumentInfo"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="passwords" type="com.qoppa.pdf.IPassword"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Static method to get the document information from a document in a file.
 
 @param fileName The name of the file.
 
 @param passwords An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @return A DocumentInfo object containing the PDF document's header information.
 
 @throws PDFException Thrown when any error occurs when getting the document info from the PDF document.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="password" type="com.qoppa.pdf.IPassword"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Static method to get the document information from a document from an InputStream.
 
 @param inStream InputStream that will be used to read the PDF document.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @return A DocumentInfo object containing the PDF document's header information.
 
 @throws PDFException Thrown when any error occurs when getting the document info from the PDF document.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.net.URL"/>
      <param name="password" type="com.qoppa.pdf.IPassword"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Static method to get the document information from a document from a URL.
 
 @param url The url where the PDF document can be found.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @return A DocumentInfo object containing the PDF document's header information.
 
 @throws PDFException Thrown when any error occurs when getting the document info from the PDF document.]]>
      </doc>
    </method>
    <method name="getTitle" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the document's title.
 @return The document title.]]>
      </doc>
    </method>
    <method name="setTitle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="title" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the document's title.
 @param title The document's title.
 
 @throws PDFException Thrown when any error occurs when setting the title property inside the PDF.]]>
      </doc>
    </method>
    <method name="getAuthor" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's author.
 @return The document's author.]]>
      </doc>
    </method>
    <method name="getSubject" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's subject.
 @return The document's subject.]]>
      </doc>
    </method>
    <method name="getKeywords" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's keywords.
 @return The document's keywords.]]>
      </doc>
    </method>
    <method name="getCreator" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's creator.
 
 @return The document's creator.]]>
      </doc>
    </method>
    <method name="getProducer" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's producer.
 
 @return The document's producer.]]>
      </doc>
    </method>
    <method name="getTrapped" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns string indicating if the document has been modified with trapping information.
 
 @return The document trapping string.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's creation date.
 @return The document's creation date.]]>
      </doc>
    </method>
    <method name="getModDate" return="java.util.Date"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's modified date.
 
 @return The document's modified date.]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the number of pages in the document.
 
 @return Number of pages.]]>
      </doc>
    </method>
    <method name="setAuthor"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="author" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's author.
 
 @param author The document's author.
 
 @throws PDFException Thrown when any error occurs when setting the author property inside the PDF.]]>
      </doc>
    </method>
    <method name="setCreationDate"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="creationDate" type="java.util.Date"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's creation date.
 
 @param creationDate The document's creation date.
 
 @throws PDFException Thrown when any error occurs when setting the creation date property inside the PDF.]]>
      </doc>
    </method>
    <method name="setCreator"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="creator" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's creator.
 
 @param creator The document's creator.
 
 @throws PDFException Thrown when any error occurs when setting the creator property inside the PDF.]]>
      </doc>
    </method>
    <method name="setKeywords"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keywords" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's keywords.
 
 @param keywords The document's keywords.
 
 @throws PDFException Thrown when any error occurs when setting the keywords property inside the PDF.]]>
      </doc>
    </method>
    <method name="setModifiedDate"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="The document's modified date will be set by the library at the time the document is saved.">
      <param name="modDate" type="java.util.Date"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's modified date.
 
 @param modDate The document's modified date.
 
 @throws PDFException Thrown when any error occurs when setting the modified date property inside the PDF.
 
 @deprecated The document's modified date will be set by the library at the time the document is saved.]]>
      </doc>
    </method>
    <method name="setProducer"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="producer" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's producer.
 
 @param producer The document's producer.
 
 @throws PDFException Thrown when any error occurs when setting the producer property inside the PDF.]]>
      </doc>
    </method>
    <method name="setSubject"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set the document's subject.
 
 @param subject The document's subject.
 
 @throws PDFException Thrown when any error occurs when setting the subject inside the PDF.]]>
      </doc>
    </method>
    <method name="getXMPMetadata" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charsetName" type="java.lang.String"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Returns the XMP metadata in the document.
 
 @param charsetName The name of the character set to use when decoding the XMP data stream.  Every implementation
 of Java is supposed to support US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE and UTF-16
 
 @return the XMP metadata, as a String holding XML data.
 
 @throws UnsupportedEncodingException Thrown if the character set name specified is not available in this JVM.]]>
      </doc>
    </method>
    <method name="setXMPMetadata"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmpString" type="java.lang.String"/>
      <param name="charsetName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="UnsupportedEncodingException" type="java.io.UnsupportedEncodingException"/>
      <doc>
      <![CDATA[Sets the XMP metadata block in the document.  The xmpString should be
 properly formatted XMP XML data.
  
 @param xmpString The new XMP block.
 @param charsetName The name of the character set to use when encoding the XMP string to bytes.  Every implementation
 of Java is supposed to support US-ASCII, ISO-8859-1, UTF-8, UTF-16BE, UTF-16LE and UTF-16
 
 @param xmpString The new XMP metadata.  The new data will replace any existing XMP metadata if there is any.
 @param charsetName The character set to use when writing the XMP metadata to the PDF file.
 
 @throws PDFException Thrown when any error occurs when setting the XMP metadata inside the PDF.
 @throws UnsupportedEncodingException Thrown if the character set name specified is not available in this JVM.]]>
      </doc>
    </method>
    <method name="setXMPMetadata"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmpData" type="byte[]"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the XMP metadata block in the document.  The xmpData should already be encoded in the desired encoding,
 this method simply puts the bytes directly into the PDF document.
 
 @param xmpData The new XMP metadata.  The new data will replace any existing XMP metadata if there is any.
 @throws PDFException Thrown when any error occurs when setting the XMP metadata inside the PDF.]]>
      </doc>
    </method>
    <method name="getXMPMetadata" return="byte[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the raw XMP metadata in the document as an array of bytes.
 
 @return the XMP metadata, as an array of bytes holding XML data.]]>
      </doc>
    </method>
    <method name="setCustomProperty"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets a custom application property in the document info for the document.  The PDF format
 allows for applications setting their own properties, but it is up to the application
 to make sure that these properties do not conflict with standard properties.
   
 @param key The property key or name
 @param value The value of the property.
 
 @throws PDFException Thrown when any error occurs when setting the custom property inside the PDF.]]>
      </doc>
    </method>
    <method name="getCustomProperty" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the value of a custom property.  The PDF format allows for applications 
 setting their own properties, but it is up to the application to make sure that
 these properties do not conflict with standard properties.
 
 @param key The name of the property
 @return the value of the custom property]]>
      </doc>
    </method>
    <method name="setAuthorTitle"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorTitle" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the document's author-title.
 
 @param authorTitle The document's author-title.]]>
      </doc>
    </method>
    <method name="getAuthorTitle" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's author-title.
 @return The document's author-title.]]>
      </doc>
    </method>
    <method name="setDescriptionWriter"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="descriptionWriter" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the document's description writer.
 
 @param descriptionWriter The document's description writer.]]>
      </doc>
    </method>
    <method name="getDescriptionWriter" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's description writer.
 @return The document's description writer.]]>
      </doc>
    </method>
    <method name="setCopyrightStatus"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="copyrightStatus" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the document's copyrights status.  Should be null if unknown, "False" if Public Domain, and "True" if copyrighted.
 
 @param copyrightStatus The document's copyrights status.]]>
      </doc>
    </method>
    <method name="getCopyrightStatus" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's copyrights status.
 @return The document's copyrights status - null if unknown, "False" if Public Domain, and "True" if copyrighted.]]>
      </doc>
    </method>
    <method name="setCopyrightInfoURL"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="copyrightURL" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the document's copyright info url.
 
 @param copyrightURL The document's copyright info url.]]>
      </doc>
    </method>
    <method name="getCopyrightInfoURL" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's copyright info url.
 @return The document's copyright info url.]]>
      </doc>
    </method>
    <method name="setCopyrightNotice"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="copyrightNotice" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the document's copyright notice.
 
 @param copyrightNotice The document's copyright notice.]]>
      </doc>
    </method>
    <method name="getCopyrightNotice" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document's copyright notice.
 @return The document's copyright notice.]]>
      </doc>
    </method>
    <field name="KEY_TITLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_AUTHOR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_SUBJECT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_KEYWORDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_CREATOR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_PRODUCER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_TRAPPED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_CREATIONDATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEY_MODDATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class is a container for the information section of a PDF document.  This
 section contains fields such as author, title, subject, keywords, etc.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.DocumentInfo -->
  <!-- start interface com.qoppa.pdf.DocumentViewPrefs -->
  <interface name="DocumentViewPrefs"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getHideToolbar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Hide Toolbar viewer preference in the document.
 
 @return The Hide Toolbar viewer preference.]]>
      </doc>
    </method>
    <method name="setHideToolbar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Hide Toolbar viewer preference in the document.
 
 @param value The Hide Toolbar viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getHideMenubar" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Hide Menubar viewer preference in the document.
 
 @return The Hide Menubar viewer preference.]]>
      </doc>
    </method>
    <method name="setHideMenubar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Hide Menubar viewer preference in the document.
 
 @param value The Hide Menubar viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getHideWindowUI" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Hide Window UI viewer preference in the document.
 
 @return The Hide Window UI viewer preference.]]>
      </doc>
    </method>
    <method name="setHideWindowUI"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Hide Window UI viewer preference in the document.
 
 @param value The Hide Window UI viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getFitWindow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Fit Window viewer preference in the document.
 
 @return The Fit Window viewer preference.]]>
      </doc>
    </method>
    <method name="setFitWindow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Fit Window viewer preference in the document.
 
 @param value The Fit Window viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getCenterWindow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Center Window viewer preference in the document.
 
 @return The Center Window viewer preference.]]>
      </doc>
    </method>
    <method name="setCenterWindow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Center Window viewer preference in the document.
 
 @param value The Center Window viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getDisplayDocTitle" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Display Doc Title viewer preference in the document.
 
 @return The Display Doc Title viewer preference.]]>
      </doc>
    </method>
    <method name="setDisplayDocTitle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Display Doc Title viewer preference in the document.
 
 @param value The Display Doc Title viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getNonFullScreenPageMode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the NonFullscreen Page Mode viewer preference in the document.
 
 @return The NonFullscreen Page Mode viewer preference.]]>
      </doc>
    </method>
    <method name="setNonFullScreenPageMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the NonFullScreen Page Mode viewer preference in the document.
 The calling application should use one of the predefined constants: 
 USENONE, USEOUTLINES, USETHUMBS, or USEOC.
 
 @param value The NonFullscreen Page Mode viewer preference.]]>
      </doc>
    </method>
    <method name="getDirection" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Direction viewer preference in the document.
 
 @return The Direction viewer preference.]]>
      </doc>
    </method>
    <method name="setDirection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Direction viewer preference in the document.
 The calling application should use one of the predefined constants: 
 L2R or R2L.
 
 @param value The Direction viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getPrintScaling" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Print Scaling viewer preference in the document.
 
 @return The Print Scaling viewer preference.]]>
      </doc>
    </method>
    <method name="setPrintScaling"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Print Scaling viewer preference in the document.
 The calling application should use one of the predefined constants: 
 NONE or APPDEFAULT.
 
 @param value The Print Scaling viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getDuplex" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Duplex viewer preference in the document.
 
 @return The Duplex viewer preference.]]>
      </doc>
    </method>
    <method name="setDuplex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Duplex viewer preference in the document.
 The calling application should use one of the predefined constants: 
 SIMPLEX, DUPLEXFLIPSHORTEDGE, or DUPLEXFLIPLONGEDGE.
 
 
 @param value The Duplex viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getPickTrayByPDFSize" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Pick Tray by PDF Size viewer preference in the document.
 
 @return The Pick Tray by PDF Size viewer preference.]]>
      </doc>
    </method>
    <method name="setPickTrayByPDFSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the Pick Tray by PDF Size viewer preference in the document.
 
 @param value The Pick Tray by PDF Size viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getNumCopies" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the NumCopies viewer preference in the document.
 
 @return The NumCopies viewer preference.]]>
      </doc>
    </method>
    <method name="setNumCopies"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the NumCopies viewer preference in the document.
 Supported values are the integers 2 through 5.
 
 @param value The NumCopies viewer preference.
 @throws PDFException]]>
      </doc>
    </method>
    <field name="USENONE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the NonFullScreen Page Mode viewer preference: Neither document outline nor thumbnail images visible]]>
      </doc>
    </field>
    <field name="USEOUTLINES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the NonFullScreen Page Mode viewer preference: Document outline visible]]>
      </doc>
    </field>
    <field name="USETHUMBS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the NonFullScreen Page Mode viewer preference: Thumbnail images visible]]>
      </doc>
    </field>
    <field name="USEOC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the NonFullScreen Page Mode viewer preference: Optional content group panel visible]]>
      </doc>
    </field>
    <field name="L2R" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Direction viewer preference: Left to right]]>
      </doc>
    </field>
    <field name="R2L" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Direction viewer preference: Right to left]]>
      </doc>
    </field>
    <field name="NONE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Print Scaling viewer preference: Print dialog should reflect no page scaling]]>
      </doc>
    </field>
    <field name="APPDEFAULT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Print Scaling viewer preference: Applications should use the current print scaling]]>
      </doc>
    </field>
    <field name="SIMPLEX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Duplex viewer preference: Print single-sided]]>
      </doc>
    </field>
    <field name="DUPLEXFLIPSHORTEDGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Duplex viewer preference: Duplex and flip on the short edge of the sheet]]>
      </doc>
    </field>
    <field name="DUPLEXFLIPLONGEDGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the Duplex viewer preference: Duplex and flip on the long edge of the sheet]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class is a container for the viewer preferences of a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.DocumentViewPrefs -->
  <!-- start class com.qoppa.pdf.EmbedFileOptions -->
  <class name="EmbedFileOptions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="EmbedFileOptions" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an EmbedFileOptions object with the given description and relationship.
 Relationship and Description will be saved in the embedded file specifications dictionary. 
 
 @param desc The description of the embedded file 
 @param relation The relationship of the embedded file relative to the document]]>
      </doc>
    </constructor>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the description of the embedded file
 (to be saved in the embedded file specifications dictionary).
 
 @return The description]]>
      </doc>
    </method>
    <method name="getRelationship" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the relationship of the embedded file in relation to the document 
 (to be saved in the embedded file specifications dictionary).
 
 @return The relationship]]>
      </doc>
    </method>
    <method name="setZugferdInvoice"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="isZugferd" type="boolean"/>
      <doc>
      <![CDATA[Indicates if the embedded file is a ZUGFeRD invoice.
 When this is on, an additional entry will be saved in the root catalog of the document 
 that points to the embedded file. 
 
 @param isZugferd true or false]]>
      </doc>
    </method>
    <method name="isZugferdInvoice" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a boolean indicating whether the embedded file is a ZUGFeRD invoice.
 
 @return true or false]]>
      </doc>
    </method>
  </class>
  <!-- end class com.qoppa.pdf.EmbedFileOptions -->
  <!-- start class com.qoppa.pdf.FontSettings -->
  <class name="FontSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="FontSettings"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setUseSubstituteFont"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="useSubstitute" type="boolean"/>
      <doc>
      <![CDATA[Tells the rendering engine to use a substitute font when a font in the
 PDF cannot be created. The rendering engine will need to use a substitute
 font if there is an error with the embedded font, or if the specified
 font is not embedded and a matching font cannot be found in the OS.
 Otherwise, an exception will be thrown. This exception will be thrown
 when the page content is parsed. The PDF library must parse the page
 content for most PDF features including rendering, printing, creating
 images, text search/extraction, flattening form fields, optimizing, and
 preflighting.
 
 @param useSubstitute
            Flag indicating whether substitute fonts should be used.]]>
      </doc>
    </method>
    <method name="isUseSubstituteFont" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the flag that specifies whether or not the rendering
 engine should use a substitute font when a font in the PDF cannot be
 created.
 
 @return Boolean flag that indicates whether substitute fonts should be
         used.
 @see #setUseSubstituteFont]]>
      </doc>
    </method>
    <method name="addSubstituteFont"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fontName" type="java.lang.String"/>
      <param name="subFont" type="java.awt.Font"/>
      <doc>
      <![CDATA[Registers a substitute font to use when a font in a PDF file is not embedded
 in the file and the font is not registered with the operating system.
 By default, when a font is not embedded in a PDF file, the library looks to the list of
 fonts available in the operating system.  If the font is not found, then the
 library will look at the substitute fonts for a name that matches.
 
 @param fontName The name of the font in the PDF file.
 @param subFont The substitute font to use when the font is not present in the PDF file
 or in the OS.]]>
      </doc>
    </method>
    <method name="getSubstituteFont" return="java.awt.Font"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fontName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a substitute font, if one has been registered, for the given font name.
 
 @param fontName The name of the font
 
 @return The substitute font]]>
      </doc>
    </method>
    <method name="setCJKSystemFontName"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cjkFontType" type="int"/>
      <param name="systemFontName" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the local system font systemFontName to use for a particular CJK font type cjkFontType
 @param cjkFontType the integer code for a particular CJK font type, e.g. Chinese Serif
 @param systemFontName should either match one of the font names returned by GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames()
 or else it should be null. If systemFontName matches a system font family name, then that font will be used to render non-embedded instances of cjkFontType.
 If systemFontName is null, then that resets the font for cjkFontType to the default value, which may be none on some systems.
 If systemFontName is any other value, then the call has no affect.]]>
      </doc>
    </method>
    <method name="getCJKSystemFontName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cjkFontType" type="int"/>
      <doc>
      <![CDATA[Get the name of the system font that will be used to render non-embedded instances of the CJK font type indicated by cjkFontType
 @param cjkFontType the integer code for a particular CJK font type, e.g. Chinese Serif
 @return Returns the name of the system font that will be used to render non-embedded instances of the CJK font type indicated by cjkFontType.
 Returns null if no system font has been set and if no default font names were found on the local system. A null result implies non-embedded
 instances of cjkFontType will not be rendered correctly.]]>
      </doc>
    </method>
    <method name="setUserFontDirectories"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userFontDirs" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Set user font directories used in font embedding. In several different
 cases, fonts will be embedded in the document. These cases include
 certain textual annotations, editing page content with the content edit
 tools, preflighting a document (for example, converting to PDF/A-1b), and
 when converting Microsoft Word documents to PDF. Fonts found in these
 directories will take precedence over fonts found in local font
 directories from the operating system.
 
 Each directory will be searched in the order supplied. Nested 
 subdirectories will be recursively searched depth first after the parent 
 directory.
 
 @param userFontDirs
            - List of font directory path strings]]>
      </doc>
    </method>
    <method name="getUserFontDirectories" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns list of user font directories
 
 @return List of user font directories]]>
      </doc>
    </method>
    <method name="getLocalFonts" return="java.util.List&lt;com.qoppa.pdf.LocalFont&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a list of fonts found in the local environment that can be used for 
 adding text content to a PDF. 
 
 Note that not all fonts in the list may necessarily be embeddable. 
 
 The fonts in this list are put together from the "base" fonts and the "user" fonts:
 User fonts are fonts located in any user font directories, set by using the setUserFontDirectories() method.
 Base fonts are fonts that are available through the operating system.
 Fonts found in user supplied directories will appear before those in the base font directories.
 On some systems, base font directories often organize fonts in subdirectories. All base font directories are
 recursively searched for fonts. Fonts found in a parent directory will appear in the list before those found
 in a subdirectory.
 
 The list may not necessarily contain all fonts that were found on the system; only font files we are able to successfully parse will appear in the list.  
 
 The order of fonts in the list loosely represents the precedence of font selection used internally by Qoppa libraries, all else being equal.
 
 @return List of fonts that we can use.]]>
      </doc>
    </method>
    <method name="setSubFontFamilyList"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subFontFamilies" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Set ordered list of substitute font families.
 
 A font from a substitute font family - if found - can be used when editing content
 where the original font is not available in the document, local fonts or Std14 fonts.
 
 Substitute font families are checked in the order specified.  
 
 @param subFontFamilies - list of substitute font family names]]>
      </doc>
    </method>
    <method name="getSubFontFamilyList" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="true"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get ordered list of substitute font families.
 
 @return List of substitute font family names]]>
      </doc>
    </method>
    <field name="JAPANESE_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAPANESE_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SIMPLIFIED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KOREAN_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KOREAN_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Font settings object. This class provides methods to control font usage behavior.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.FontSettings -->
  <!-- start interface com.qoppa.pdf.IdentityProperties -->
  <interface name="IdentityProperties"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the user name that the user entered.]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the user name that the user entered.]]>
      </doc>
    </method>
    <method name="getLoginName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the login name as registered by the operating system.]]>
      </doc>
    </method>
    <method name="getCorporation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the corporation name that the user has entered.]]>
      </doc>
    </method>
    <method name="setCorporation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="corporation" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the corporation name that the user has entered.]]>
      </doc>
    </method>
    <method name="getEmail" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the email address that the user has entered.]]>
      </doc>
    </method>
    <method name="setEmail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="email" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the email address that the user has entered.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This object identifies the current user of the application and its properties can be accessed by javascript.]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IdentityProperties -->
  <!-- start interface com.qoppa.pdf.IDocumentListener -->
  <interface name="IDocumentListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="documentChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="de" type="com.qoppa.pdf.DocumentEvent"/>
    </method>
    <doc>
    <![CDATA[Listener interfaces to notify objects when a document has been changed.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IDocumentListener -->
  <!-- start interface com.qoppa.pdf.IEmbeddedFile -->
  <interface name="IEmbeddedFile"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the embedded file name.
 
 @return the file name.]]>
      </doc>
    </method>
    <method name="saveFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outFile" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves the content of the embedded file to the given output file.
 
 @param outFile the file to save to.]]>
      </doc>
    </method>
    <method name="getDeflatedContents" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Get the content of the embedded file, deflated.
 
 @return the content bytes array.]]>
      </doc>
    </method>
    <method name="getSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Get the size of the file content in bytes.
 
 @return the size.]]>
      </doc>
    </method>
    <method name="getCheckSum" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Get the 16-byte string that is the checksum of the bytes of the uncompressed embedded file. 
 The checksum is calculated by applying the standard MD5 message-digest algorithm.
 
 @return the checksum of the file.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The date and time when the embedded file was created.
 @return the date and time when the embedded file was created.]]>
      </doc>
    </method>
    <method name="getModDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The date and time when the embedded file was last modified.
 @return The date and time when the embedded file was last modified.]]>
      </doc>
    </method>
    <method name="getDescription" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description string from the embedded file.]]>
      </doc>
    </method>
    <method name="getRelationship" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the relationship of the embedded file to the PDF document.]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Write the file content to an output stream.
 
 @param outStream the output stream.]]>
      </doc>
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns an input stream from which the file contents can be read.
 
 @return Input stream to read file contents]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of an embedded file in a PDF document. This interface defines
 the methods that can be used on an embedded file.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IEmbeddedFile -->
  <!-- start interface com.qoppa.pdf.IJavaScriptEnabler -->
  <interface name="IJavaScriptEnabler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="shouldEnableJS" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="com.qoppa.pdf.dom.IPDFDocument"/>
      <doc>
      <![CDATA[Returns true if JavaScript should be enabled for the document.  An implementation of this
 class can be document independent (return true or false regardless of the document), or it
 can look at the document that is being loaded to determine whether to enable or disable
 JavaScript.
 
 @param document The PDF document that is being loaded.  An implementation of this class can
 look at the document to see if it should enable or disable JavaScript.
 
 @return true if JavaScript should be enabled for this document.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is used to determine if JavaScript should be enabled for a document.]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IJavaScriptEnabler -->
  <!-- start interface com.qoppa.pdf.IPassword -->
  <interface name="IPassword"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPasswords" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Method called to get passwords for encrypted PDF documents.
 
 @return	A list of passwords to try to open the document.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>External interface used by the PDF library to get possible passwords
 to open a document.  When a PDF document is password protected, the library 
 will call the getPasswords method in the interface to get a list of passwords
 from the host application.  The library then tries to open the document using
 each of the passwords in the list until one of them (or none) work.</p>
 <p>For simple fixed passwords, or when the passwords are from a short list, the
 host application should use the implementation provided by the library,
 {@link com.qoppa.pdf.PDFPassword PDFPassword}.</p>
 <p>For more complex implementations, the host application can create its own
 class that implements this interface.</p>
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IPassword -->
  <!-- start interface com.qoppa.pdf.IWatermark -->
  <interface name="IWatermark"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="drawWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g" type="java.awt.Graphics2D"/>
      <param name="type" type="int"/>
      <param name="pageIndex" type="int"/>
      <param name="pageWidth" type="int"/>
      <param name="pageHeight" type="int"/>
      <doc>
      <![CDATA[This method is called by the Java PDF Library to draw a watermark on a
 PDF document.
 
 @param g
            the Graphics2D object used to draw the watermark
 @param type
            a type defined in this class, either {@link #TYPE_IMAGES},
            {@link #TYPE_PRINT}, or {@link #TYPE_VIEWER}
 @param pageIndex
            the current page index being rendered
 @param pageWidth
            the page width being rendered
 @param pageHeight
            the page height being rendered]]>
      </doc>
    </method>
    <field name="TYPE_IMAGES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The watermark type used when creating images from a PDF document.]]>
      </doc>
    </field>
    <field name="TYPE_PRINT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The watermark type used when printing a PDF document.]]>
      </doc>
    </field>
    <field name="TYPE_VIEWER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The watermark type used when viewing a PDF document.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This interface is used to display a watermark on a PDF document in the
 following Java PDF Libraries:
 <ul>
 <li>jPDFProcess</li>
 <li>jPDFPrint</li>
 <li>jPDFImages</li>
 <li>jPDFViewer</li>
 <li>jPDFNotes</li>
 </ul>
 
 There are 3 types of watermark callbacks: images, print, and viewer. The type
 of watermark callback is dependent on the Java PDF Library. For additional
 information, see the specific library API.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IWatermark -->
  <!-- start interface com.qoppa.pdf.IWindowHandler -->
  <interface name="IWindowHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="openDoc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="com.qoppa.pdf.source.PDFSource"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Open the PDF source.
 @param source The PDF.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="closeDoc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkSave" type="boolean"/>
      <doc>
      <![CDATA[Close the currently open document, optionally prompting the user to save if the document has been modified.
 @param checkSave Set to true to prompt the user to save if the document has been modified.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is used to handle opening and closing of PDFDocuments within a PDFViewerBean.  
 The methods in this class will be called when a document is opened through JavaScript and when an attachment is opened.]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.IWindowHandler -->
  <!-- start class com.qoppa.pdf.JavaScriptEnabler -->
  <class name="JavaScriptEnabler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.IJavaScriptEnabler"/>
    <constructor name="JavaScriptEnabler" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct an instance with a set value for enabling / disabling JavaScript.
 
 @param enable Flag to enable / disable JavaScript.]]>
      </doc>
    </constructor>
    <method name="shouldEnableJS" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="document" type="com.qoppa.pdf.dom.IPDFDocument"/>
      <doc>
      <![CDATA[Implementation of the IJavaScriptEnabler contract.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An implementation of IJavaScriptEnabler that can be set to true or false on construction.  This implementation
 does not look at the document, it is document independent.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.JavaScriptEnabler -->
  <!-- start class com.qoppa.pdf.JavaScriptSettings -->
  <class name="JavaScriptSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="shouldEnableJS" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="com.qoppa.pdf.dom.IPDFDocument"/>
      <doc>
      <![CDATA[Returns true if JavaScript should be enabled for the document.  This is a convenience method, it passes the
 call on to the registered JavaScriptEnabler object.  If there is no JavaScriptEnabler (it is null), then this
 method return false, disabling JavaScript.
 
 @param doc The PDF document that is being loaded.  This is passed on to the IJavaScriptEnabler implementation.]]>
      </doc>
    </method>
    <method name="setJSEnabler"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enabler" type="com.qoppa.pdf.IJavaScriptEnabler"/>
      <doc>
      <![CDATA[Set the JavaScriptEnabler.  If this is set to null, shouldEnableJS() will always return false, thereby disabling JavaScript.
 A default implementation of this interface is provided in the JavaScriptEnabler class, that takes true or false in its constructor.  A host
 application can also create a custom implementation that uses other criteria to determine whether to enable JavaScript.
 
 @param enabler The implementation of JavaScriptEnabler.]]>
      </doc>
    </method>
    <method name="getJSEnabler" return="com.qoppa.pdf.IJavaScriptEnabler"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the JavaScriptEnabler.]]>
      </doc>
    </method>
    <method name="isAllowPopups" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if popups are allowed.  Otherwise alerts will be printed to standard out.
 Note that since some alerts require user input, an Exception will be thrown if this flag is set to false when an alert 
 contains more than one option.
 
 @return True if popups are allowed.  False otherwise.]]>
      </doc>
    </method>
    <method name="setAllowPopups"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowPopups" type="boolean"/>
      <doc>
      <![CDATA[Set to true to allow pop ups for alerts.  If set to false, alerts will be printed to standard out.
 
 @param allowPopups Set to true to allow pop ups for alerts.  Set to false to print alerts to standard out.]]>
      </doc>
    </method>
    <method name="isSilenceErrors" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if errors will be silenced instead of displaying an alert.
 
 @return True if errors will be silenced, false otherwise.]]>
      </doc>
    </method>
    <method name="setSilenceErrors"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="silenceErrors" type="boolean"/>
      <doc>
      <![CDATA[Set to true to silence errors.  If set to false, errors will display in an alert.
 
 @param silenceErrors Set to true to silence errors.  Set to false to display errors in an alert.]]>
      </doc>
    </method>
    <method name="setIdentityProperties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="identity" type="com.qoppa.pdf.IdentityProperties"/>
      <doc>
      <![CDATA[Sets a static object that identifies the current user of the application.]]>
      </doc>
    </method>
    <method name="getIdentityProperties" return="com.qoppa.pdf.IdentityProperties"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a static object that identifies the current user of the application.]]>
      </doc>
    </method>
    <method name="isSubmitFormWarn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the user will have the option to proceed with connecting to a URL and submitting the form when submitForm() is called.
 @return True if the user will have the option to proceed with submitting the form.]]>
      </doc>
    </method>
    <method name="setSubmitFormWarn"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="submitFormWarn" type="boolean"/>
      <doc>
      <![CDATA[Set to true to warn/ask the user before connecting to a URL and submitting the form when submitForm() is called.
 @param submitFormWarn Set to true to warn/ask the user before connecting to a URL.]]>
      </doc>
    </method>
    <method name="isMailDocWarn" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the user will have the option to proceed with emailing the document when mailDoc() is called.
 @return True if the user will have the option to proceed with emailing the document.]]>
      </doc>
    </method>
    <method name="setMailDocWarn"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mailDocWarn" type="boolean"/>
      <doc>
      <![CDATA[Set to true to warn/ask the user before emailing the document when mailDoc() is called.
 @param mailDocWarn Set to true to warn/ask the user before emailing the document.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class contains settings for running JavaScript.  It has options to enable / disable JavaScript as well as to
 enable JavaScript popups and to enable error reporting.  The settings are as follows
 <p>
 JSEnabler - This object is called back when a document is loaded to determine if JavaScript will be enabled.  The
 default is to have this field null, which implies that JavaScript is disabled.  There is a simple implementation
 class provided to enable / disable JavaScript: JavaScriptEnabler.
 <br>
 AllowPopups - This flag determines if JavaScript alerts will pop up in a message box or be printed to the console.
 Note that since some alerts require user input, an Exception will be thrown if this flag is set to false when an alert 
 contains more than one option.  Default is false.
 <br>
 SilenceErrors - This flag determines if formatting errors generated from predefined formats will pop up in a message box 
 or if the system will beep.  The default setting of true means the system will beep instead of popping up a message box.

 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.JavaScriptSettings -->
  <!-- start class com.qoppa.pdf.Layer -->
  <class name="Layer" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Layer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of this layer.
 @return The name of the layer.]]>
      </doc>
    </method>
    <method name="setName"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of this layer.]]>
      </doc>
    </method>
    <method name="isVisible" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this layer is currently visible.
 
 @return Layer's visibility.]]>
      </doc>
    </method>
    <method name="setVisible"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[Sets the visibility for this layer.
 
 @param visible The new visibility.]]>
      </doc>
    </method>
    <method name="getDefaultState" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default state for this layer.  One of Layer.STATE_OFF or Layer.STATE_ON.
 
 @return Layer's initial visibility.]]>
      </doc>
    </method>
    <method name="setDefaultState"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="int"/>
      <doc>
      <![CDATA[Sets the default state for this layer. Should be one of Layer.STATE_OFF or Layer.STATE_ON.
 
 @param state The new initial visibility.]]>
      </doc>
    </method>
    <method name="isLocked" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this layer is locked.
 @return Layer's locked state.]]>
      </doc>
    </method>
    <method name="setLocked"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="locked" type="boolean"/>
      <doc>
      <![CDATA[Sets the locked state of the layer.
 @param locked The new locked state.]]>
      </doc>
    </method>
    <method name="addLayerListener"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="com.qoppa.pdf.LayerListener"/>
      <doc>
      <![CDATA[Adds an object that will listen to changes in the layer's visible state.  All
 listeners will be notified when a layer is made visible or invisible.
 
 @param l The new layer listener.]]>
      </doc>
    </method>
    <method name="removeLayerListener"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="com.qoppa.pdf.LayerListener"/>
      <doc>
      <![CDATA[Removes a layer listener from the list of active listeners.
 
 @param l The listener to remove.]]>
      </doc>
    </method>
    <field name="STATE_OFF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATE_ON" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class represents a PDF 'Layer'.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.Layer -->
  <!-- start interface com.qoppa.pdf.LayerListener -->
  <interface name="LayerListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="stateChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="com.qoppa.pdf.Layer"/>
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[This method gets called anytime a layer's visibility state has changed.
 @param l The layer that changed.
 @param visible The new visibility state.]]>
      </doc>
    </method>
    <method name="propertyChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="l" type="com.qoppa.pdf.Layer"/>
      <doc>
      <![CDATA[This method gets called any time a layer's properties have changed.
 @param l The layer that changed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is used to get notifications of layer's visibility changes.
 
 @author Gerald Holmann]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.LayerListener -->
  <!-- start interface com.qoppa.pdf.LocalFont -->
  <interface name="LocalFont"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFilePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file path to this font.
 @return The file path to the font file.]]>
      </doc>
    </method>
    <method name="getFullName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the full font name.
 @return The name of the font.]]>
      </doc>
    </method>
    <method name="getFamilyName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the font family name.
 @return The font family name.]]>
      </doc>
    </method>
    <method name="getPSName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Postscript name for this font.
 @return The Postscript name.]]>
      </doc>
    </method>
    <method name="isItalic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns flag indicating if this font is italic.
 @return true if this font is italic.]]>
      </doc>
    </method>
    <method name="isBold" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns flag indicating if this font is bold.
 @return true if the font is bold.]]>
      </doc>
    </method>
    <method name="isSymbol" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns flag indicating if this font is a symbol font.
 @return true if the font is a symbol font.]]>
      </doc>
    </method>
    <method name="isEmbeddable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether we are able to embed the font in a PDF document.
 @return true if and only if the font's usage rights do not restrict embedding and we are technologically
 capable embedding the font in a PDF document.]]>
      </doc>
    </method>
    <method name="isSubsettable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether the font's usage rights forbid subsetting. If a font is embeddable but not subsettable
 the entire font file must be embedded even if only a small number of glyphs are used.
 @return true if the font's usage rights do not prohibit subsetting.]]>
      </doc>
    </method>
    <method name="fontFilePath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return The path to the file this font was loaded from.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface represents a font that can be used by the library to embed into a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.LocalFont -->
  <!-- start class com.qoppa.pdf.PageLabels -->
  <class name="PageLabels" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PageLabels"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="DECIMAL_NUMERALS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The numbering style for decimal arabic numerals.]]>
      </doc>
    </field>
    <field name="UPPERCASE_ROMAN_NUMERALS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The numbering style for uppercase roman numerals.]]>
      </doc>
    </field>
    <field name="LOWERCASE_ROMAN_NUMERALS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The numbering style for lowercase roman numerals.]]>
      </doc>
    </field>
    <field name="UPPERCASE_LETTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The numbering style for uppercase letters.]]>
      </doc>
    </field>
    <field name="LOWERCASE_LETTERS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The numbering style for lowercase letters.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class holds constants used for setting page label styles.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PageLabels -->
  <!-- start class com.qoppa.pdf.PasswordDialog -->
  <class name="PasswordDialog" extends="javax.swing.JDialog"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getPasswords" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getjlMessage" return="javax.swing.JLabel"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="showAndGetPassword" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="promptLabel" type="java.lang.String"/>
      <param name="parentWindow" type="java.awt.Window"/>
      <doc>
      <![CDATA[Creates the password dialog, shows it and returns the password entered as an array of Strings with one element.
 This is a convenience method to use this dialog when implementing an {@link com.qoppa.pdf.IPassword IPassword} object.
  
 @param promptLabel The prompt message to use on the dialog.  If left null, the dialog will use its default message.
 
 @param parentWindow The parent window, can be either a Dialog or a Frame.  The method will display the dialog centered 
 relative to the parent window.  If left null, the dialog will be centered on the screen.
 
 @return An array of 1 String, holding the password, null if cancel was pressed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Simple dialog used to prompt the user for a password.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PasswordDialog -->
  <!-- start class com.qoppa.pdf.PDFException -->
  <class name="PDFException" extends="java.lang.Exception"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PDFException with a simple error message.
 
 @param msg The message for the exception.]]>
      </doc>
    </constructor>
    <constructor name="PDFException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PDFException with an error message and an underlying cause.
 
 @param msg The message for the exception.
 @param cause The underlying cause for this exception.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[General exception thrown when there is any errors reading or
 displaying a PDF file.  An error message can be retrieved using
 the getMessage() method.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFException -->
  <!-- start class com.qoppa.pdf.PDFPassword -->
  <class name="PDFPassword" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.IPassword"/>
    <constructor name="PDFPassword" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an instance of the class that will hold a single fixed password.
 
 @param password The password to use when opening encrypted documents.]]>
      </doc>
    </constructor>
    <constructor name="PDFPassword" type="java.lang.String[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an instance of the class that will hold a list of possible passwords.  The library
 will try each password in the list until one of them opens the document properly.
 
 @param pwdList The list of possible passwords.]]>
      </doc>
    </constructor>
    <method name="getPasswords" return="java.lang.String[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Method that fulfills the IPassword interface.  The method returns the list of passwords stored
 in the object.  When the constructor with the single String is used to create an instance of this
 class, the list returned consists of a single entry.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>Implementation of the IPassword interface that can hold either a single password or a
 list of passwords.  In most cases, the host application should use this class to provide
 passwords to the library when opening encrypted documents.</p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFPassword -->
  <!-- start class com.qoppa.pdf.PDFPasswordException -->
  <class name="PDFPasswordException" extends="com.qoppa.pdf.PDFSecurityException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFPasswordException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new PDFPasswordException.
 
 @param msg The message for the exception.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Exception thrown when an invalid password is entered.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFPasswordException -->
  <!-- start class com.qoppa.pdf.PDFPermissionException -->
  <class name="PDFPermissionException" extends="com.qoppa.pdf.PDFSecurityException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFPermissionException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Exception thrown when there is any permission error. The error message can be retrieved using
 the getMessage() method.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFPermissionException -->
  <!-- start class com.qoppa.pdf.PDFRenderHints -->
  <class name="PDFRenderHints" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFRenderHints"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setRenderingHints"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hints" type="java.awt.RenderingHints"/>
      <doc>
      <![CDATA[Sets the rendering hints.  This method replaces all the rendering hints
 with the argument.
 
 @param	hints	The new rendering hints.]]>
      </doc>
    </method>
    <method name="getRenderingHints" return="java.awt.RenderingHints"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a copy of the rendering hints.  This method returns a copy
 of all the rendering hints.
 
 @return	The rendering hints.]]>
      </doc>
    </method>
    <method name="setRenderingHint"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.awt.RenderingHints.Key"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets one rendering hint.  This method sets the value of a single rendering hint.
 
 @param	key		The rendering hint key.
 @param	value	The new value of the rendering hint.]]>
      </doc>
    </method>
    <method name="getRenderingHint" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.awt.RenderingHints.Key"/>
      <doc>
      <![CDATA[Gets one rendering hint.  This method returns the value of a rendering hint.
 
 @param	key		The rendering hint key.
 
 @return	The value of the rendering hint.]]>
      </doc>
    </method>
    <method name="isImageSmoothReduction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="This flag is not used in rendering anymore.">
      <doc>
      <![CDATA[Returns the value of the smooth image reduction hingt.
 
 @return The value of the smoot image reduction hint.
 
 @deprecated This flag is not used in rendering anymore.]]>
      </doc>
    </method>
    <method name="setImageSmoothReduction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="This flag is not used in rendering anymore.">
      <param name="imageSmoothReduction" type="boolean"/>
      <doc>
      <![CDATA[This rendering hint tells the library whether to use a smooth image
 rescaling algorithm when reducing sizes.  When this is on, reduced image
 quality is much higher but this has a significant performance hit, especially
 for large images.
 
 @param imageSmoothReduction true to use smooth rescaling, false to use 
 standard rescaling.
 
 @deprecated This flag is not used in rendering anymore.]]>
      </doc>
    </method>
    <method name="getImageSmoothReduction" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the image reduction hint.
 
 @return Value of the image reduction hint.]]>
      </doc>
    </method>
    <method name="setCMYKProfile"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cmykProfile" type="java.awt.color.ICC_Profile"/>
      <doc>
      <![CDATA[Sets a custom CMYK profile to use when reading any CMYK color information.
 If the host application needs to have custom CMYK to RGB conversion, it can
 call this method to set a custom profile.
 
 @param cmykProfile The new profile to use for CMYK color conversion]]>
      </doc>
    </method>
    <method name="renderSignatureVerify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns the value of the flag that controls whether signature verification
 will be rendered.  When this flag is true, the renderer will show an icon on the
 signature field representing the results of the signature verification.
 
 @return The value of the flag that controls rendering of signature verification]]>
      </doc>
    </method>
    <method name="setRenderSignatureVerification"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="renderSignatureVerify" type="boolean"/>
      <doc>
      <![CDATA[This method sets the value of the flag that controls whether signature verification
 will be rendered.  When this flag is true, the renderer will show an icon on the
 signature field representing the results of the signature verification.
 
 @param renderSignatureVerify The new value of the flag]]>
      </doc>
    </method>
    <method name="setRenderSignatureTag"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="renderSignatureTag" type="boolean"/>
      <doc>
      <![CDATA[This method sets the value of the flag that controls whether the signature
 tag ("Sign Here") is rendered for empty signature fields.
 
 @param renderSignatureTag The new value of the flag.]]>
      </doc>
    </method>
    <method name="renderSignatureTag" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns the value of the flag that controls rendering of the signature
 tag on empty fields.  The signature tag is an icon with the a caption like "Sign Here"
 
 @return The current value of the render signature tag flag.]]>
      </doc>
    </method>
    <method name="setRenderComments"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="renderComments" type="boolean"/>
      <doc>
      <![CDATA[Sets a flag to tell the library to render annotations.  When this is set to false,
 pages in documents will not be rendered with their comments.
 
 @param renderComments New value of the flag.]]>
      </doc>
    </method>
    <method name="isRenderComments" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the render comments flag.
 
 @return The value of the render comments flag.]]>
      </doc>
    </method>
    <method name="setImagePaintingMemoryMB"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="imagePaintingMemory" type="int"/>
      <doc>
      <![CDATA[Sets the amount of memory used when painting images, in megabytes, i.e. setting the value to 4 will allocate
 4 MB of memory to be used when painting images.  Images are painted in strips, to be able to handle
 images of unlimited size.  This amount of memory determines the height of each memory strip that is processed
 and painted.  This memory is used during painting an image and then released, it is not retained.  The memory 
 cannot be set below 1 MB, if it is, the request will be ignored.  
 
 @param imagePaintingMemory The new amount of memory to use when painting images.]]>
      </doc>
    </method>
    <method name="getImagePaintingMemoryMB" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the amount of memory used when painting images, in megabytes]]>
      </doc>
    </method>
    <field name="JAPANESE_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JAPANESE_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CHINESE_SIMPLIFIED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KOREAN_SERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KOREAN_SANSSERIF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[PDFRenderHints allows the application to change the default rendering hints
 used when rendering a document.  The class initializes the default rendering
 hints to:<br><br>
 <ul>
 <li>RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON</li>
 <li>RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON</li>
 <li>RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON</li>
 </ul>
 <br><br>
 The default settings can be modified by the host application by calling
 PDFRenderHints.setRenderingHint or PDFRenderHints.setRenderingHints.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFRenderHints -->
  <!-- start class com.qoppa.pdf.PDFSecurityException -->
  <class name="PDFSecurityException" extends="com.qoppa.pdf.PDFException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFSecurityException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new PDFSecurityException.
 
 @param msg The message for the exception.]]>
      </doc>
    </constructor>
    <constructor name="PDFSecurityException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new PDFSecurityException.
 
 @param msg The message for the exception.
 @param cause The underlying cause for this exception.]]>
      </doc>
    </constructor>
    <doc>
    <![CDATA[Exceptions related to security problems.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PDFSecurityException -->
  <!-- start class com.qoppa.pdf.PrintDefaults -->
  <class name="PrintDefaults" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="toXMLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method creates a <code>String</code> that contains an xml element of
 the print default attributes. The print default attributes are used to
 set the default values in the custom print dialog. This
 <code>String</code> can be stored and used to set the default print
 attributes.
 
 @see #setFromXML(String)
 @return A <code>String</code> containing an xml element of the print defaults.]]>
      </doc>
    </method>
    <method name="setFromXML"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xmlString" type="java.lang.String"/>
      <doc>
      <![CDATA[This method sets the print default attributes with properly formatted
 <code>String</code> xml element.
 
 @see #toXMLString()]]>
      </doc>
    </method>
    <field name="XMLKEY_PRINT_DEFAULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML Element name used for reading/writing as an XML string]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class is used to store and restore printer defaults across application
 sessions. The print defaults are only used in the Qoppa print dialog. When a
 user prints any documents, they might change the printer settings. This class
 keeps track of the printer settings for all different printers and then
 provides a method to get current settings in XML format. The host application
 can then store these settings and then restore them using the same XML
 string.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PrintDefaults -->
  <!-- start interface com.qoppa.pdf.PrintListener -->
  <interface name="PrintListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="pagePrinting"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pdfDoc" type="com.qoppa.pdf.dom.IPDFDocument"/>
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Invoked when a page is printed.
 @param pdfDoc - the <code>IPDFDocument</code> that is being printed
 @param pageIndex - the index of the page being printed]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The listener interface for receiving print events.]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.PrintListener -->
  <!-- start class com.qoppa.pdf.PrintSettings -->
  <class name="PrintSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PrintSettings"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a default PrintSettings object.  The default PrintSettings
 object will auto-rotate, shrink to margins, center in page, and print
 annotations, but will not expand the content to fit to the margins.]]>
      </doc>
    </constructor>
    <constructor name="PrintSettings" type="boolean, boolean, boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new PrintSettings object and initializes each of its
 variables to the parameters.
 
 @param	autoRotate		Sets the auto rotate flag.
 @param	shrinkToMargins	Sets the shrink to page flag.
 @param	expandToMargins	Sets the expand to page flag.
 @param	centerInPage	Sets the center in page flag.]]>
      </doc>
    </constructor>
    <constructor name="PrintSettings" type="com.qoppa.pdf.PrintSettings"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a new PrintSettings object and initializes to init.
 
 @param	init	Object to use to initialize the new PrintSettings.]]>
      </doc>
    </constructor>
    <method name="isPrintAnnotations" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the print annotations flag.  This flag determines whether annotations
 on a PDF document will be printed.
 The print form fields only flag takes precedence over this flag.
 
 @return The value of the print annotations flag.]]>
      </doc>
    </method>
    <method name="setPrintAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printAnnotations" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the print annotations flag.  This flag determines whether annotations
 on a PDF document will be printed. The default value is true.
 The print form fields only flag takes precedence over this flag.
 
 @param printAnnotations The new value of the print annotations flag.]]>
      </doc>
    </method>
    <method name="setPrintableRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="rect" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets the area to print. The rectangle must be contained within the page's crop box, otherwise it is ignored.
 
 @param pageIndex The index of the page. Page index starts at 0.
 @param rect The area to print.]]>
      </doc>
    </method>
    <method name="getPrintableRectangle" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the area to print.
 
 @param pageIndex The index of the page. Page index starts at 0.
 @return The area to print.]]>
      </doc>
    </method>
    <method name="setQoppaPrintDialog"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="qoppaDialog" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the Qoppa print dialog flag. If true then the library
 will show custom print dialog, otherwise it will show the native print
 dialog. If the Qoppa print dialog is shown, then the settings auto rotate,
 shrink to margins, expand to margins, center in page, and print
 annotations may be modified by the user. The Qoppa print dialog has a
 print preview, page range options, and options to set print job
 attributes including Chromaticity, Copies, Destination, MediaSizeName,
 MediaTray, OrientationRequested, PrintQuality, SheetCollate, and Sides.
 The default value is true.
 
 @param qoppaDialog
            The value of the custom dialog flag.]]>
      </doc>
    </method>
    <method name="isQoppaPrintDialog" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the Qoppa print dialog flag. If true then the library
 will use a custom print dialog, otherwise it will use the native print
 dialog.
 
 @return The value of the custom dialog flag.]]>
      </doc>
    </method>
    <method name="isPrintFormsOnly" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the print form fields only flag.
 If this flag is set to true, then only the form fields in the document
 will be printed. The page contents and the annotations will not be
 printed. This flag takes precedence over the print annotations flag. The
 default value is false.
 
 @return The value of the print form fields only flag.]]>
      </doc>
    </method>
    <method name="setPrintFormsOnly"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="print" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the print form fields only flag.
 If this flag is set to true, then only the form fields in the document
 will be printed. The page contents and the annotations will not be
 printed. This flag takes precedence over the print annotations flag. The
 default value is false.
 
 @param print The value of the print form fields only flag.]]>
      </doc>
    </method>
    <field name="m_AutoRotate" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag used to auto-rotate the document when printing.  When this flag is set to true, 
 the library will compare the PDF page to the printer page and find a best fit, to match
 landscape to landscape and portrait to portrait. The default value is true.]]>
      </doc>
    </field>
    <field name="m_ShrinkToMargins" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag used to shrink the output to fit the printer margins.  When this flag is set to true,
 and the PDF content is larger than the printable margins on the printer, the output will be
 scaled down to fit within the printer margins. The default value is true.]]>
      </doc>
    </field>
    <field name="m_ExpandToMargins" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag used to expand the output to the printer margins.  When this flag is set to true,
 and the PDF content is smaller than the printable area on the printer, the output will be
 scaled up to fill the printable area on the printer page. The default value is false.]]>
      </doc>
    </field>
    <field name="m_CenterInPage" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag used to center the output on the printed page.  When this flag is set to true,
 and the PDF content is smaller than the printable area, the output will be centered on
 the printed page.  This flag has no effect if the PDF content is larger than the printable
 area or if the expand to margins flag is set to true. The default value is true.]]>
      </doc>
    </field>
    <field name="m_PrintAnnotations" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This flag tells the library whether to print annotations when sending
 the PDF content to a printer. The default value is true.
 The print form fields only flag takes precedence over this flag.]]>
      </doc>
    </field>
    <field name="m_PrintFormsOnly" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If this flag is set to true, then only the form fields in the document
 will be printed. The page contents and the annotations will not be
 printed. This flag takes precedence over the print annotations flag. The
 default value is false.]]>
      </doc>
    </field>
    <field name="m_QoppaDialog" type="boolean"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the value of the Qoppa print dialog flag. If true then the library
 will show custom print dialog, otherwise it will show the native print
 dialog. If the Qoppa print dialog is shown, then the settings auto rotate,
 shrink to margins, expand to margins, center in page, and print
 annotations may be modified by the user. The Qoppa print dialog has a
 print preview, page range options, and options to set print job
 attributes including Chromaticity, Copies, Destination, MediaSizeName,
 MediaTray, OrientationRequested, PrintQuality, SheetCollate, and Sides.
 The default value is true.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This object controls the behavior of the library when sending a PDF document
 to the printer. The object has six flags that can be set:<br>
 <br>
 
 m_AutoRotate - Will rotate the printout to match the width and length with
 the paper. When this flag is on, the library will ignore the portrait /
 landscape setting set by the user.<br>
 <br>
 
 m_ShrinkToMargins - Will shrink pages so that they fit in the paper. This
 flag has no effect if the pages in a document are smaller than the paper they
 are being printed on.<br>
 <br>
 
 m_ExpandToMargins - Will expand pages to fill the paper they are being
 printed on. This flag has no effect if the pages in a document are larger
 than the paper they are being printed on.<br>
 <br>
 
 m_CenterInPage - Will center the page in the paper. This flag has no effect
 if the pages in a document are larger than the paper they are being printed
 on.<br><br>
 
 m_PrintAnnotations - Will print annotations when sending PDF content to the
 printer.<br><br>
 
 m_QoppaDialog - Will show a custom print dialog, otherwise will show the
 native print dialog.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.PrintSettings -->
  <!-- start class com.qoppa.pdf.ResizePageOptions -->
  <class name="ResizePageOptions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ResizePageOptions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a default ResizePageOptions object.]]>
      </doc>
    </constructor>
    <method name="getMediaBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the new media box for the PDFPage.
 
 @return The new media box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="setMediaBox"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaBox" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets the new media box for the PDFPage.
 
 @param mediaBox
            The new media box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="isCenter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the option to center the page contents in the new media box. The
 default value is false.
 
 @return The center option.]]>
      </doc>
    </method>
    <method name="setCenter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="center" type="boolean"/>
      <doc>
      <![CDATA[Sets the option to center the page contents in the new media box.
 
 @param center
            The center option.]]>
      </doc>
    </method>
    <method name="isAutoScale" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the option to scale the page contents to fit inside the new media
 box. The default value is false.
 
 @return The scale option]]>
      </doc>
    </method>
    <method name="setAutoScale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="autoScale" type="boolean"/>
      <doc>
      <![CDATA[Sets the option to scale the page contents to fit inside the new media
 box.
 
 @param autoScale
            The scale option]]>
      </doc>
    </method>
    <method name="getXOffset" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the x offset of the page contents.
 
 @return The x offset]]>
      </doc>
    </method>
    <method name="setXOffset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xOffset" type="double"/>
      <doc>
      <![CDATA[Sets the x offset of the page contents. If the center or auto scale
 option is set to true, then this value is not used.
 
 @param xOffset
            The y offset]]>
      </doc>
    </method>
    <method name="getYOffset" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the y offset of the page contents.
 
 @return The y offset]]>
      </doc>
    </method>
    <method name="setYOffset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="yOffset" type="double"/>
      <doc>
      <![CDATA[Sets the y offset of the page contents. If the center or auto scale
 option is set to true, then this value is not used.
 
 @param yOffset
            The y offset]]>
      </doc>
    </method>
    <method name="getScale" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns scale to be applied to the page content. This value is not used if
 auto scale is set to true.
 
 @return The scale value]]>
      </doc>
    </method>
    <method name="setScale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scale" type="double"/>
      <doc>
      <![CDATA[Sets the scale to be applied to the page content. This value is not
 used if auto scale is set to true.
 
 @param scale
            The scale value]]>
      </doc>
    </method>
    <method name="getRotation" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the amount to rotate the page contents in radians.
 
 @return The rotation value]]>
      </doc>
    </method>
    <method name="setRotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rotation" type="double"/>
      <doc>
      <![CDATA[Sets the amount to rotate the page contents in radians. A positive value
 rotates the page counter clockwise.
 
 @param rotation
            The rotation value]]>
      </doc>
    </method>
    <method name="setFitToMedia"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fit" type="boolean"/>
      <doc>
      <![CDATA[If true then the page's crop box will be set equal to the page's media
 box, otherwise the crop box will have the same margins as before
 resizing. The default is false.
 
 @param fit
            The fit to media option]]>
      </doc>
    </method>
    <method name="isFitToMedia" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the fit to media option.
 
 @return The fit to media option]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This object controls the behavior of the library when resizing the PDFPage.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.ResizePageOptions -->
  <!-- start class com.qoppa.pdf.SignatureAppearance -->
  <class name="SignatureAppearance" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SignatureAppearance"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default constructor]]>
      </doc>
    </constructor>
    <constructor name="SignatureAppearance" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This constructor creates a <code>SignatureAppearance</code> from a
 properly formatted XML string.
 
 @see #toXMLString()
 @param xmlString]]>
      </doc>
    </constructor>
    <method name="showCertificateDN"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[This is a convenience method set the visibility of all of the
 distinguished name properties of the signing certificate.
 
 @param visible
 @see #setVisibleCommonName
 @see #setVisibleCountry
 @see #setVisibleEmail
 @see #setVisibleLocal
 @see #setVisibleOrgName
 @see #setVisibleOrgUnit
 @see #setVisibleState]]>
      </doc>
    </method>
    <method name="isVisibleName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the name should be used when creating the
 signature appearance. The name appears in large text on the left in
 left-to-right layout.
 
 @return visibleName flag indicating if the name should be visible]]>
      </doc>
    </method>
    <method name="setVisibleName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains a common
 name, this sets whether or not the name should be used when creating the
 signature appearance. This namne appears in large text on the left in
 left-to-right layout.
 
 @param visible
            flag indicating if the name should be visible]]>
      </doc>
    </method>
    <method name="isVisibleDigitallySigned" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the "Digitally signed by..." label should be used
 when creating the signature appearance.
 
 @return visibleName flag indicating if the "Digitally signed by..." label
         should be visible]]>
      </doc>
    </method>
    <method name="setVisibleDigitallySigned"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[Sets whether or not the "Digitally signed by..." label should be used
 when creating the signature appearance.
 
 @param visible
            flag indicating if the "Digitally signed by..." label should
            be visible]]>
      </doc>
    </method>
    <method name="isVisibleCommonName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the common name should be used when creating the
 signature appearance.
 
 @return visibleCommonName flag indicating if the common name should be
         visible]]>
      </doc>
    </method>
    <method name="setVisibleCommonName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains a common
 name, this sets whether or not the common name should be used when
 creating the signature appearance.
 
 @param visible
            flag indicating if the common name should be visible]]>
      </doc>
    </method>
    <method name="isVisibleOrgUnit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the organizational unit should be used when
 creating the signature appearance.
 
 @return visibleOrgUnit flag indicating if the organizational unit should
         be visible]]>
      </doc>
    </method>
    <method name="setVisibleOrgUnit"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains an
 organizational unit, this sets whether or not the organizational unit
 should be used when creating the signature appearance.
 
 @param visible
            flag indicating if the organizational unit should be visible]]>
      </doc>
    </method>
    <method name="isVisibleOrgName" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the organization name should be used when creating
 the signature appearance.
 
 @return visibleOrgName flag indicating if the organization name should be
         visible]]>
      </doc>
    </method>
    <method name="setVisibleOrgName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains an
 organization name, this sets whether or not the organization name should
 be used when creating the signature appearance.
 
 @param visible
            flag indicating if the organization name should be visible]]>
      </doc>
    </method>
    <method name="isVisibleLocal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the locality should be used when creating the
 signature appearance.
 
 @return visibleLocal flag indicating if the locality should be visible]]>
      </doc>
    </method>
    <method name="setVisibleLocal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains a locality,
 this sets whether or not the locality should be used when creating the
 signature appearance.
 
 @param visible
            flag indicating if the locality should be visible]]>
      </doc>
    </method>
    <method name="isVisibleState" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the state should be used when creating the
 signature appearance.
 
 @return visibleState flag indicating if the state should be visible]]>
      </doc>
    </method>
    <method name="setVisibleState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains a state,
 this sets whether or not the state should be used when creating the
 signature appearance.
 
 @param visible
            flag indicating if the state should be visible]]>
      </doc>
    </method>
    <method name="isVisibleCountry" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the country should be used when creating the
 signature appearance.
 
 @return visibleCountry flag indicating if the country should be visible]]>
      </doc>
    </method>
    <method name="setVisibleCountry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains a country
 code, this sets whether or not the country code should be used when
 creating the signature appearance.
 
 @param visible
            flag indicating if the country code should be visible]]>
      </doc>
    </method>
    <method name="isVisibleEmail" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the email address should be used when creating the
 signature appearance.
 
 @return visibleEmail flag indicating if the email address should be
         visible]]>
      </doc>
    </method>
    <method name="setVisibleEmail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[If the distinguished name of the signing certificate contains an email
 address, this sets whether or not the email address should be used when
 creating the signature appearance.
 
 @param visible
            flag indicating if the email address should be visible]]>
      </doc>
    </method>
    <method name="isVisibleDate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the date should be used when creating the
 signature appearance.
 
 @return visibleDate flag indicating if the date should be visible]]>
      </doc>
    </method>
    <method name="setVisibleDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[This sets whether or not the date should be used when creating the
 signature appearance.
 
 @param visible
            flag indicating if the date should be visible]]>
      </doc>
    </method>
    <method name="isVisibleReason" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not the reason should be used when creating the signature appearance.
 @return visibleReason flag indicating if the reason should be visible]]>
      </doc>
    </method>
    <method name="setVisibleReason"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[This sets whether or not the reason should be used when creating the signature appearance.
 @param visible flag indicating if the reason should be visible]]>
      </doc>
    </method>
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the buffered image to use when creating the signature appearance.
 If the image file name is set with {@link #setImageFile(String)} and the
 <code>BufferedImage</code> is <code>null</code>, this method will attempt
 to read the a <code>BufferedImage</code> from the image file name.
 
 @return the buffered image to use when creating the signature appearance.
 @throws IOException]]>
      </doc>
    </method>
    <method name="setImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bufferedImage" type="java.awt.image.BufferedImage"/>
      <doc>
      <![CDATA[Sets a buffered image to use then creating the signature appearance.
 
 @param bufferedImage
            the buffered image to use when creating the signature
            appearance]]>
      </doc>
    </method>
    <method name="getImageOpacity" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the image opacity value to use when drawing the image on the
 <code>SignatureField</code>.  The default value is 1.
 
 @return the imageOpacity property]]>
      </doc>
    </method>
    <method name="setImageOpacity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alpha" type="float"/>
      <doc>
      <![CDATA[Sets the image opacity value to use when drawing the image on the
 <code>SignatureField</code>. The value must be between 0.0 and 1.0
 inclusive and the default value is 1.
 
 @param alpha The new image opacity.
 @exception IllegalArgumentException]]>
      </doc>
    </method>
    <method name="getImagePosition" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the horizontal position of the image.
 
 @return One of the following constants defined in
         <code>SwingConstants</code>: <code>LEFT</code>,
         <code>CENTER</code>, <code>RIGHT</code>, <code>LEADING</code> or
         <code>TRAILING</code>.
 
 @see SwingConstants]]>
      </doc>
    </method>
    <method name="setImagePosition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="imagePosition" type="int"/>
      <doc>
      <![CDATA[Sets the horizontal position of the image.
 
 @param imagePosition
            One of the following constants defined in
            <code>SwingConstants</code>: <code>LEFT</code>,
            <code>CENTER</code> (the default), <code>RIGHT</code>,
            <code>LEADING</code>, or <code>TRAILING</code>.]]>
      </doc>
    </method>
    <method name="getTextLeft" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text to display on the left side of the signature appearance.
 
 @return the text to display on the left side of the signature appearance]]>
      </doc>
    </method>
    <method name="setTextLeft"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the left text property to use when creating the signature
 appearance.
 
 @param text
            the text on the left side of the signature field]]>
      </doc>
    </method>
    <method name="getTextRight" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text to display on the right side of the signature
 appearance.
 
 @return the text to display on the right side of the signature appearance]]>
      </doc>
    </method>
    <method name="setTextRight"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the right text property to use when creating the signature
 appearance.
 
 @param text
            the text on the right side of the signature field]]>
      </doc>
    </method>
    <method name="setTextOrientation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="orientation" type="int"/>
      <doc>
      <![CDATA[Sets the orientation of the text.
 <p>
 
 @param orientation
            One of the following constants defined in
            <code>SwingConstants</code>: <code>LEFT</code>,
            <code>RIGHT</code>, <code>LEADING</code> (the default) or
            <code>TRAILING</code>.]]>
      </doc>
    </method>
    <method name="getTextOrientation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the orientation of the text.
 
 @return The value of the textOrientation property, one of the following
         constants defined in <code>SwingConstants</code>:
         <code>LEFT</code>, <code>RIGHT</code>, <code>LEADING</code> or
         <code>TRAILING</code>.
 
 @see #setTextOrientation
 @see SwingConstants]]>
      </doc>
    </method>
    <method name="setImageFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <doc>
      <![CDATA[If the image file name is set, this <code>SignatureAppearance</code> will attempt to load
 a <code>BufferedImage</code> from the file.
 @param fileName]]>
      </doc>
    </method>
    <method name="getImageFile" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the image file name.
 @see #setImageFile(String)]]>
      </doc>
    </method>
    <method name="getID" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This unique identifier is not used to generate the appearance stream. It is only
 used in saving the <code>SignatureAppearance</code> as an XML string, or when
 creating a <code>SignatureAppearance</code> from an XML string.
 
 @see #toXMLString()
 @see #SignatureAppearance(String)
 @return the ID of the signature appearance]]>
      </doc>
    </method>
    <method name="setDisplayName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="displayName" type="java.lang.String"/>
      <doc>
      <![CDATA[This name is not used to generate the appearance stream. It is only used
 as a label for the <code>SignatureAppearance</code>. It is also used in
 saving the <code>SignatureAppearance</code> as an XML string, or when
 creating a <code>SignatureAppearance</code> from an XML string.
 
 @see #toXMLString()
 @see #SignatureAppearance(String)
 @param displayName
            the displayName to set]]>
      </doc>
    </method>
    <method name="getDisplayName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This name is not used to generate the appearance stream. It is only used
 as a label for the <code>SignatureAppearance</code>. It is also used in
 saving the <code>SignatureAppearance</code> as an XML string, or when
 creating a <code>SignatureAppearance</code> from an XML string.
 
 @see #toXMLString()
 @see #SignatureAppearance(String)
 @return the displayName]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toXMLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method creates a <code>String</code> that contains an XML element of
 the Tool default properties. This <code>String</code> can be stored and
 used to set the <code>SignatureAppearance</code>.
 
 @see #SignatureAppearance(String)
 @return A <code>String</code> containing an XML element of the
         <code>SignatureAppearance</code> properties]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides functionality to customize the appearance of a visible
 signature when a document is signed. The default signature appearance uses
 the distinguished name properties of the signing certificate and displays it
 as:
 
 <pre>
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 \               Digitally signed by  \
 \               Your Name            \
 \   Your        common name, org unit\
 \   Name        org name, locality   \ 
 \               state, country, email\
 \               Date                 \
 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 </pre>
 
 Each of these attributes can be visible or hidden. See
 {@link #setVisibleName}, {@link #setVisibleCommonName},
 {@link #setVisibleOrgUnit}, {@link #setVisibleOrgName},
 {@link #setVisibleLocal}, {@link #setVisibleState},
 {@link #setVisibleCountry}, {@link #setVisibleEmail}, {@link #setVisibleDate}
 . The orientation can also be reversed with {@link #setTextOrientation}.
 <p>
 Custom text content can also be used instead of the distinguished name of the
 signing certificate. See {@link #setTextLeft}, {@link #setTextRight}
 <p>
 Additionally, an image can be used to create the signature appearance
 {@link #setImage}. The image can be placed in the center, left or right side
 of the field with {@link #setImagePosition}.
 <p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.SignatureAppearance -->
  <!-- start class com.qoppa.pdf.SignatureSettings -->
  <class name="SignatureSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="setCaCertsEnabled"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enabled" type="boolean"/>
      <doc>
      <![CDATA[The CaCertsEnabled flag determines whether or not the certificates in cacerts from
 the current JRE will be added to the trusted certificate cache used to verify digital
 signatures. Changing the value of this flag will cause the certificates to be reloaded. 
 
 @param enabled New value of the flag]]>
      </doc>
    </method>
    <method name="isCaCertsEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The CaCertsEnabled flag determines whether or not the certificates in cacerts from
 the current JRE will be added to the trusted certificate cache used to verify digital
 signatures. 
 
 @return true if certificates in the Java cacerts file are trusted, false o.w.]]>
      </doc>
    </method>
    <method name="setOSCertsEnabled"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enabled" type="boolean"/>
      <doc>
      <![CDATA[The OSCertsEnabled flag determines whether or not the certificates in the OS
 trusted certificates will be added to the trusted certificate cache used to verify digital
 signatures.  Changing the value of this flag will cause the certificates to be reloaded. 
 
 @param enabled New value of the flag]]>
      </doc>
    </method>
    <method name="isOSCertsEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The OSCertsEnabled flag determines whether or not the certificates in the operating system (Windows or Mac)
 trusted certificates will be added to the trusted certificate cache used to verify digital
 signatures.
 
 @return true is operating system certificates are trusted.]]>
      </doc>
    </method>
    <method name="addX509Certificate"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="certificate" type="java.security.cert.X509Certificate"/>
      <doc>
      <![CDATA[Adds a X509 certificate to the trusted certificate list to be used when verifying digital
 signatures. If certificates need to be removed from the trusted certificate list, reload
 the trusted certificates.
 
 @param certificate the certificate to add to the trusted certificate list]]>
      </doc>
    </method>
    <method name="addKeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keystore" type="java.security.KeyStore"/>
      <exception name="KeyStoreException" type="java.security.KeyStoreException"/>
      <doc>
      <![CDATA[Adds any X509 certificates found in a key store to the trusted certificate list
 to be used when verifying digital signatures. If certificates need to be removed
 from the trusted certificate cache, reload the trusted certificates.
 
 @param keystore The key store object holding the certificates that will be added to the trusted list.
 @throws KeyStoreException When there are errors opening the keystore.]]>
      </doc>
    </method>
    <method name="reloadTrustedCertificates"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method clears the trusted certificate list and reloads the trusted certificates.]]>
      </doc>
    </method>
    <method name="getTrustedCertificates" return="java.util.Hashtable&lt;java.lang.String, java.security.cert.Certificate&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns a hashtable of trusted certificates keyed by the unique identifier
 of the X509Certificate that is returned from SignatureSettings.getUniqueIdentifier(X509Certificate)
 
 @return Hashtable The trusted certificate table keyed by the unique identifier of the X509Certificate]]>
      </doc>
    </method>
    <method name="getCaCerts" return="java.util.Hashtable&lt;java.lang.String, java.security.cert.Certificate&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns a hashtable of most-trusted CA certificates from the JDK keyed by the unique identifier
 of the X509Certificate that is returned from SignatureSettings.getUniqueIdentifier(X509Certificate)
 
 @return Hashtable The most-trusted CA certificate table keyed by the unique identifier of the X509Certificate]]>
      </doc>
    </method>
    <method name="loadCaKeyStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Loads the JDK CA KeyStore.
 @return the JDK CA KeyStore.]]>
      </doc>
    </method>
    <method name="loadOSKeyStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Loads the OS KeyStore (if the OS is Windows or Mac).
 @return the Windows KeyStore or null if the OS is not Windows or Mac.]]>
      </doc>
    </method>
    <method name="getUniqueIdentifier" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="certificate" type="java.security.cert.X509Certificate"/>
      <doc>
      <![CDATA[Returns a unique identifier for a certificate.
 
 @param certificate The certificate to get the UID from.
 @return unique identifier for a certificate]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class manages the certificates that are used to verify digital signatures. 
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.SignatureSettings -->
  <!-- start class com.qoppa.pdf.SignatureValidity -->
  <class name="SignatureValidity" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SignatureValidity"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isValidCertificateChain" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status of the certificate chain validity.
 
 @return true if the certificate chain is valid, false o.w.]]>
      </doc>
    </method>
    <method name="setValidCertificateChain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validCertificateChain" type="boolean"/>
      <doc>
      <![CDATA[Sets the status of the certificate chain validity.  This method is used internally
 by the library when verifying a signature.
 
 @param validCertificateChain The status of the certificate chain validity.]]>
      </doc>
    </method>
    <method name="isValidRevocationList" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the status of the revocation list validity.  When this is false, at least
 one of the certificates in the certificate chain has been revoked.
 
 @return true if none of the certificates has been revoked.]]>
      </doc>
    </method>
    <method name="setValidRevocationList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validRevocationList" type="boolean"/>
      <doc>
      <![CDATA[Sets the status of the revocation list validity.  This method is used internally
 by the library when verifying a signature.
 
 @param validRevocationList The status of the revocation list validity.]]>
      </doc>
    </method>
    <method name="isValidSignatureHash" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether the stored signature hash matches the calculated signature hash.
 
 @return true if the stored signature hash matches the calculated signature hash.]]>
      </doc>
    </method>
    <method name="setValidSignatureHash"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validSignatureHash" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag that indicates that the stored signature hash matches the calculated signature hash.
 This method is used internally by the library when verifying a signature.
 
 @param validSignatureHash Whether the signature hashes match.]]>
      </doc>
    </method>
    <method name="isValidTimestamp" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether the signature has a valid timestamp.
 
 @return true if the signature has a valid timestamp.]]>
      </doc>
    </method>
    <method name="setValidTimestamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validTimestamp" type="boolean"/>
      <doc>
      <![CDATA[Sets the valid timestamp flag.  This method is used internally by the library when verifying a signature.
 
 @param validTimestamp The new value of the valid timestamp flag.]]>
      </doc>
    </method>
    <method name="isAllValid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks if the signature is completely valid.  The signature is completely valid if it passes all checks:<br><br>
 - There were no errors reading and decoding the signature.
 - The stored signature hash matches the calculated signature hash.
 - There were no errors reading the certificate chain.
 - None of the certificates in the certificate chain are revoked.
 - The start and expiration dates are valid.
 - The signature timestamp is valid.
 - The certificate chain starts with a trusted CA.
 - No content changed or appended to the document.
 - The key usage is valid.
 
 @return true if the signature is completely valid, false o.w.]]>
      </doc>
    </method>
    <method name="isValidWithWarning" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the signature is considered valid but has warnings associated with it.
 When this method returns false, it is equivalent to the condition where a viewer would
 display a question mark on the signature.
 
 @return true If the signature is completely valid or it is valid but has warnings.]]>
      </doc>
    </method>
    <method name="isNotValid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method checks if the signature is considered NOT VALID.  A signature is not valid under
 the following conditions:<br><br>
 - There was an error decoding the signature.<br>
 - The stored signature hash does not match the calculated signature hash (isValidSignatureHash() == false)<br>
 - One of the certificates in the signature has been revoked (isValidRevocationList() == false)<br>
 - There was an exception reading the certificate chain in the signature (isValidCertificateChain() == false)<br>
 - The key usage is invalid
 
 @return true if the signature is NOT VALID, false o.w.]]>
      </doc>
    </method>
    <method name="isValidExpiration" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the valid expiration flag.  This flag indicates whether the start and expiration
 dates on the signature are valid and within range.
 
 @return The value of the expiration flag.]]>
      </doc>
    </method>
    <method name="setValidExpiration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validExpiration" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the expiration flag.  This method is used internally by the library when verifying a signature.
 
 @param validExpiration The new value of the expiration flag.]]>
      </doc>
    </method>
    <method name="isTrustedChain" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the trusted chain flag.  This flag indicates whether the chain of certificates
 in the signature starts with a certificate from a trusted certificate authority (CA)
 
 @return The value of the trusted chain flag.]]>
      </doc>
    </method>
    <method name="setTrustedChain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trustedChain" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the trusted chain flag.  This method is used internally by the library when verifying a signature.
 
 @param trustedChain  The new value of the trusted chain flag.]]>
      </doc>
    </method>
    <method name="isValidByteRange" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the byte range flag.  This flag indicates whether the byte range in the signature covers the entire file,
 including the signature dictionary but excluding the signature value itself.
 
 @return The value of the byte range flag.]]>
      </doc>
    </method>
    <method name="setValidByteRange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validByteRange" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the byte range flag.  This method is used internally by the library when verifying a signature.
 
 @param validByteRange The new value of the byte range flag.]]>
      </doc>
    </method>
    <method name="isDocReconstructed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of the document reconstructed flag.  
 This flag indicates whether there was a problem reading the xref table that resulted in the document being reconstructed.
 @return The value of the document reconstructed flag.]]>
      </doc>
    </method>
    <method name="setDocReconstructed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="docReconstructed" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the document reconstructed flag.  This method is used internally by the library when verifying a signature.
 
 @param docReconstructed The new value of the document reconstructed flag.]]>
      </doc>
    </method>
    <method name="drawSmallIcon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <doc>
      <![CDATA[Draws a small icon that reflects the validity state of the signature.  The icon can be a green checkmark
 if the signature is completely valid, a question mark if the signature is valid but has warnings or a red
 X if the signature is not valid.
 
 @param g2d The graphics object on which to draw the icon.]]>
      </doc>
    </method>
    <method name="getLargeIcon" return="javax.swing.Icon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an Icon that will draw the status of the signature with the same rules as drawSmallIcon().
 
 @return Returns an icon that represents the status of this signature:<br><br>
 - Green check mark when the signature is valid.
 - Blue question mark when the signature has some warnings.
 - Red X when the signature is invalid.]]>
      </doc>
    </method>
    <method name="getSmallIcon" return="javax.swing.Icon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getValidityText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a textual description of the state of the signature.  This method looks at all the 
 different flags and composes a human readable description of the validity of the signature.
 
 @return A text description of the signature validity.]]>
      </doc>
    </method>
    <method name="getValidationMessages" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isValidSignatureObject" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a flag that indicates whether the signature object was readable.  If there are any errors
 reading the signature object, this flag is set to false.
 
 @return Flag indicating whether the library was able to read the signature object.]]>
      </doc>
    </method>
    <method name="setValidSignatureObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validSignatureObject" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the valid signature object flag.  This method is used internally by the library when verifying a signature.
 
 @param validSignatureObject The new value of the valid signature object flag.]]>
      </doc>
    </method>
    <method name="getExceptionMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a message associated with an exception when reading the signature.  If there is an exception
 reading the signature, the library will set this message to describe the nature of the exception.  If
 there were no exceptions, this method will return null.
 
 @return A message describing an exception if there was one when reading the signature.]]>
      </doc>
    </method>
    <method name="getException" return="java.lang.Throwable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns any exception when reading the signature.
 
 @return Any exception when reading the signature.]]>
      </doc>
    </method>
    <method name="setException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="msg" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the exception when reading the signature.  This method is used internally by the library when verifying a signature.
 @param t The exception.
 @param msg Any message associated with the exception.]]>
      </doc>
    </method>
    <method name="isTested" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating if this signature has been tested.
 
 @return Flag indicating whether this signature has been tested.]]>
      </doc>
    </method>
    <method name="setTested"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tested" type="boolean"/>
      <doc>
      <![CDATA[Sets flag indicating that this signature has been tested.  This method is used internally by the library when testing a signature.
 
 @param tested The new value of the tested flag.]]>
      </doc>
    </method>
    <method name="isContentAppended" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a flag that indicates if there has been any content appended to this PDF.  If content has been appended,
 the signature does not cover the additional content, but might still be valid for the original content, if it
 has not been modified.
 
 @return Flag indicating if content has been added to the PDF.]]>
      </doc>
    </method>
    <method name="setContentAppended"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentAppended" type="boolean"/>
      <doc>
      <![CDATA[Sets the content appended flag.  This method is used internally by the library when verifying a signature.
 
 @param contentAppended The new value of the content appended flag.]]>
      </doc>
    </method>
    <method name="setTSValid"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valid" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to indicate that if a time stamp is present, if it is valid
 
 @param valid Validity of the timestamp.]]>
      </doc>
    </method>
    <method name="isTSValid" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If there is a time stamp token, returns whether it is valid.
 @return true if there is a time stamp token and it is valid.]]>
      </doc>
    </method>
    <method name="setTSValidCertificate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="valid" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to indicate that if a time stamp is present that its certificate is valid.
 @param valid Validity of the timestamp certificate.]]>
      </doc>
    </method>
    <method name="isTSValidCertificate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If there is a time stamp token, returns whether its certificate is valid.
 @return true if the time stamp token certificate is valid.]]>
      </doc>
    </method>
    <method name="setValidKeyUsage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validKeyUsage" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to indicate that the key usage is valid.
 @param validKeyUsage Validity of the key usage.]]>
      </doc>
    </method>
    <method name="isValidKeyUsage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the key usage is valid.
 @return true if the KU field allows for signing documents]]>
      </doc>
    </method>
    <method name="setTSTrustedChain"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tsTrustedChain" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to indicate if the TSA certificate chain is trusted.
 
 @param tsTrustedChain Trusted status of the TSA certificate chain.]]>
      </doc>
    </method>
    <method name="isTSTrustedChain" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the TSA certificate chain is trusted.
 @return true if the TSA certificate chain is trusted.]]>
      </doc>
    </method>
    <method name="setValidPadesCertificate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="validPadesCertificate" type="boolean"/>
      <doc>
      <![CDATA[Set the flag to indicate if the PAdES certificate is valid.
 @param validPadesCertificate true if the PAdES certificate is valid.]]>
      </doc>
    </method>
    <method name="isValidPadesCertificate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this is a PAdES signature and the certificate is valid OR if this is not a PAdES signature.  False if it's a CAdES signature with an invalid certificate.
 @return true if this is a PAdES signature and the certificate is valid OR if this is not a PAdES signature.  False if it's a CAdES signature with an invalid certificate.]]>
      </doc>
    </method>
    <field name="QUESTION_FONT" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class returns information about the validity of a signature within the PDF document.
 To determine whether a signature is completely valid, the host application can call the
 isAllValid() method.  If isAllValid returns false, the application can call isValidWithWarning() to
 determine if the signature is valid but has warnings or isNotValid() to determine if the signature
 is not valid at all.<br><br>
 The host application can use any of the is...() methods to determine the cause of the signature
 status and it can also call getValidityText() to get a textual description of the signature status.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.SignatureValidity -->
  <!-- start class com.qoppa.pdf.SigningInformation -->
  <class name="SigningInformation" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SigningInformation" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Constructs a SigningInformation object and gets the digital ID from a named PKCS#12 file.  The method reads the file and 
 gets the digital ID for use in signing.
 
 @param pkcs12File The name of the PKCS#12 key store file
 @param ksPWD The key store password
 @param entryAlias The alias of the entry to be used in signing.
 @param aliasPWD The password to the alias entry.
 
 @throws GeneralSecurityException
 @throws IOException
 @throws PDFException]]>
      </doc>
    </constructor>
    <constructor name="SigningInformation" type="java.security.KeyStore, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Constructs a SigningInformation object and gets the digital ID from a Java KeyStore object.
 
 @param ks The KeyStore object that contains the digital ID.
 @param entryAlias The alias of the entry to be used in signing.
 @param aliasPWD The password to the alias entry.
 
 @throws GeneralSecurityException
 @throws PDFException]]>
      </doc>
    </constructor>
    <constructor name="SigningInformation" type="java.security.PrivateKey, java.security.cert.Certificate, java.security.cert.Certificate[], java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Constructs a SigningInformation object given a private key, signer certificate and certificate chain.
 
 @param pk The private key to use in signing. 
 @param signerCert The singer's certificate.
 @param certChain The signer's certificate chain
 @param provider The JCE provider to use when accessing the private key.  If left null, we will use the default
 Java JCE provider.
 
 @throws PDFException When the key usage is invalid.]]>
      </doc>
    </constructor>
    <constructor name="SigningInformation" type="org.bouncycastle.operator.ContentSigner, java.security.cert.Certificate, java.security.cert.Certificate[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a SigningInformation object that will use an external content signer.  The content signer implementation will be fed the bytes
 from the PDF document to calculate the signature hash and then will be caled to get the signature.  the signer certificate and certificate
 chain passed in will be included in the PKCS#7 object inserted in the PDF document as part of the signature.
 
 @param signer The signer.
 @param signerCert The signer's certificate.
 @param certChain The signer's certificate chain.]]>
      </doc>
    </constructor>
    <method name="getContentSigner" return="org.bouncycastle.operator.ContentSigner"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the content signer.  This can be an external signer.
 @return the content signer.]]>
      </doc>
    </method>
    <method name="getContactInformation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the contact information used in the signature.
 
 @return The contact name]]>
      </doc>
    </method>
    <method name="setContactInformation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contactInformation" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the contact information to be used in the signature.
 
 @param contactInformation The new contact information.]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the location to be used in the signature.
 
 @return The location]]>
      </doc>
    </method>
    <method name="setLocation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the location to be used in the signature.
 
 @param location The new location.]]>
      </doc>
    </method>
    <method name="getReason" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the reason for signing to be used in the signature.
 
 @return The reason for signing.]]>
      </doc>
    </method>
    <method name="setReason"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reason" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the reason for signing to be used in the signature.
 
 @param reason The new reason.]]>
      </doc>
    </method>
    <method name="getPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns the private key retrieved from the KeyStore or PKCS #12 file.  This key is used to create the
 digital signature hash when a document is signed.
 
 @return The private key.
 
 @deprecated]]>
      </doc>
    </method>
    <method name="getJCEProvider" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <doc>
      <![CDATA[Returns the name of the JCE provider to use when accessing the Private Key.  This value can be null, 
 signifying that the default Java JCE provider will be used.
 @return The name of the JCE provider.
 
 @deprecated]]>
      </doc>
    </method>
    <method name="getSignerCertificate" return="java.security.cert.Certificate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the certificate for the digital id retrieved from the KeyStore or the PKCS#12 file.
 
 @return The certificate for the digital id.]]>
      </doc>
    </method>
    <method name="getCertificateChain" return="java.security.cert.Certificate[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the certificate chain for the issuers of the certificate in the key store.
 
 @return The certificate chain.]]>
      </doc>
    </method>
    <method name="setSignatureAppearance"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signAppearance" type="com.qoppa.pdf.SignatureAppearance"/>
      <doc>
      <![CDATA[Sets the <code>SignatureAppearance</code> to use when creating the
 signature appearance stream.
 
 @param signAppearance the signAppearance to use when creating the signature appearance stream]]>
      </doc>
    </method>
    <method name="getSignatureAppearance" return="com.qoppa.pdf.SignatureAppearance"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the <code>SignatureAppearance</code> to use when creating the
 signature appearance stream.
 
 @return the signAppearance]]>
      </doc>
    </method>
    <method name="getCustomProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[This method can be used to retrieve the values of custom properties
 
 @param key The key for the custom property]]>
      </doc>
    </method>
    <method name="setCustomProperty"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method can be used to add additional custom properties to the signature dictionary.
 
 @param key A unique key for the custom property
 @param value The vale of the custom property]]>
      </doc>
    </method>
    <method name="getCustomProperties" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the custom properties table.  Returns null if no custom properties have been set.]]>
      </doc>
    </method>
    <method name="getTimestampServer" return="com.qoppa.pdf.TimestampServer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Timestamp Server information]]>
      </doc>
    </method>
    <method name="setTimestampServer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="server" type="com.qoppa.pdf.TimestampServer"/>
      <doc>
      <![CDATA[Set the Timestamp server information
 
 @param server]]>
      </doc>
    </method>
    <method name="setCertifyingSignature"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="certifyingSignature" type="boolean"/>
      <doc>
      <![CDATA[To create a certifying signature, set this property to true.  It is false by default.]]>
      </doc>
    </method>
    <method name="isCertifyingSignature" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this is a certifying signature.]]>
      </doc>
    </method>
    <method name="setPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="permissions" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This property is meaningful only if this is a certifying signature.
 Valid values are 1-3 and the default is 2.  There are predefined ints in this class
 to use for the permission levels, PERM_NOCHANGES, PERM_FORMFILL_SIGNATURE, PERM_FORMFILL_SIGNATURE_COMMENTS.
 <br>
 A value of 1 (PERM_NOCHANGES) indicates that the document is intended to be final; <br>
 A value of 2 (PERM_FORMFILL_SIGNATURE) allows form filling and signatures;<br>
 A value of 3 (PERM_FORMFILL_SIGNATURE_COMMENTS) permits form filling, signatures, and comments.
 
 @param permissions
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getPermissions" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the level of permissions for a certifying signature.
 <br>
 A value of 1 (PERM_NOCHANGES) indicates that the document is intended to be final; <br>
 A value of 2 (PERM_FORMFILL_SIGNATURE) allows form filling and signatures; <br>
 A value of 3 (PERM_FORMFILL_SIGNATURE_COMMENTS) permits form filling, signatures, and comments.]]>
      </doc>
    </method>
    <method name="setSignatureFormat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureFormat" type="int"/>
      <doc>
      <![CDATA[Set the signature format.
 Valid values are SigningInformation.FORMAT_PKCS7 (the default) and SigningInformation.FORMAT_PADES.
 
 @param signatureFormat the signature format (SigningInformation.FORMAT_PKCS7 or SigningInformation.FORMAT_PADES).]]>
      </doc>
    </method>
    <method name="getSignatureFormat" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the format of the signature.
 <br>
 A value of 0 (FORMAT_PKCS7) indicates that the format is PKCS7.
 A value of 1 (FORMAT_PADES) indicates that the format is PAdES.]]>
      </doc>
    </method>
    <field name="PERM_NOCHANGES" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Certifying signature permission to indicate the document is intended to be final.]]>
      </doc>
    </field>
    <field name="PERM_FORMFILL_SIGNATURE" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Certifying signature permission to allow form fill and signing.]]>
      </doc>
    </field>
    <field name="PERM_FORMFILL_SIGNATURE_COMMENTS" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Certifying signature permission to allow form fill, signing, and comments.]]>
      </doc>
    </field>
    <field name="FORMAT_PKCS7" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Signature format for PKCS7.]]>
      </doc>
    </field>
    <field name="FORMAT_PADES" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Signature format for PAdES.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Object that holds information necessary to digitally sign a PDF file.  This object is normally
 used by the host application to set the information that the library needs to sign a PDF file.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.SigningInformation -->
  <!-- start class com.qoppa.pdf.TextPosition -->
  <class name="TextPosition" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.TextSelection"/>
    <constructor name="TextPosition" type="java.lang.String, java.awt.Shape, double, java.awt.geom.AffineTransform, int, java.util.List&lt;java.awt.geom.Point2D[]&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getPageNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates on which page of the document the TextPosition's text is located.
 
 @return The page number of the page the TextPosition's text is located on.]]>
      </doc>
    </method>
    <method name="getEnclosingShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="This method is redundant. Replaced by get by lEsS_tHaNcode>getViewSelectionShape()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a shape that encloses the text on the page. The shape's
 coordinate system is in 'display' coordinates: The origin of the
 coordinates are page.getCropBox().getX() and page.getCropBox().getY().
 
 @return The shape that encloses the text on the screen
 
 @deprecated This method is redundant. Replaced by get by <code>getViewSelectionShape()</code>.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text string.
 
 @return The text.]]>
      </doc>
    </method>
    <method name="getQuadrilateral" return="java.awt.geom.Point2D[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getViewQuadrilaterals()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a quadrilateral with the four corners for this text string. The
 coordinates of the quadrilateral is in 'display' coordinates: The origin
 of the coordinates are page.getCropBox().getX() and
 page.getCropBox().getY().
 
 @return An array of 4 Point2D object. The points in can be connected by
         lines in the array order to form the quadrilateral enclosing the
         text.
 @deprecated replaced by <code>getViewQuadrilaterals()</code>.]]>
      </doc>
    </method>
    <method name="getViewQuadrilateral" return="java.awt.geom.Point2D[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getViewQuadrilaterals()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a quadrilateral with the four corners for this text string. The
 coordinates of the quadrilateral is in 'display' coordinates: The origin
 of the coordinates are page.getCropBox().getX() and
 page.getCropBox().getY().
 
 @return An array of 4 Point2D object. The points in can be connected by
         lines in the array order to form the quadrilateral enclosing the
         text.
         
 Note: A TextPosition may be enclosed by a list of a quadrilaterals and this
 method only returns the first quadrilateral in the list.
         
 @deprecated replaced by <code>getViewQuadrilaterals()</code>.]]>
      </doc>
    </method>
    <method name="getPDFQuadrilateral" return="java.awt.geom.Point2D[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getPDFQuadrilaterals()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a quadrilateral with the four corners for this text string. The
 coordinates of the quadrilateral is Media box coordinates.
 
 @return An array of 4 Point2D object. The points in can be connected by
         lines in the array order to form the quadrilateral enclosing the
         text.
         
 Note: A TextPosition may be enclosed by a list of a quadrilaterals and this
 method only returns the first quadrilateral in the list.
         
 @deprecated replaced by <code>getPDFQuadrilaterals()</code>.]]>
      </doc>
    </method>
    <method name="getAngle" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the angle that this text is displayed at on the page.
 
 @return The angle of the text in radians and in Media box coordinate space.]]>
      </doc>
    </method>
    <method name="getQuadrilaterals" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced with lEsS_tHaNcode>getViewQuadrilaterals()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a list of quadrilaterals that will enclose the text elements in
 this object. The coordinates of the list of quadrilaterals is in
 'display' coordinates: The origin of the coordinates are
 page.getCropBox().getX() and page.getCropBox().getY(). This method
 fulfills the {@link TextSelection} interface and will always return a Vector with
 a single element.
 
 @return A list of one quadrilateral - the four around the text
 
 @deprecated replaced with <code>getViewQuadrilaterals()</code>.]]>
      </doc>
    </method>
    <method name="getViewQuadrilaterals" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of quadrilaterals that will enclose the text elements in
 this object. The coordinates of the list of quadrilaterals is in
 'display' coordinates: The origin of the coordinates are
 page.getCropBox().getX() and page.getCropBox().getY(). This method
 fulfills the {@link TextSelection} interface and will always return a Vector with
 a single element.
 
 @return A list of one quadrilateral - the four around the text
 
 In general you probably would use getPDFQuadrilaterals() rather than this method
 as quadrilaterals are typically used in PDF/"Media box" coordinate space.]]>
      </doc>
    </method>
    <method name="getPDFQuadrilaterals" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of quadrilaterals that will enclose the text elements in
 this object. The coordinates of the list of quadrilaterals is in Media
 box coordinates. This method fulfills the {@link TextSelection}
 interface and will always return a Vector with a single element.
 
 @return A list of one quadrilateral - the four around the text
 
 Note: When creating annotations that require quadrilaterals such
 as text highlighting or redactions, this is the method you should use
 as they operate in "Media box", AKA PDF space, coordinates.]]>
      </doc>
    </method>
    <method name="getSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getViewSelectionShape()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a shape that encloses the text on the page. The shape's
 coordinate system is in 'display' coordinates: The origin of the
 coordinates are page.getCropBox().getX() and page.getCropBox().getY().
 This method fulfills the {@link TextSelection} interface.
 
 @return The shape that encloses the text on the screen
 
 @deprecated replaced by <code>getViewSelectionShape()</code>.]]>
      </doc>
    </method>
    <method name="getPDFSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the entire shape that encloses all different word groups in this selection.  The shape's
 coordinate system is in MediaBox coordinates. 
 
 The coordinate space of this shape does not compensate for a cropbox or page rotation. For example,
 if the cropbox's origin is at pt (50,50), then pt (25, 25) is outside of the viewable/displayable area.
 
 @return A Shape, possibly composed of a number of subshapes, that holds all the selection area.]]>
      </doc>
    </method>
    <method name="getViewSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the entire shape that encloses all different word groups in this selection.  The shape's
 coordinate system is in 'display' coordinates: The origin of the coordinates are page.getCropBox().getX() and
 page.getCropBox().getY().
 
 @return A Shape, possibly composed of a number of subshapes, that holds all the selection area.
 
 The coordinate space of this shape differs from getPDFSelectionShape() by applying a transform
 that takes into account the cropbox of the document and the page's rotation. This coordinate space
 can be useful when 'display' or 'view' coordinates are needed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Object that holds information about the location of a text string in a PDF file.  This information
 is returned by the library when text information is needed by the host application.  The information
 includes the text position, its angle and its list of enclosing "quadrilaterals". Each quadrilateral
 is an array of four points that enclose some portion of the text. Typically, a TextPosition for a single
 word, or a contiguous list of words on a single line will have a single quadrilateral. But if the text
 is not contiguous or spans multiple lines, then multiple quadrilaterals are required.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.TextPosition -->
  <!-- start class com.qoppa.pdf.TextPositionWithContext -->
  <class name="TextPositionWithContext" extends="com.qoppa.pdf.TextPosition"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TextPositionWithContext" type="int, java.lang.String, java.lang.String, java.lang.String, java.awt.Shape, java.util.List&lt;java.awt.geom.Point2D[]&gt;, double, java.awt.geom.AffineTransform"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getBeforeText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAfterText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <field name="m_BeforeText" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="m_AfterText" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class represents one result from a text search in a document.  The class contains information about the
 text that was searched for and found, including its location and shape on the page and some text before and 
 after the string that was searched for that can be used for display purposes.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.TextPositionWithContext -->
  <!-- start interface com.qoppa.pdf.TextSelection -->
  <interface name="TextSelection"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getViewSelectionShape()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns the entire shape that encloses all different word groups in this selection.  The shape's
 coordinate system is in 'display' coordinates: The origin of the coordinates are page.getCropBox().getX() and
 page.getCropBox().getY().
 
 @return A Shape, possibly composed of a number of subshapes, that holds all the selection area.
 
 @deprecated replaced by <code>getViewSelectionShape()</code>.]]>
      </doc>
    </method>
    <method name="getPDFSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the entire shape that encloses all different word groups in this selection.  The shape's
 coordinate system is in MediaBox coordinates.
 
 @return A Shape, possibly composed of a number of subshapes, that holds all the selection area.]]>
      </doc>
    </method>
    <method name="getViewSelectionShape" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the entire shape that encloses all different word groups in this selection.  The shape's
 coordinate system is in 'display' coordinates: The origin of the coordinates are page.getCropBox().getX() and
 page.getCropBox().getY().
 
 @return A Shape, possibly composed of a number of subshapes, that holds all the selection area.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a string containing all the selected text.
 
 @return A string containing all the selected text.]]>
      </doc>
    </method>
    <method name="getQuadrilaterals" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="replaced by lEsS_tHaNcode>getPDFQuadrilaterals()lEsS_tHaN/code>.">
      <doc>
      <![CDATA[Returns a list of quadrilaterals for the text selection areas.  The coordinates of the
 quadrilaterals is in MediaBox space.
 
 @return A vector of Point2D arrays, each array containing 4 points.  The points in each
 array can be connected by lines in the array order to form the quadrilateral enclosing each
 selection area.
 
 @deprecated replaced by <code>getPDFQuadrilaterals()</code>.]]>
      </doc>
    </method>
    <method name="getPDFQuadrilaterals" return="java.util.List&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of quadrilaterals for the text selection areas.  The coordinates of the
 quadrilaterals is in MediaBox space.
 
 @return A vector of Point2D arrays, each array containing 4 points.  The points in each
 array can be connected by lines in the array order to form the quadrilateral enclosing each
 selection area.]]>
      </doc>
    </method>
    <method name="getViewQuadrilaterals" return="java.util.List&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of quadrilaterals for the text selection areas.  The coordinates of the
 quadrilaterals is in display space.
 
 @return A vector of Point2D arrays, each array containing 4 points.  The points in each
 array can be connected by lines in the array order to form the quadrilateral enclosing each
 selection area.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface that describes selected text.  The interface provides methods to get a Shape object
 and a quadrilateral that encloses the text selection on the page as well as a method to retrieve
 the selected text as a string.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.TextSelection -->
  <!-- start class com.qoppa.pdf.TextToPDFSettings -->
  <class name="TextToPDFSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TextToPDFSettings"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a default TextToPDFSettings object.]]>
      </doc>
    </constructor>
    <method name="getPageWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page width value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setPageWidth"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageWidth" type="double"/>
      <doc>
      <![CDATA[Sets the page width for the PDF document, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="getPageHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page height value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setPageHeight"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageHeight" type="double"/>
      <doc>
      <![CDATA[Sets the page height for the PDF file, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="getMarginTop" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the top margin value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setMarginTop"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marginTop" type="double"/>
      <doc>
      <![CDATA[Sets the top margin for the PDF file, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="getMarginBottom" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the bottom margin value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setMarginBottom"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marginBottom" type="double"/>
      <doc>
      <![CDATA[Sets the bottom margin for the PDF file, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="getMarginLeft" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the left margin value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setMarginLeft"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marginLeft" type="double"/>
      <doc>
      <![CDATA[Sets the left margin for the PDF file, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="getMarginRight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the right margin value to use when converting text to PDF, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="setMarginRight"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="marginRight" type="double"/>
      <doc>
      <![CDATA[Sets the right margin for the PDF file, units are in points at 72 DPI.]]>
      </doc>
    </method>
    <method name="isUseBackground" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the value of use background tag.]]>
      </doc>
    </method>
    <method name="setUseBackground"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="useBackground" type="boolean"/>
      <doc>
      <![CDATA[Sets the use background tag for the PDF file.]]>
      </doc>
    </method>
    <method name="getBgndFile" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the background file.]]>
      </doc>
    </method>
    <method name="setBgndFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bgndFile" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the background file for the PDF file.]]>
      </doc>
    </method>
    <method name="getFont" return="java.awt.Font"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the font to use when converting text to PDF.]]>
      </doc>
    </method>
    <method name="setFont"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="font" type="java.awt.Font"/>
      <doc>
      <![CDATA[Sets the font for the PDF file.]]>
      </doc>
    </method>
    <method name="getPageBreakChar" return="java.lang.Character"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page break character to use when converting text to PDF. The page break character is used as a delimiter for a page break in the PDF file.]]>
      </doc>
    </method>
    <method name="setPageBreakChar"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageBreakChar" type="java.lang.Character"/>
      <doc>
      <![CDATA[Sets the page break character in the text file.]]>
      </doc>
    </method>
    <method name="setCharset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charsetName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the character set used when reading the input text file.  The character set defaults to UTF-8 but can be
 overridden by the calling application to set it to any other character set.
 
 @param charsetName The name of the character set used to read the text content.]]>
      </doc>
    </method>
    <method name="getCharset" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the character set that will be used when reading the text input.
 
 @return Character set of the input text.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The TextToPDFSettings class manages the settings when converting the text file to PDF document.
 All units in this class are in points, at 72 DPI.  i.e. setting a page height of 792 means setting
 a page height of 11 inches.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.TextToPDFSettings -->
  <!-- start class com.qoppa.pdf.TIFFOptions -->
  <class name="TIFFOptions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TIFFOptions" type="int, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFFOptions constructor that allows setting of DPI and compression format.
 
 @param dpi Dots per inch at which to render the image, 72 is the native PDF resolution and is equivalent to 100% scale..
 @param compression The type of TIFF compression to use.  This value needs to be one of
 these predefined values:<br><br>
 TIFFOptions.TIFF_DEFLATE - Deflate lossless compression (Zip-in-TIFF)<br>
 TIFFOptions.TIFF_CCITT_RLE - CCITT Modified Huffman RLE<br>
 TIFFOptions.TIFF_CCITT_T4 - CCITT Group 3 fax encoding<br>
 TIFFOptions.TIFF_CCITT_T6 - CCITT Group 4 fax encoding<br>
 TIFFOptions.TIFF_JPEG - JPEG-in-TIFF compression.<br>
 TIFFOptions.TIFF_LZW - LZW Compression<br>
 TIFFOptions.TIFF_PACKBITS - Byte-oriented run-length encoding "PackBits" compression.<br>
 TIFFOptions.TIFF_ZLIB - ZLib Compression.<br>
 TIFFOptions.TIFF_NO_COMPRESSION - No compression.<br>]]>
      </doc>
    </constructor>
    <method name="getDPI" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the DPI setting for this TIFFOptions.
 
 @return The current DPI setting.]]>
      </doc>
    </method>
    <method name="getCompression" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the current compression setting fo this TIFFOptions.
 
 @return The current compression setting.]]>
      </doc>
    </method>
    <method name="getByteOrder" return="java.nio.ByteOrder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the byte order to use when saving a TIFF file.
 
 @return The byte order]]>
      </doc>
    </method>
    <method name="setByteOrder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="byteOrder" type="java.nio.ByteOrder"/>
      <doc>
      <![CDATA[Sets the byte order to use when saving a TIFF file.
 
 @param byteOrder The byte order to use, this can be either ByteOrder.BIG_ENDIAN or
 BYTEOrder.LITTLE_ENDIAN.]]>
      </doc>
    </method>
    <method name="setRowsPerStrip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rowsPerStrip" type="int"/>
      <doc>
      <![CDATA[Sets the number of rows per strip to use when writing the TIFF file.  When this value is
 set, the TIFF file will be a multi-strip file using this value for the number of rows per
 strip.
 @param rowsPerStrip  The number of rows per strip in the output file.  Use -1 to output the
 file as a single strip file.]]>
      </doc>
    </method>
    <method name="getRowsPerStrip" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of rows per strip that will be used when saving a TIFF file.
 
 @return  Number of rows per strip.  If -1, this means that the TIFF file will be output
 as a single strip file.]]>
      </doc>
    </method>
    <method name="isGrayscale" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether the document should be converted to grayscale before
 writing the output TIFF file.
 
 @return The value of the grayscale flag.]]>
      </doc>
    </method>
    <method name="setGrayscale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="grayscale" type="boolean"/>
      <doc>
      <![CDATA[Sets the grayscale flag.  When this is true, the library will convert the image to grayscale before
 exporting.
 
 @param grayscale The new value of the grayscale flag.]]>
      </doc>
    </method>
    <method name="getDitherBW" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the dithering option when converting images to black and white.
 
 @return The current dithering option]]>
      </doc>
    </method>
    <method name="setDitherBW"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ditherBW" type="int"/>
      <doc>
      <![CDATA[Sets the dithering option when converting images to black and white.  The possible
 values for this are DITHER_NONE and DITHER_FLOYD_STEINBERG
 
 @param ditherBW The new value of the dithering option]]>
      </doc>
    </method>
    <method name="getJPEGQuality" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current setting for the JPEG quality.  this is only used when the TIFF
 file is saved using JPEG compression, with TIFF_JPEG.  The value is between 0 and 1.
 
 @return The current setting for the JPEG quality.]]>
      </doc>
    </method>
    <method name="setJPEGQuality"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegQuality" type="float"/>
      <doc>
      <![CDATA[Sets the JPEG quality to be used when saving a JPEG compressed TIFF file.  This value
 only gets used when the compression type is TIFF_JPEG.
 
 @param jpegQuality The JPEG quality setting, should be between 0 and 1.]]>
      </doc>
    </method>
    <field name="TIFF_DEFLATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF Deflate lossless compression (Zip-in-TIFF).]]>
      </doc>
    </field>
    <field name="TIFF_CCITT_RLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF CCITT Modified Huffman RLE compression.]]>
      </doc>
    </field>
    <field name="TIFF_CCITT_T4" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF CCITT Group 3 fax encoding.]]>
      </doc>
    </field>
    <field name="TIFF_FAX_GROUP3" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF CCITT Group 3 fax encoding.]]>
      </doc>
    </field>
    <field name="TIFF_CCITT_T6" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF CCITT Group 4 fax encoding.]]>
      </doc>
    </field>
    <field name="TIFF_FAX_GROUP4" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF CCITT Group 4 fax encoding.]]>
      </doc>
    </field>
    <field name="TIFF_JPEG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF JPEG-in-TIFF compression.]]>
      </doc>
    </field>
    <field name="TIFF_LZW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF LZW Compression]]>
      </doc>
    </field>
    <field name="TIFF_PACKBITS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF Byte-oriented run-length encoding "PackBits" compression.]]>
      </doc>
    </field>
    <field name="TIFF_ZLIB" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF ZLib Compression.]]>
      </doc>
    </field>
    <field name="TIFF_NO_COMPRESSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[TIFF with no compression.]]>
      </doc>
    </field>
    <field name="DITHER_NONE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Do not dither output B&amp;W images]]>
      </doc>
    </field>
    <field name="DITHER_FLOYD_STEINBERG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use Floyd-Steinberg dithering when converting to B&amp;W]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Options used for finer control of the TIFF output format.  This object is used when
 additional options, such as the byte order, need to be specified when saving PDF pages
 as TIFF images.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.TIFFOptions -->
  <!-- start class com.qoppa.pdf.TimestampServer -->
  <class name="TimestampServer" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TimestampServer" type="java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a time stamp server object.  This object is used when applying a digital signature
 to a PDF.  It contains information about the time stamp server and its login so that a
 time stamp can be requested and retrieved at the time of signing.  To use the server, it
 has to be set in the SigningInformation object by calling its setTimeStampServer() method.]]>
      </doc>
    </constructor>
    <constructor name="TimestampServer" type="java.lang.String, java.lang.String, java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a time stamp server object.  This object is used when applying a digital signature
 to a PDF.  It contains information about the time stamp server and its login so that a
 time stamp can be requested and retrieved at the time of signing.  To use the server, it
 has to be set in the SigningInformation object by calling its setTimeStampServer() method.]]>
      </doc>
    </constructor>
    <method name="getServerURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the time stamp server URL.
 
 @return The time stamp server URL.]]>
      </doc>
    </method>
    <method name="setServerURL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the time stamp server URL.
 @param url]]>
      </doc>
    </method>
    <method name="getUser" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the user name to log into the time stamp server.
 @return The user name to use to log into the time stamp server.]]>
      </doc>
    </method>
    <method name="setUserName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="username" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the user name;
 @param username]]>
      </doc>
    </method>
    <method name="getPWD" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the password that will be used to log into the time stamp server.
 
 @return The password to log into the time stamp server.]]>
      </doc>
    </method>
    <method name="setPassword"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the password.
 @param password]]>
      </doc>
    </method>
    <method name="getLengthEstimate" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a length estimate of the time stamp server signature.  This is set to a default of 5500 bytes, and
 is used for padding when creating the digital signature.  This can be overriden by the host application
 to use a smaller or larger number if the size of the time stamp signature from the time stamp server is well known.
 
 @return The current length estimate.]]>
      </doc>
    </method>
    <method name="setLengthEstimate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="estimate" type="int"/>
      <doc>
      <![CDATA[Set the length estimate for the size of the time stamp server signature.
 
 @param estimate The new estimate, to use when padding the digital signature.]]>
      </doc>
    </method>
    <method name="getDisplayName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the display name.  This is an alias to identify the server and may be null.
 @return The display name for the server]]>
      </doc>
    </method>
    <method name="setDisplayName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the display name.  This is an alias to identify the server.
 @param name]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the display name.]]>
      </doc>
    </method>
    <field name="DEFAULT_LENGTH_ESTIMATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The signature length is used for padding when creating the digital signature. Use a smaller or larger number if the size
  of the time stamp signature from the time stamp server is well known.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class is used to setup a timestamp server to use when applying a digital signature.  When a digital signature
 is applied to a PDF document, it is possible to get the signature time stamp from a certified timestamp server.  Use
 this class to pass the timestamp server information to the signing process inside SigningInformation.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.TimestampServer -->
</package>
<package name="com.qoppa.pdf.actions">
  <!-- start class com.qoppa.pdf.actions.Action -->
  <class name="Action" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Action"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type of action.
  
 @return The action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="getNextAction" return="com.qoppa.pdf.actions.Action"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the next Action to be performed after this Action.
 @return the next Action to be performed after this Action.]]>
      </doc>
    </method>
    <method name="setNextAction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="next" type="com.qoppa.pdf.actions.Action"/>
      <doc>
      <![CDATA[Sets the next Action to be performed after this Action.
 @param next the next Action to be performed after this Action.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract class to define a generic actions.  Actions objects
 are created when a user perform an 'action' on the currently
 viewed document.  Actions are typically links on the document
 to other pages, documents or URLs.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.Action -->
  <!-- start class com.qoppa.pdf.actions.GotoPageAction -->
  <class name="GotoPageAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GotoPageAction" type="com.qoppa.pdf.dom.IPDFPage"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a GotoPageAction with an <code>IPDFPage</code>. This
 constructor will create an action that will retain the current zoom
 level.
 
 @param pdfPage
            The <code>IPDFPage</code> to display]]>
      </doc>
    </constructor>
    <constructor name="GotoPageAction" type="com.qoppa.pdf.dom.IPDFPage, int, int, double"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a GotoPageAction with an <code>IPDFPage</code> and with values
 to set the x and y coordinates as well as the zoom scale.
 
 @param pdfPage
            The <code>IPDFPage</code> to display
 @param x
            The x coordinate
 @param y
            The y coordinate
 @param scale
            The zoom scale as a decimal. .5 will be 50% zoom, 5 will be
            500%. If set to -1 or 0 to retain the current value]]>
      </doc>
    </constructor>
    <constructor name="GotoPageAction" type="com.qoppa.pdf.dom.IPDFPage, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a GotoPageAction with an <code>IPDFPage</code> and a zoom
 mode. The zoom mode can be any of the predefined constants in this class
 that start with ZOOM_.
 
 
 @param pdfPage
            The <code>IPDFPage</code> to display
 @param zoomMode
            The new mode. If the mode is fit horizontal, or fit vertical,
            the viewer will also look at the TagetTop and TargetLeft
            values respectively.]]>
      </doc>
    </constructor>
    <constructor name="GotoPageAction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a GotoPageAction with a named destination.
 
 @param destinationName
            String representing the named destination from the document this action should use]]>
      </doc>
    </constructor>
    <method name="getPage" return="com.qoppa.pdf.dom.IPDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page for this GotoPageAction.
 
 @return the page for this GotoPageAction]]>
      </doc>
    </method>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="getX" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the x coordinate of the GotoPageAction. When a viewer goes to the
 target page, it will use this value for the view's x position.
 
 @return the x coordinate of the GotoPageAction]]>
      </doc>
    </method>
    <method name="setX"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <doc>
      <![CDATA[Sets the x coordinate of the GotoPageAction.  When a viewer goes to the target page,
 it will use this value for the view's x position.
 
 @param x coordinate of the GotoPageAction]]>
      </doc>
    </method>
    <method name="getY" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the y coordinate of the GotoPageAction. When a viewer goes to the
 target page, it will use this value for the view's y position.
 
 @return y coordinate of the GotoPageAction]]>
      </doc>
    </method>
    <method name="setY"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Sets the y coordinate of the GotoPageAction.  When a viewer goes to the target page,
 it will use this value for the view's y position.
 
 @param y coordinate of the GotoPageAction]]>
      </doc>
    </method>
    <method name="getScale" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scale, the value of the scale that the viewer will use after
 setting the page. If this value is 0, the viewer will not change the
 current scale.
 
 @return scale]]>
      </doc>
    </method>
    <method name="setScale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scale" type="double"/>
      <doc>
      <![CDATA[Sets the scale, 0..1. The viewer will set the scale of the view to this
 value after going to the page. Set to 0 to tell the viewer to retain the
 current zoom scale.
 
 @param scale]]>
      </doc>
    </method>
    <method name="getZoomMode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the zoom mode. The mode tells the viewer how to set the scale
 after setting the target page. There are values to tell the viewer to fit
 to width, fit to height, etc.
 
 @return The value of the zoom mode, one of the predefined constants in
         this class (ZOOM_*)]]>
      </doc>
    </method>
    <method name="setZoomMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zoomMode" type="int"/>
      <doc>
      <![CDATA[Sets the zoom mode. The mode tells the viewer how to set the scale after
 setting the target page. The calling application should use one of the
 predefined constants in this class: ZOOM_FIT, ZOOM_RETAIN, etc.
 
 @param zoomMode
            The new value of the zoom mode.]]>
      </doc>
    </method>
    <method name="setDestinationName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destinationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the destination name this action should go to
 
 @param destinationName name of the destination for this goto action]]>
      </doc>
    </method>
    <method name="getDestinationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the destination name associated with this action, or null if there isn't one.
    
 @return The name of the destination]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ZOOM_RETAIN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Do not adjust the zoom scale, retain the current value.]]>
      </doc>
    </field>
    <field name="ZOOM_FIT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Zoom the view to fit the target page both horizontally and vertically.]]>
      </doc>
    </field>
    <field name="ZOOM_FIT_HORIZONTAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Zoom the target page so that it will fit horizontally.]]>
      </doc>
    </field>
    <field name="ZOOM_FIT_VERTICAL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Zoom the target page so that it will fit vertically.]]>
      </doc>
    </field>
    <field name="ZOOM_EXPLICIT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Set the zoom scale explicitly.  When using this mode, the viewer will use
 the value in TargetZoom for the scale.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A GotoPageAction can be used to position the display a page in a PDF
 document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.GotoPageAction -->
  <!-- start class com.qoppa.pdf.actions.GotoPageRemoteAction -->
  <class name="GotoPageRemoteAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GotoPageRemoteAction" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a target document and a page number.
 
 @param fileName The name of the file to launch following the PDF file specification format. 
 <ul>
 <li>/r/pdfdocs/spec.pdf for OS path name r:\pdfdocs\spec.pdf</li>
 <li>//pdfdocs/spec.pdf  for OS path name \pdfdocs\spec.pdf</li>
 <li>any path not starting with / is a path relative to the PDF document file path</li>
 </ul>
 @param pageNumber The target page.]]>
      </doc>
    </constructor>
    <constructor name="GotoPageRemoteAction" type="java.lang.String, int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an action to go to another PDF document, with an option for the zoom mode.
 
 @param fileName The name of the file to launch following the PDF file specification format. 
 @param pageNumber The target page.
 @param zoomMode The zoom mode.  This can be one of the pre-defined values in the 
 GotoPageAction class: ZOOM_FIT, ZOOM_FIT_HORIZONTAL, ZOOM_FIT_VERTICAL, ZOOM_EXPLICIT, ZOOM_RETAIN]]>
      </doc>
    </constructor>
    <constructor name="GotoPageRemoteAction" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an action to go to another PDF document with a named destination.
 
 @param fileName The name of the file to launch following the PDF file specification format. 
 @param destinationName String representing the named destination from the document this action should use]]>
      </doc>
    </constructor>
    <method name="getPageNumber" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the target page number.
 
 @return The target page number.]]>
      </doc>
    </method>
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the target document file name in the PDF file specification format.
 
 @return The target document file name.]]>
      </doc>
    </method>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="getZoomMode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the zoom mode. The mode tells the viewer how to set the scale
 after setting the target page. There are values to tell the viewer to fit
 to width, fit to height, etc.
 
 @return The value of the zoom mode, one of the predefined constants in
         this class (ZOOM_*)]]>
      </doc>
    </method>
    <method name="setZoomMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zoomMode" type="int"/>
      <doc>
      <![CDATA[Sets the zoom mode. The mode tells the viewer how to set the scale after
 setting the target page. The calling application should use one of the
 predefined constants in this class: ZOOM_FIT, ZOOM_RETAIN, etc.
 
 @param zoomMode
            The new value of the zoom mode.]]>
      </doc>
    </method>
    <method name="setNewWindow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newWindow" type="boolean"/>
      <doc>
      <![CDATA[A flag specifying whether to open the destination document in a new
 window. If this flag is false, the destination document replaces the
 current document in the same window.
 
 @param newWindow]]>
      </doc>
    </method>
    <method name="isNewWindow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A flag specifying whether to open the destination document in a new
 window. If this flag is false, the destination document replaces the
 current document in the same window.
 
 @return The value of the new window flag.]]>
      </doc>
    </method>
    <method name="setDestinationName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="destinationName" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the destination name this action should go to
 
 @param destinationName name of the destination for this goto action]]>
      </doc>
    </method>
    <method name="getDestinationName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the destination name associated with this action, or null if there isn't one.
    
 @return The name of the destination]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that tells the viewer to go to a page in
 a different PDF document.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.GotoPageRemoteAction -->
  <!-- start class com.qoppa.pdf.actions.HideShowAction -->
  <class name="HideShowAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HideShowAction" type="java.util.Vector&lt;java.lang.String&gt;, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action to work on the given field names.
 
 @param fieldNames The names of the fields that this action works on.
 @param hide Boolean variable that determines whether to hide or show the fields.]]>
      </doc>
    </constructor>
    <method name="getFieldNames" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the field names that this action refers to.
 
 @return The field names.]]>
      </doc>
    </method>
    <method name="isHide" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a boolean flag indicating whether to hide the fields (true) or to show them (false).
 
 @return The flag.]]>
      </doc>
    </method>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getFields" return="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns fields associated with this action.
 @return The fields.]]>
      </doc>
    </method>
    <method name="setFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"/>
      <doc>
      <![CDATA[Set the fields for this action.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that tells the viewer to show or hide fields.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.HideShowAction -->
  <!-- start interface com.qoppa.pdf.actions.IEmailHandler -->
  <interface name="IEmailHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.actions.ISubmitActionEmailHandler"/>
    <method name="handleEmail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="to" type="java.lang.String"/>
      <param name="cc" type="java.lang.String"/>
      <param name="bcc" type="java.lang.String"/>
      <param name="subject" type="java.lang.String"/>
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Handle sending email.
 @param to The semicolon-delimited list of recipients for the message.
 @param cc The semicolon-delimited list of CC recipients for the message.
 @param bcc The semicolon-delimited list of BCC recipients for the message.
 @param subject The subject of the message.
 @param message The contents of the message.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface provides a way for host applications to implement custom functionality for sending an email.]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.actions.IEmailHandler -->
  <!-- start interface com.qoppa.pdf.actions.IPDFActionHandler -->
  <interface name="IPDFActionHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handleAction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="action" type="com.qoppa.pdf.actions.Action"/>
      <doc>
      <![CDATA[Handle an action
 @param action The action]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface to handle actions, when they are executed.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.actions.IPDFActionHandler -->
  <!-- start interface com.qoppa.pdf.actions.ISubmitActionEmailHandler -->
  <interface name="ISubmitActionEmailHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handleEmail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use handleEmail(String toAddress, File tmpFile, String extension, String subject, String body) instead.">
      <param name="toAddress" type="java.lang.String"/>
      <param name="tmpFile" type="java.io.File"/>
      <param name="extension" type="java.lang.String"/>
      <doc>
      <![CDATA[Handle sending an email when a SubmitFormAction Email Button is pressed
 
 @param toAddress the address to send the form information to
 @param tmpFile the file with the form information
 @param extension the extension of the file to be attached (PDF, XFDF, FDF, HTML)
 @deprecated Use handleEmail(String toAddress, File tmpFile, String extension, String subject, String body) instead.]]>
      </doc>
    </method>
    <method name="handleEmail"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toAddress" type="java.lang.String"/>
      <param name="tmpFile" type="java.io.File"/>
      <param name="extension" type="java.lang.String"/>
      <param name="subject" type="java.lang.String"/>
      <param name="body" type="java.lang.String"/>
      <doc>
      <![CDATA[Handle sending an email when a SubmitFormAction Email Button is pressed
 
 @param toAddress the address to send the form information to
 @param tmpFile the file with the form information
 @param extension the extension of the file to be attached (PDF, XFDF, FDF, HTML)
 @param subject the subject line of the email
 @param body the body of the email]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface provides a way for host applications to implement custom functionality for handling a SubmitFormAction with
 an email URL. Please see {@link com.qoppa.pdfViewer.PDFViewerBean#setSubmitActionEmailHandler(ISubmitActionEmailHandler) setSubmitActionEmailHandler()}
 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.actions.ISubmitActionEmailHandler -->
  <!-- start class com.qoppa.pdf.actions.JSAction -->
  <class name="JSAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JSAction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a JavaScript string.
 
 @param js The JavaScript]]>
      </doc>
    </constructor>
    <constructor name="JSAction" type="com.qoppa.pdf.loObjects.PDFReference"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a reference to a JavaScript stream.
 
 @param jsStream The JavaScript]]>
      </doc>
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="setJavaScriptString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newJS" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the JavaScript of this action with a string.
 
 @param newJS The new JavaScript string for this action.]]>
      </doc>
    </method>
    <method name="getJavascript" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the JavaScript of this action as a string.
 
 @return The JavaScript]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Compares this object to another for equality.  If the other object is also a JSAction object and
 the JavaScript code held by both objects is the same, this method will return true.
 
 @param obj The object to compare to.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that executes a JavaScript.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.JSAction -->
  <!-- start class com.qoppa.pdf.actions.LaunchAction -->
  <class name="LaunchAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LaunchAction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with the give file name.
 
 @param fileName The name of the file to launch following the PDF file specification format. 
 <ul>
 <li>/r/pdfdocs/spec.pdf for OS path name r:\pdfdocs\spec.pdf</li>
 <li>//pdfdocs/spec.pdf  for OS path name \pdfdocs\spec.pdf</li>
 <li>any path not starting with / is a path relative to the PDF document file path</li>
 </ul>]]>
      </doc>
    </constructor>
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the file to launch in the PDF file specification format.
 
 @return The name of the file to launch.]]>
      </doc>
    </method>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="setNewWindow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newWindow" type="boolean"/>
      <doc>
      <![CDATA[A flag specifying whether to open the destination document in a new
 window. If this flag is false, the destination document replaces the
 current document in the same window.
 
 @param newWindow The value of the new window flag.]]>
      </doc>
    </method>
    <method name="isNewWindow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A flag specifying whether to open the destination document in a new
 window. If this flag is false, the destination document replaces the
 current document in the same window.
 
 @return The value of the new window flag.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that tells the viewer to go to 'launch' a
 given file.  The default behaviour is to let the
 operating system launch the file.  This should behave
 in the same way as if double-clicking on the file.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.LaunchAction -->
  <!-- start class com.qoppa.pdf.actions.NamedAction -->
  <class name="NamedAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NamedAction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a NamedAction object with the named command.
 
 @param actionName The name of the action.]]>
      </doc>
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="getActionName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the named action.
 
 @return The name of the action.]]>
      </doc>
    </method>
    <method name="getNameList" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of the recognized action names.
 
 @return A vector containing the list of recognized names]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <field name="NAME_NEXT_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_PREV_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_FIRST_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_LAST_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_PRINT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_SAVE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_OPEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NAME_SAVE_AS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Actions in a document defined by "name".  Actions defined in this way are typically used to execute
 commands as if the user chose them from the application menu bar.  For instance, named commands can be
 "Print", "Save", "Open" and others.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.NamedAction -->
  <!-- start class com.qoppa.pdf.actions.NullAction -->
  <class name="NullAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="NullAction"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[NO-OP Action
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.NullAction -->
  <!-- start class com.qoppa.pdf.actions.ResetForm -->
  <class name="ResetForm" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ResetForm"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="getFields" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the List of field names.]]>
      </doc>
    </method>
    <method name="setFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Set the List of field names.]]>
      </doc>
    </method>
    <method name="getFlags" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flags.]]>
      </doc>
    </method>
    <method name="setFlags"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flags" type="int"/>
      <doc>
      <![CDATA[Sets the flags.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAG_INCLUDEEXCLUDE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that tells the viewer to reset the fields in the form (if there is any)
 to their default values.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.ResetForm -->
  <!-- start class com.qoppa.pdf.actions.SetOCGState -->
  <class name="SetOCGState" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SetOCGState" type="java.util.Vector&lt;com.qoppa.pdf.actions.SetOCGState.Sequence&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a SetOCGState action with a sequence list.
 @param seqList]]>
      </doc>
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description.]]>
      </doc>
    </method>
    <method name="getSequenceList" return="java.util.Vector&lt;com.qoppa.pdf.actions.SetOCGState.Sequence&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of sequences in this action
 
 @return The list of Sequence objects.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OCG_ACTION_ON" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OCG_ACTION_OFF" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="OCG_ACTION_TOGGLE" type="int"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that changes an optional content group's (layer) visibility.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.SetOCGState -->
  <!-- start class com.qoppa.pdf.actions.SetOCGState.Sequence -->
  <class name="SetOCGState.Sequence" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SetOCGState.Sequence" type="int, java.util.Vector&lt;com.qoppa.pdf.Layer&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a Sequence object with a list of layers and the action to do on those layers.
 
 @param ocgAction The action to be done on the layer. The possible values are the predefined constants SetOCGState.OCG_ACTION_OFF, SetOCGState.OCG_ACTION_ON or SetOCGState.OCG_ACTION_TOGGLE.
 @param layerList The list of layers.]]>
      </doc>
    </constructor>
    <method name="getOCGAction" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action that this sequence will do on the layers. The possible values are the predefined constants SetOCGState.OCG_ACTION_OFF, SetOCGState.OCG_ACTION_ON or SetOCGState.OCG_ACTION_TOGGLE.
 
 @return the action]]>
      </doc>
    </method>
    <method name="getLayerList" return="java.util.Vector&lt;com.qoppa.pdf.Layer&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of layers.
 
 @return List of layers.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Class that contains a list of layers and an action for that list.  A SetOCGState action can toggle the
 visibility of many layers at once.  The action takes a list of Sequence objects and each Sequence object
 takes a list of layers to turn off, turn on or toggle.
   
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.SetOCGState.Sequence -->
  <!-- start class com.qoppa.pdf.actions.SubmitFormAction -->
  <class name="SubmitFormAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SubmitFormAction" type="java.net.URL, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a destination for the form and flags controlling the action.
 
 @param submitURL The destination for submitting forms.
 @param flags Flags determining details of the action.]]>
      </doc>
    </constructor>
    <constructor name="SubmitFormAction" type="java.net.URL, int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a destination for the form and flags controlling the action.
 
 @param submitURL The destination for submitting forms.
 @param flags Flags determining details of the action.
 @param submitXML A boolean for the submit type being XML which isn't supported by the flags]]>
      </doc>
    </constructor>
    <constructor name="SubmitFormAction" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a destination for the form and flags controlling the action.
 This should only used when the string can not be used to make a valid URL.  This submit action
 will not be able to function until it is updated with a valid URL.
 
 @param submitMalformedURL The destination for submitting forms.
 @param flags Flags determining details of the action.]]>
      </doc>
    </constructor>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getSubmitURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the destination of the action.
 
 @return The destination for submitting a form.]]>
      </doc>
    </method>
    <method name="getFlags" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flags representing the details of the action.
 
 @return represents the details of the action]]>
      </doc>
    </method>
    <method name="getFields" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the List of field names that are associated with this submit action.  Depending on the flags,
 these can be the fields that are or aren't being sent.
 
 @return the fields associated with the action.]]>
      </doc>
    </method>
    <method name="setFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fields" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the List of field names associated with the action.
 
 @param fields associated with the submit action.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <method name="isSubmitAsXML" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return whether this SubmitFormAction is supposed to submit the fields in XML format.
 
 @return boolean determining if this SubmitFormAction is supposed to submit the fields in XML format.]]>
      </doc>
    </method>
    <method name="getSubmitURLString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return a string representing the attempted destination of the action.
 This is null unless a URL could not be formed from the string.
 
 @return String The destination for submitting forms.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that submits a form.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.SubmitFormAction -->
  <!-- start class com.qoppa.pdf.actions.TriggerActions -->
  <class name="TriggerActions" extends="java.util.Hashtable&lt;java.lang.String, java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TriggerActions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getMouseEnteredActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of action to be executed on Mouse Entered events as a Vector of Actions.]]>
      </doc>
    </method>
    <method name="getMouseExitedActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of action to be executed on Mouse Exited events as a Vector of Actions.]]>
      </doc>
    </method>
    <method name="getMouseDownActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of action to be executed on Mouse Down events as a Vector of Actions.]]>
      </doc>
    </method>
    <method name="getMouseUpActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of action to be executed on Mouse Up events as a Vector of Actions.]]>
      </doc>
    </method>
    <method name="getFormatActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be executed before a field is formatted
 @return Returns the list of actions that will be executed when formatting the field.]]>
      </doc>
    </method>
    <method name="getValidateActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when a field value is changed
 @return The list of actions that will be executed when validating the field.]]>
      </doc>
    </method>
    <method name="getCalculateActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when another field changes
 @return The list of actions that will be executed when calculating the value of the field.]]>
      </doc>
    </method>
    <method name="getKeystrokeActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed on a keystroke.
 @return The list of actions to be executed when there is a keystroke on the field.]]>
      </doc>
    </method>
    <method name="getBlurActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed on blur (focus lost).
 @return The list of actions when the field loses focus.]]>
      </doc>
    </method>
    <method name="getFocusActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when focus is gained.
 @return The list of actions when the field gains focus.]]>
      </doc>
    </method>
    <method name="getPageOpenActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the page is opened.
 @return The list of actions to be performed when the page is opened.]]>
      </doc>
    </method>
    <method name="getPageCloseActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the page is closed.
 @return The list of actions to be performed when the page is closed.]]>
      </doc>
    </method>
    <method name="getDocCloseActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the document is closed.
 @return The list of actions to be performed when the document is closed.]]>
      </doc>
    </method>
    <method name="getDocWillSaveActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the document will be saved.
 @return The list of actions to be performed when the document will be saved.]]>
      </doc>
    </method>
    <method name="getDocDidSaveActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the document has been saved.
 @return The list of actions to be performed when the document has been saved.]]>
      </doc>
    </method>
    <method name="getDocWillPrintActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the document will print.
 @return The list of actions to be performed when the document will print.]]>
      </doc>
    </method>
    <method name="getDocDidPrintActions" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the list of actions to be performed when the document has printed.
 @return The list of actions to be performed when the document has printed.]]>
      </doc>
    </method>
    <method name="remove" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <exception name="NullPointerException" type="java.lang.NullPointerException"/>
      <doc>
      <![CDATA[Overrides Hashtable method to keep track of modifications.]]>
      </doc>
    </method>
    <method name="put" return="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;"/>
      <exception name="NullPointerException" type="java.lang.NullPointerException"/>
      <doc>
      <![CDATA[Overrides Hashtable method to keep track of modifications.]]>
      </doc>
    </method>
    <method name="isModified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Check to see if the TriggerActions object has been modified
 
 @return boolean stating whether the TriggerActions have been modified]]>
      </doc>
    </method>
    <method name="setModified"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="modified" type="boolean"/>
      <doc>
      <![CDATA[Set the modified status of TriggerActions
 
 @param modified A boolean representing whether or not the TriggerActions are being marked as modified]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Overrides Hashtable method to keep track of modifications.]]>
      </doc>
    </method>
    <method name="putAll"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.util.Map&lt;? extends java.lang.String, ? extends java.util.Vector&lt;com.qoppa.pdf.actions.Action&gt;&gt;"/>
    </method>
    <field name="MOUSE_ENTERED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MOUSE_EXITED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MOUSE_UP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MOUSE_DOWN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="VALIDATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CALCULATE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FORMAT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="KEYSTROKE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLUR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FOCUS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_OPEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGE_CLOSE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOC_CLOSE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOC_WILL_SAVE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOC_DID_SAVE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOC_WILL_PRINT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DOC_DID_PRINT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Utility class to encapsulate a list of actions triggered by different mouse events such as mouse entered, mouse exited, mouse up and mouse down.
 TriggerActions.getMouseDownActions for instance returns a vector of all actions to be executed on a mouse down event.
 This utility class is used by the Annotation class for instance since an annotation may have trigger actions associated with it.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.TriggerActions -->
  <!-- start class com.qoppa.pdf.actions.URLAction -->
  <class name="URLAction" extends="com.qoppa.pdf.actions.Action"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="URLAction" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the action with a url.
 
 @param url The url to go to when activated.]]>
      </doc>
    </constructor>
    <method name="getURL" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL that this action refers to.
 
 @return The target url.]]>
      </doc>
    </method>
    <method name="getActionType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type.]]>
      </doc>
    </method>
    <method name="getActionTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the action type description]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the action.]]>
      </doc>
    </method>
    <field name="ACTION_TYPE_DESCRIPTION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Action that tells the viewer to open a web page
 from the URL.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.actions.URLAction -->
</package>
<package name="com.qoppa.pdf.annotations">
  <!-- start interface com.qoppa.pdf.annotations.Annotation -->
  <interface name="Annotation"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="paint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g" type="java.awt.Graphics"/>
      <doc>
      <![CDATA[Paints this annotation to a graphics object.
 
 @param g The graphics object to paint the annotation to.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g" type="java.awt.Graphics"/>
      <doc>
      <![CDATA[Prints this annotation to a graphics object.  This method will only print
 the annotation if the printable flag is set and the hidden flag is not set.
 
 @param g The graphics object to use when drawing.]]>
      </doc>
    </method>
    <method name="revalidate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Revalidates this annotation.]]>
      </doc>
    </method>
    <method name="getSubtype" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the annotation's subtype string.
 
 @return The annotation subtype.]]>
      </doc>
    </method>
    <method name="getBorderWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets this annotation's border width.
 
 @return The border width.]]>
      </doc>
    </method>
    <method name="setBorderWidth"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="borderWidth" type="double"/>
      <doc>
      <![CDATA[Sets the annotation's border width.
 
 @param borderWidth Width of the border.]]>
      </doc>
    </method>
    <method name="getBorderStyle" return="char"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets this annotation's border style.
 
 @return The border style.]]>
      </doc>
    </method>
    <method name="setBorderStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="borderStyle" type="char"/>
      <doc>
      <![CDATA[Sets the annotation's border style. 
 
 @param borderStyle Style of the border.]]>
      </doc>
    </method>
    <method name="getActions" return="java.util.List&lt;com.qoppa.pdf.actions.Action&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of actions to perform when this annotation is 'activated'
 
 @return List of actions.]]>
      </doc>
    </method>
    <method name="setActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="actions" type="java.util.List&lt;? extends com.qoppa.pdf.actions.Action&gt;"/>
      <doc>
      <![CDATA[Sets this annotation's actions. The list is copied to an internal list
 kept by the annotation, so any subsequent changes to the items in the
 list will not be reflected in the annotation.
 
 @param actions
            The list of actions.]]>
      </doc>
    </method>
    <method name="setComponentVisible"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[Sets the visibility of the component associated with this annotation on the screen. This method should be used
 when component visibility needs to be changed temporarily on the screen. To hide the annotation definitively,
 use the setHidden method that will set the hidden flag in the document.
 
 @param visible The new value of the components visibility.]]>
      </doc>
    </method>
    <method name="setFlags"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="flags" type="int"/>
      <doc>
      <![CDATA[Sets this annotation's flags: An annotation contains a set of flags
 that describe how the annotation is handled during display and printing.
 The flags are defined by a set of constants and are or'ed together to
 define multiple flags:<br><br>
 
     FLAGS_INVISIBLE - Do not display the annotation if it is not a standard annotation.<br>
     FLAGS_HIDDEN - Do not display or print the annotation.<br>
     FLAGS_PRINT - Print the annotation when sending the document to a printer.<br>
     FLAGS_NOZOOM - Do not scale the annotation when zooming in and out of the document.<br>
     FLAGS_NOROTATE - Do not rotate the annotation when rotating the document for display.<br>
     FLAGS_NOVIEW - Do display the annotation on screen.  Annotation may still print depending
     on the FLAGS_PRINT value.<br>
     FLAGS_READONLY - Display the annotation but do not respond to user clicks.<br>
     FLAGS_LOCKED - Do not allow the annotation to be deleted or its properties changed.<br>
     FLAGS_LOCKEDCONTENTS - Do not allow an annotation's contents to be changed.<br>
     
 @param flags The annotation's or'ed flags.]]>
      </doc>
    </method>
    <method name="getFlags" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this annotation's flags.  An annotation contains a set of flags
 that describe how the annotation is handled during display and printing.
 The flags are defined by a set of constants and are or'ed together to
 define multiple flags:<br><br>
 
     FLAGS_INVISIBLE - Do not display the annotation if it is not a standard annotation.<br>
     FLAGS_HIDDEN - Do not display or print the annotation.<br>
     FLAGS_PRINT - Print the annotation when sending the document to a printer.<br>
     FLAGS_NOZOOM - Do not scale the annotation when zooming in and out of the document.<br>
     FLAGS_NOROTATE - Do not rotate the annotation when rotating the document for display.<br>
     FLAGS_NOVIEW - Do display the annotation on screen.  Annotation may still print depending
     on the FLAGS_PRINT value.<br>
     FLAGS_READONLY - Display the annotation but do not respond to user clicks.<br>
     FLAGS_LOCKED - Do not allow the annotation to be deleted or its properties changed.
     FLAGS_LOCKEDCONTENTS - Do not allow an annotation's contents to be changed.<br>
     
 @return The annotation's flags]]>
      </doc>
    </method>
    <method name="isInvisible" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the INVISIBLE flag.
 
 @return Value of the INVISIBLE flag]]>
      </doc>
    </method>
    <method name="setInvisible"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="invisible" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the INVISIBLE flag.
 
 @param invisible The new value for the INVISIBLE flag.]]>
      </doc>
    </method>
    <method name="isHidden" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the HIDDEN flag.
 
 @return Value of the HIDDEN flag]]>
      </doc>
    </method>
    <method name="setHidden"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hidden" type="boolean"/>
      <doc>
      <![CDATA[Sets this Annotation's HIDDEN flag. A hidden annotation will not be displayed on the screen and will not print. 
 
 @param hidden The new value of the HIDDEN flag.]]>
      </doc>
    </method>
    <method name="isPrintable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the PRINTABLE flag.
 
 @return Value of the PRINTABLE flag]]>
      </doc>
    </method>
    <method name="setPrintable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printable" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the PRINTABLE flag.
 
 @param printable The new value for the PRINTABLE flag.]]>
      </doc>
    </method>
    <method name="isNoZoom" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the NOZOOM flag.
 
 @return Value of the NOZOOM flag]]>
      </doc>
    </method>
    <method name="setNoZoom"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noZoom" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the NOZOOM flag.
 
 @param noZoom The new value for the NOZOOM flag.]]>
      </doc>
    </method>
    <method name="isNoRotate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the NOROTATE flag.
 
 @return Value of the NOROTATE flag]]>
      </doc>
    </method>
    <method name="setNoRotate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noRotate" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the NOROTATE flag.
 
 @param noRotate The new value for the NOROTATE flag.]]>
      </doc>
    </method>
    <method name="isNoView" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the NOVIEW flag.
 
 @return Value of the NOVIEW flag]]>
      </doc>
    </method>
    <method name="setNoView"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noView" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the NOVIEW flag.
 
 @param noView The new value for the NOVIEW flag.]]>
      </doc>
    </method>
    <method name="isReadOnly" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the READONLY flag.
 
 @return Value of the READONLY flag]]>
      </doc>
    </method>
    <method name="setReadOnly"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readOnly" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the READONLY flag.
 
 @param readOnly The new value for the READONLY flag.]]>
      </doc>
    </method>
    <method name="isLocked" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the LOCKED flag.
 
 @return Value of the LOCKED flag]]>
      </doc>
    </method>
    <method name="setLocked"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="locked" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the LOCKED flag.
 
 @param locked The new value for the LOCKED flag.]]>
      </doc>
    </method>
    <method name="isLockedContents" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the LOCKEDCONTENTS flag.
 
 @return Value of the LOCKEDCONTENTS flag]]>
      </doc>
    </method>
    <method name="setLockedContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="locked" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the LOCKEDCONTENTS flag.
 
 @param locked The new value for the LOCKEDCONTENTS flag.]]>
      </doc>
    </method>
    <method name="getColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's color.
 @return The annotation's color.]]>
      </doc>
    </method>
    <method name="setColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the annotation's color. 
 
 @param c The new color.]]>
      </doc>
    </method>
    <method name="getAnnotationComponent" return="com.qoppa.pdf.annotations.AnnotationComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the component associated with this annotation on the screen.    
 @return The annotation's component.
 @since v2017R1]]>
      </doc>
    </method>
    <method name="getComponent" return="javax.swing.JComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the component associated with this annotation on the screen.  The JComponent
 returned is guaranteed to implement the AnnotationComponent interface.
 
 @return The annotation's component.]]>
      </doc>
    </method>
    <method name="setComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="component" type="javax.swing.JComponent"/>
      <doc>
      <![CDATA[Sets the component associated with this annotation on the screen.  
 
 @param component The annotation's component.]]>
      </doc>
    </method>
    <method name="getTriggerActions" return="com.qoppa.pdf.actions.TriggerActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of mouse related actions associated with this annotation.  This includes
 actions on mouse enter, exit, up and down.
 
 @return A TriggerActions object that contains lists of actions for the different mouse events]]>
      </doc>
    </method>
    <method name="setTriggerActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tActions" type="com.qoppa.pdf.actions.TriggerActions"/>
      <doc>
      <![CDATA[Sets the mouse trigger actions for this annotation.
 
 @param tActions A TriggerActions object containing list of actions for the different mouse events.]]>
      </doc>
    </method>
    <method name="shiftRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="deltaX" type="double"/>
      <param name="deltaY" type="double"/>
      <doc>
      <![CDATA[Shifts the annotation's rectangle in MediaBox coordinates.

 @param deltaX the shift in the x axis.
 @param deltaY the shift in the y axis.]]>
      </doc>
    </method>
    <method name="getRectangle" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the annotation's rectangle.  The annotation's rectangle is in MediaBox coordinates.

 @return The annotation's location on the page.]]>
      </doc>
    </method>
    <method name="setRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rectangle" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets the annotation's rectangle.  The annotation's rectangle is in MediaBox coordinates.
 
 @param rectangle The new location of the annotation on the page.]]>
      </doc>
    </method>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's contents.
 @return The annotation's contents.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's name.
 @return The annotation's name.]]>
      </doc>
    </method>
    <method name="setName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the annotation's name.
 
 @param name The new annotation's name.]]>
      </doc>
    </method>
    <method name="getOpacity" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's opacity.
 @return The new annotation's opacity.]]>
      </doc>
    </method>
    <method name="setOpacity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="opacity" type="float"/>
      <doc>
      <![CDATA[Sets the annotation's opacity.
 
 @param opacity The annotation's opacity.]]>
      </doc>
    </method>
    <method name="getModifiedDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date when the annotation was most recently modified.
 Milliseconds are always zero since the PDF date format doesn't support
 milliseconds.
 <p>
 <strong>Note:</strong> This method will return <code>null</code> if the
 annotation does not have a modified date.
 </p>
 
 @return The date when the annotation was most recently modified]]>
      </doc>
    </method>
    <method name="getCreator" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's creator.
 
 @return The annotation's creator.]]>
      </doc>
    </method>
    <method name="setModifiedDate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="modifiedDate" type="java.util.Date"/>
      <doc>
      <![CDATA[Sets the annotation's modified date. Note that milliseconds, if any, will
 be zeroed out as PDF date format doesn't support milliseconds.
 
 @param modifiedDate
            The annotation's modified date]]>
      </doc>
    </method>
    <method name="setCreator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="creator" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the creator.
 
 @param creator The annotation's creator.]]>
      </doc>
    </method>
    <method name="setLayer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="layer" type="com.qoppa.pdf.Layer"/>
      <doc>
      <![CDATA[Sets the layer that this annotation belongs to.
 
 @param layer The parent layer.]]>
      </doc>
    </method>
    <method name="setSubject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the subject field for this annotation.
 
 @param subject The subject]]>
      </doc>
    </method>
    <method name="getSubject" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the subject field for this annotation.
 
 @return subject]]>
      </doc>
    </method>
    <method name="getReviewHistory" return="java.util.Vector&lt;com.qoppa.pdf.annotations.AnnotationReviewStatus&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of {@link AnnotationReviewStatus} objects. The list will be empty if the Annotation has no review history.
 
 @return The review history.]]>
      </doc>
    </method>
    <method name="getCheckmarkStatus" return="com.qoppa.pdf.annotations.AnnotationCheckmarkStatus"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's marked status. Returns null if the Annotation has not been marked.
 
 @return The checkmark status.]]>
      </doc>
    </method>
    <method name="getPageIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the index of the page in which this annotation is located.
 
 @return The index to the parent page, -1 if none.]]>
      </doc>
    </method>
    <method name="getIRTAnnotation" return="com.qoppa.pdf.annotations.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The annotation that this annotation is "in reply to." The relationship
 between the two annotations is either a group or a reply.
 
 @return The annotation that this annotation is "in reply to." The
         relationship between the two annotations is either a group or a
         reply.
 @see Annotation#isIRTGroup()]]>
      </doc>
    </method>
    <method name="isIRTGroup" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the annotation is grouped with the IRT annotation. False
 if the annotation is considered a reply to the IRT annotation.
 
 @return true if the annotation is grouped with the IRT annotation. False
         if the annotation is considered a reply to the IRT annotation.]]>
      </doc>
    </method>
    <field name="BORDERSTYLE_SOLID" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BORDERSTYLE_DASHED" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BORDERSTYLE_BEVELED" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BORDERSTYLE_INSETS" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BORDERSTYLE_UNDERLINE" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BORDERSTYLE_CLOUD" type="char"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_INVISIBLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_HIDDEN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_PRINTABLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_NOZOOM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_NOROTATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_NOVIEW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_READONLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_LOCKED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FLAGS_LOCKEDCONTENTS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Interface used to represent a PDF annotation.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Annotation -->
  <!-- start interface com.qoppa.pdf.annotations.AnnotationCheckmarkStatus -->
  <interface name="AnnotationCheckmarkStatus"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getReviewer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the reviewer.
 
 @return The reviewer.]]>
      </doc>
    </method>
    <method name="isMarked" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Annotation is marked, returns false if unmarked.
 
 @return The marked status.]]>
      </doc>
    </method>
    <method name="getDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date this status was set.
 
 @return The status change date.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface used to represent the checkmark status of an {@link Annotation}.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.AnnotationCheckmarkStatus -->
  <!-- start interface com.qoppa.pdf.annotations.AnnotationComponent -->
  <interface name="AnnotationComponent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getAnnotation" return="com.qoppa.pdf.annotations.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation for this AnnotationComponent.
 
 @return The annotation for this AnnotationComponent]]>
      </doc>
    </method>
    <method name="getPage" return="com.qoppa.pdf.dom.IPDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page in which this annotation component is located.
 
 @return The parent page, null if none]]>
      </doc>
    </method>
    <method name="getPageIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the index of the page in which this annotation component is
 located.
 
 @return The index to the parent page, -1 if none.]]>
      </doc>
    </method>
    <method name="showPopup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Shows the popup window for the annotation that contains the text
 contents. There are some annotations that do not have a popup, such as
 the FreeText (Typewriter) annotations.
 
 @param x
            The x location, relative to the annotation component, at which
            to display the popup.
 @param y
            The y location, relative to the annotation component, at which
            to display the popup.]]>
      </doc>
    </method>
    <method name="annotUpdated"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If an annotation's properties are modified, call this method to alert the
 AnnotationComponent that it needs to update itself based on the
 annotation's properties.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface is implemented by components that display annotations.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.AnnotationComponent -->
  <!-- start interface com.qoppa.pdf.annotations.AnnotationReviewStatus -->
  <interface name="AnnotationReviewStatus"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date this status was set.
 
 @return The status change date.]]>
      </doc>
    </method>
    <method name="getReviewer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the reviewer.
 
 @return The reviewer.]]>
      </doc>
    </method>
    <method name="getStatus" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the review status, will be one of the defined review states.
 
 @return The review status.]]>
      </doc>
    </method>
    <field name="STATE_NONE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATE_ACCEPTED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATE_REJECTED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATE_CANCELLED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STATE_COMPLETED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Interface used to represent the review status of an {@link Annotation}.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.AnnotationReviewStatus -->
  <!-- start class com.qoppa.pdf.annotations.AnnotationSettings -->
  <class name="AnnotationSettings" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AnnotationSettings"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setSelectionStroke"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stroke" type="java.awt.BasicStroke"/>
      <doc>
      <![CDATA[Sets the annotation selection stroke.
 
 @param stroke]]>
      </doc>
    </method>
    <method name="getSelectionStroke" return="java.awt.BasicStroke"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation selection stroke.
 
 @return the annotation selection stroke]]>
      </doc>
    </method>
    <method name="setSelectionColor"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="color" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the annotation selection color.
 
 @param color]]>
      </doc>
    </method>
    <method name="getSelectionColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation selection color.
 
 @return the annotation selection color]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class contains general <code>Annotation</code> display settings, 
 such as annotation selection stroke and selection color. 
 For jPDFNotes, jPDFEditor: To set default settings for annotation tools 
 such as default color, look under com.qoppa.pdfNotes.settings
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.annotations.AnnotationSettings -->
  <!-- start interface com.qoppa.pdf.annotations.Callout -->
  <interface name="Callout"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.FreeText"/>
    <method name="setInnerRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="innerRect" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets the innerRect relative to the annotation rectangle.
 
 @param innerRect Where innerRect.x is the distance between the inner rectangle and left of the annotation rectangle, 
 innerRect.y is the distance between the inner rectangle and the top of the annotation rectangle,
 innerRect.width is the width of the inner rectangle, and innerRect.height is the height of innerRectangle]]>
      </doc>
    </method>
    <method name="getInnerRect" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the innerRect]]>
      </doc>
    </method>
    <method name="setArrow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="arrow" type="double[]"/>
      <doc>
      <![CDATA[Sets the coordinates of the callout arrow
 
 @param arrow An array of either 4 or 6 components.  
 If 6 components, the components represent: {startingPointX, startingPointY, kneePointX, kneePointY, endPointX, endPointY}
 If 4 components, the components represent: {startingPointX, startingPointY, endPointX, endPointY}]]>
      </doc>
    </method>
    <method name="getArrow" return="double[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an array representing the coordinates of the arrow]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Callout annotation in a PDF document.
 Callout annotations are displayed as a small text box with an arrow.
 
 No annotation will be drawn if setRectangle method is not called.
 Similarly, no inner rectangle will be drawn if setInnerRect is not called,
 and no arrow will be drawn if setArrow() is not called.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Callout -->
  <!-- start interface com.qoppa.pdf.annotations.Caret -->
  <interface name="Caret"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns intent for this annotation.]]>
      </doc>
    </method>
    <method name="setWidth"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="width" type="int"/>
    </method>
    <method name="getWidth" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Caret annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Caret -->
  <!-- start interface com.qoppa.pdf.annotations.Circle -->
  <interface name="Circle"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Circle annotation in a PDF document.
 Circle annotations are displayed as a circle on a page
 and can be double-clicked to display their textual content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Circle -->
  <!-- start interface com.qoppa.pdf.annotations.FileAttachment -->
  <interface name="FileAttachment"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="getIconName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the icon for this annotation.
 
 @return Name of the icon.]]>
      </doc>
    </method>
    <method name="getPopupText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text that is displayed when the mouse hovers over the annotation.
 
 @return Popup text.]]>
      </doc>
    </method>
    <method name="setPopupText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="popupText" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the text that is displayed when the mouse hovers over the annotation.
 @param popupText The new text string.]]>
      </doc>
    </method>
    <method name="setIconName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iconName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the icon name used when displaying this annotation.
 
 @param iconName The name of the icon to use when displaying the annotation in its
 un-opened mode.  Please use one of the constants defined in this class (ICON_XXXX)
 to set the name of the icon.]]>
      </doc>
    </method>
    <method name="setFileContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileContents" type="byte[]"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the file contents for the file attachment.
 
 @param fileContents The new file contents.]]>
      </doc>
    </method>
    <method name="setFileContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the file contents for the file attachment from a file.
 
 @param file The file to read the contents from.
 
 @throws PDFException
 @throws IOException]]>
      </doc>
    </method>
    <method name="setFileContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the file contents for this file attachment from an input stream.  The method will
 read the entire input stream to set the file contents.]]>
      </doc>
    </method>
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the file.
 @return The name of the file attached.]]>
      </doc>
    </method>
    <method name="setFileName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of the attached file.
 @param fileName The name of the file.]]>
      </doc>
    </method>
    <method name="getFileSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the length of the file, in bytes.
 @return The file length.]]>
      </doc>
    </method>
    <method name="getDeflatedContents" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the file contents in deflated format]]>
      </doc>
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the file contents as an input stream.]]>
      </doc>
    </method>
    <method name="getCheckSum" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the CRC checksum for the file contents.
 
 @return CRC]]>
      </doc>
    </method>
    <method name="writeContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write the contents of the file attachment to an output stream]]>
      </doc>
    </method>
    <method name="saveFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outFile" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves the content of the file to a file.
 @param outFile the file to save to.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <field name="ICON_GRAPH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ICON_PAPERCLIP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ICON_PUSHPIN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ICON_TAG" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ICON_DEFAULT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Interface representing a File Attachment annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.FileAttachment -->
  <!-- start interface com.qoppa.pdf.annotations.FreeText -->
  <interface name="FreeText"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the plain text contents for this annotation.
 @return the plain text contents for this annotation.
 
 @see #getRichContents()]]>
      </doc>
    </method>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the string contents for this annotation.
 @param contents the new string contents.]]>
      </doc>
    </method>
    <method name="getRichContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rich contents for this annotation.
 @return the rich contents for this annotation.]]>
      </doc>
    </method>
    <method name="setRichContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="richContents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the rich contents for this annotation.
 @param richContents the new rich contents.]]>
      </doc>
    </method>
    <method name="getAlignHorizontal" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the horizontal alignment of the text.
 @return the horizontal alignment of the text.]]>
      </doc>
    </method>
    <method name="setAlignHorizontal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="align" type="int"/>
      <doc>
      <![CDATA[Sets the horizontal alignment of the text.  Should be one of {@link #ALIGN_LEFT}, {@link #ALIGN_CENTER}, {@link #ALIGN_RIGHT}.
 @param align the new horizontal alignment of the text.]]>
      </doc>
    </method>
    <method name="getAlignVertical" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the vertical alignment of the text.
 @return the vertical alignment of the text.]]>
      </doc>
    </method>
    <method name="setAlignVertical"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="align" type="int"/>
      <doc>
      <![CDATA[Sets the vertical alignment of the text. Should be one of {@link #ALIGN_TOP}, {@link #ALIGN_MIDDLE}, {@link #ALIGN_BOTTOM}.
 @param align the new vertical alignment of the text.]]>
      </doc>
    </method>
    <method name="setPDFFont"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fontName" type="java.lang.String"/>
      <param name="fontSize" type="float"/>
      <doc>
      <![CDATA[Sets the name and point size of the PDF Font.
 <p>
 The supported fonts are Helvetica, Helvetica-Bold, Helvetica-Oblique,
 Helvetica-BoldOblique, Courier, Courier-Bold, Courier-Oblique,
 Courier-BoldOblique, Times-Roman, Times-Bold, Times-Italic,
 Times-BoldItalic.
 <p>
 The font will default to Helvetica.
 
 @param fontName The font name.
 @param fontSize The Font size.]]>
      </doc>
    </method>
    <method name="getFontName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the name of the PDF font.
 
 @return The name of the PDF font.]]>
      </doc>
    </method>
    <method name="getFontSize" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the point size of the PDF font.
 
 @return The point size of the PDF font.]]>
      </doc>
    </method>
    <method name="getTextColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the color of the text.
 @return the color of the text.]]>
      </doc>
    </method>
    <method name="setTextColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textColor" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the color of the text.
 @param textColor the new color of the text.]]>
      </doc>
    </method>
    <method name="getBorderColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the border color.
 @return the border color.]]>
      </doc>
    </method>
    <method name="setBorderColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="borderColor" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the border color.
 @param borderColor the new border color.]]>
      </doc>
    </method>
    <method name="getBorderRect" return="java.awt.geom.Rectangle2D.Double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the border rectangle.
 @return the border rectangle.]]>
      </doc>
    </method>
    <method name="setBorderRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="borderRect" type="java.awt.geom.Rectangle2D.Double"/>
      <doc>
      <![CDATA[Sets the border rectangle.
 @param borderRect the new border rectangle.]]>
      </doc>
    </method>
    <method name="getRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rotation.
 @return the rotation.]]>
      </doc>
    </method>
    <method name="setRotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rotation" type="int"/>
      <doc>
      <![CDATA[Sets the rotation.
 @param rotation the new rotation.]]>
      </doc>
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the intent of the FreeText Annotation
 
 @return intent]]>
      </doc>
    </method>
    <method name="setIntent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="intent" type="java.lang.String"/>
      <doc>
      <![CDATA[Set the description of the intent of the FreeText Annotation. Valid
 value is FreeText.INTENT_TYPE_WRITER, which means that the annotation
 is intended to function as a click-to-type or typewriter object.
 
 @param intent the intent to set]]>
      </doc>
    </method>
    <method name="isIntentTypeWriter" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this is a typewriter annotation.
 @return true if this is a typewriter annotation.]]>
      </doc>
    </method>
    <method name="getStroke" return="java.awt.BasicStroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the stroke to use when drawing the annotation.
 
 @return The stroke used in drawing.]]>
      </doc>
    </method>
    <method name="setStroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stroke" type="java.awt.BasicStroke"/>
      <doc>
      <![CDATA[Sets the stroke used when drawing the annotation.
 
 @param stroke The stroke to use when drawing the annotation.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <field name="ALIGN_LEFT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Horizontal text alignment = left side of annotation.]]>
      </doc>
    </field>
    <field name="ALIGN_CENTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Horizontal text alignment = center of annotation.]]>
      </doc>
    </field>
    <field name="ALIGN_RIGHT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Horizontal text alignment = right side of annotation.]]>
      </doc>
    </field>
    <field name="ALIGN_TOP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vertical text alignment = top of annotation.]]>
      </doc>
    </field>
    <field name="ALIGN_MIDDLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vertical text alignment = middle of annotation.]]>
      </doc>
    </field>
    <field name="ALIGN_BOTTOM" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Vertical text alignment = bottom of annotation.]]>
      </doc>
    </field>
    <field name="INTENT_TYPE_WRITER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Typewriter intent.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Interface representing a FreeText annotation in a PDF document.
 This annotation is called Text Box in the user interface.
 FreeText annotations are displayed as a text box on the PDF
 document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.FreeText -->
  <!-- start interface com.qoppa.pdf.annotations.GestureList -->
  <interface name="GestureList"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addGesture" return="com.qoppa.pdf.annotations.Vertices"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Add a new gesture to the gesture list.  The method returns a Vertices object which can
 then be used to add all the individual vertices to the gesture.
 
 @return A Vertices object to add vertex points to the gesture.]]>
      </doc>
    </method>
    <method name="getGesture" return="com.qoppa.pdf.annotations.Vertices"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the Vertices object that containts the vertices for one gesture.  The Vertices object
 is mutable, so any changes to add or remove vertices will be reflected in the gesture.
 
 @param index The index of the gesture to get.
 @return a Vertices object that represents the gesture.]]>
      </doc>
    </method>
    <method name="getGestureCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of gestures in this list.
 
 @return The number of gestures in the list.]]>
      </doc>
    </method>
    <method name="removeGesture"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes a gesture from the list.
 
 @param index The index of the gesture that needs to be removed.]]>
      </doc>
    </method>
    <method name="isModified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Flag indicating whether the gesture list has been modified.
 
 @return true if the list has been modified, false otherwise.]]>
      </doc>
    </method>
    <method name="setModified"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mod" type="boolean"/>
      <doc>
      <![CDATA[Explicitly flag this gesture list as modified.
 
 @param mod New value of the modified flag.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class represents a list of gestures in an Ink (Pencil) annotation.  A gesture is composed
 of a list of connected vertices.  A gesture list can have any number of gestures to represent a complete
 pencil annotation.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.GestureList -->
  <!-- start interface com.qoppa.pdf.annotations.IAnnotationFactory -->
  <interface name="IAnnotationFactory"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createFreeText" return="com.qoppa.pdf.annotations.FreeText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a free text annotation with the given content.
 Use setBounds() to set the position and size of the text box
 on the page.
 
 @param contents The text content.]]>
      </doc>
    </method>
    <method name="createCircle" return="com.qoppa.pdf.annotations.Circle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a circle annotation with the given content.  Call Circle.setBounds()
 to set the bounds of the circle, the circle will be drawn so that it fits entirely
 within the bounds..
 
 @param contents The text contents to display when the annotation is opened.]]>
      </doc>
    </method>
    <method name="createCallout" return="com.qoppa.pdf.annotations.Callout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a callout annotation with the given content.
 Use setBounds() to set the position and size of the text box
 on the page.
 
 @param contents The text content.]]>
      </doc>
    </method>
    <method name="createFileAttachment" return="com.qoppa.pdf.annotations.FileAttachment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileContents" type="byte[]"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="modDate" type="java.util.Date"/>
      <param name="creationDate" type="java.util.Date"/>
      <param name="popupText" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Constructs a file attachment annotation.  The entire contents of the file are passed
 in the fileContents array.
 
 @param fileContents The binary contents of the file.
 @param fileName The name of the file.
 @param modDate The modification date of the file.
 @param creationDate The creation date of the file.
 @param popupText The popup text to display when the mouse hovers over the annotation.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createFileAttachment" return="com.qoppa.pdf.annotations.FileAttachment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attachFile" type="java.io.File"/>
      <param name="popupText" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Convenience constructor to create a file attachment from a file system file.
 
 @param attachFile The file to attach.  The constructor reads the contents of the file into memory.
 @param popupText The popup text to display when the mouse hovers over the annotation.
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createFileAttachment" return="com.qoppa.pdf.annotations.FileAttachment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="modDate" type="java.util.Date"/>
      <param name="creationDate" type="java.util.Date"/>
      <param name="popupText" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a file attachment from an input stream.  The method will read the contents of the input stream
 at the time that it is called.
 
 @param inStream The input stream to get the file attachment contents from.
 @param fileName The name of the file.
 @param modDate The modification date of the file.
 @param creationDate The creation date of the file.
 @param popupText The popup text to display when the mouse hovers over the annotation.
 @return A FileAttachment object
 
 @throws IOException Thrown when there is any errors reading the input stream.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createFileAttachment" return="com.qoppa.pdf.annotations.FileAttachment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an empty file attachment object.
 
 @return A new, empty, file attachment object.]]>
      </doc>
    </method>
    <method name="createInk" return="com.qoppa.pdf.annotations.Ink"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="polyLines" type="java.util.List&lt;com.qoppa.pdf.annotations.Vertices&gt;"/>
      <doc>
      <![CDATA[Constructs an Ink annotation.
 
 @param contents The text contents to display when the annotation is opened.
 @param polyLines a List of polylines, each polyline represented by a Vertices object.  Each object in the list
 is a gesture of the Ink annotation.]]>
      </doc>
    </method>
    <method name="createLine" return="com.qoppa.pdf.annotations.Line"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="x1" type="double"/>
      <param name="y1" type="double"/>
      <param name="x2" type="double"/>
      <param name="y2" type="double"/>
      <doc>
      <![CDATA[Constructs a line annotation with the given content.
 
 @param contents The text contents to display when the annotation is opened.
 @param x1 The x coordinate of the origin of the line.
 @param y1 The y coordinate of the origin of the line.
 @param x2 The x coordinate of the end point of the line.
 @param y2 The y coordinate of the end point of the line.]]>
      </doc>
    </method>
    <method name="createLine" return="com.qoppa.pdf.annotations.Line"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="x1" type="double"/>
      <param name="y1" type="double"/>
      <param name="x2" type="double"/>
      <param name="y2" type="double"/>
      <param name="intent" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a line annotation with the given content and intent.
 
 @param contents The text contents to display when the annotation is opened.
 @param x1 The x coordinate of the origin of the line.
 @param y1 The y coordinate of the origin of the line.
 @param x2 The x coordinate of the end point of the line.
 @param y2 The y coordinate of the end point of the line.
 @param intent The line's "intent", this can be one of the following values: null, Line.LINE_ARROW, Line.LINE_DIMENSION.]]>
      </doc>
    </method>
    <method name="createLink" return="com.qoppa.pdf.annotations.Link"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a Link annotation.]]>
      </doc>
    </method>
    <method name="createTextMarkup" return="com.qoppa.pdf.annotations.TextMarkup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="quadList" type="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"/>
      <param name="subtype" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a new TextMarkup annotation. There are 4 types of markup annotations: text highlight, text underline, 
 text cross-out or strike-out and text squiggly underline.
 
 @param contents The text contents to display when the annotation is opened.
 @param quadList The new list of quadrilaterals that compose this annotation.  Each item in the list should
 be an array of 4 Point.Double objects.
 @param subtype type of the markup annotations. Possible values are Highlight, Underline, StrikeOut, Squiggly.]]>
      </doc>
    </method>
    <method name="createPolygon" return="com.qoppa.pdf.annotations.Polygon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="vertices" type="com.qoppa.pdf.annotations.Vertices"/>
      <param name="intent" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a polygon annotation.
 
 @param contents The text contents to display when the annotation is opened.
 @param vertices The list of points that defines the polygon.]]>
      </doc>
    </method>
    <method name="createPolyline" return="com.qoppa.pdf.annotations.Polyline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="vertices" type="com.qoppa.pdf.annotations.Vertices"/>
      <param name="intent" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a polyline annotation.
 
 @param contents The text contents to display when the annotation is opened.
 @param vertices The list of points that defines the polyline.]]>
      </doc>
    </method>
    <method name="createPopup" return="com.qoppa.pdf.annotations.Popup"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initalOpen" type="boolean"/>
      <doc>
      <![CDATA[Constructs a popup annotation with the given open flag.
 
 @param initalOpen Flag indicating whether this annotation should be displayed
 open initially.]]>
      </doc>
    </method>
    <method name="createRubberStamp" return="com.qoppa.pdf.annotations.RubberStamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.Image"/>
      <param name="imageCompression" type="com.qoppa.pdf.settings.ImageCompression"/>
      <doc>
      <![CDATA[Constructs a rubber stamp annotation with the given image.
 
 @param image a java image
 @param imageCompression the compression settings]]>
      </doc>
    </method>
    <method name="createRubberStamp" return="com.qoppa.pdf.annotations.RubberStamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <param name="color" type="java.awt.Color"/>
      <doc>
      <![CDATA[Construct a rubber stamp annotation with custom text and custom color.
 
 @param text the text to display in the stamp
 @param color the color of the text]]>
      </doc>
    </method>
    <method name="createRubberStamp" return="com.qoppa.pdf.annotations.RubberStamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <param name="color" type="java.awt.Color"/>
      <param name="scale" type="double"/>
      <doc>
      <![CDATA[Construct a text rubber stamp annotation.  The scale of the stamp can be
 set with this method using the third argument.
 
 @param text the text to display in the stamp
 @param color the color of the text
 @param scale percentage scale for the stamp, 100 = 1:1.]]>
      </doc>
    </method>
    <method name="createRubberStamp" return="com.qoppa.pdf.annotations.RubberStamp"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="com.qoppa.pdf.dom.IPDFPage"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Constructs a rubber stamp annotation with the content stream from a PDF page.
 
 @param page The PDF page used to create the rubber stamp annotation.
 @return The new rubber stamp annotation.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createSound" return="com.qoppa.pdf.annotations.Sound"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="javax.sound.sampled.AudioFormat"/>
      <param name="content" type="byte[]"/>
      <doc>
      <![CDATA[Constructs a sound annotation from an AudioFormat object and an
 array of bytes containing the audio content.
 
 @param format The format of the audio.
 @param content The audio content.]]>
      </doc>
    </method>
    <method name="createSound" return="com.qoppa.pdf.annotations.Sound"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audioStream" type="javax.sound.sampled.AudioInputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Constructs a sound annotation from an AudioInputStream object.
 
 @param audioStream The audio stream
 @return The new sound annotation
 @throws IOException]]>
      </doc>
    </method>
    <method name="createSquare" return="com.qoppa.pdf.annotations.Square"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a square annotation with the given content.  Call Square.setBounds()
 to set the bounds of the square.
 
 @param contents The text contents to display when the annotation is opened.]]>
      </doc>
    </method>
    <method name="createText" return="com.qoppa.pdf.annotations.Text"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="initialOpen" type="boolean"/>
      <param name="iconName" type="java.lang.String"/>
      <doc>
      <![CDATA[Construct a Text annotation.
 
 @param contents The textual content.
 @param initialOpen Flag indicating whether this annotation should be displayed
 open initially.
 @param iconName The name of the icon to use when displaying the annotation in its
 un-opened mode.  Please use one of the constants defined in this class (ICON_XXXX)
 to set the name of the icon.]]>
      </doc>
    </method>
    <method name="createRedaction" return="com.qoppa.pdf.annotations.Redaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a Redaction annotation with the given content.  Call Redaction.setBounds()
 to set the bounds of the redaction.
 
 @param contents The text contents to display when the annotation is opened.]]>
      </doc>
    </method>
    <method name="createRedaction" return="com.qoppa.pdf.annotations.Redaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <param name="quadList" type="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"/>
      <doc>
      <![CDATA[Constructs a new Redaction annotation defined by the quadList rather than it's rectangular bounds,
 unless the quadList is empty.
 
 @param contents The text contents to display when the annotation is opened.
 @param quadList The new list of quadrilaterals that compose this annotation.  Each item in the list should
 be an array of 4 Point.Double objects.]]>
      </doc>
    </method>
    <method name="createTypeWriter" return="com.qoppa.pdf.annotations.FreeText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs a typewriter annotation with the given content.
 Use setBounds() to set the position and size of the text box
 on the page.
 
 @param contents The text content.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface provides methods to create annotations in a document.  The methods will create annotation objects that can then
 be added to pages in the PDF document.  To get a reference to this interface, call IPDFDocument.getAnnotationFactory().
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.IAnnotationFactory -->
  <!-- start interface com.qoppa.pdf.annotations.IAnnotationManager -->
  <interface name="IAnnotationManager"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addComponentToSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ac" type="com.qoppa.pdf.annotations.AnnotationComponent"/>
      <doc>
      <![CDATA[Adds an annotation component to the list of selected annotations.
 
 @param ac
            The annotation component to add]]>
      </doc>
    </method>
    <method name="addSelectionListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="com.qoppa.pdf.annotations.IAnnotSelectionListener"/>
      <doc>
      <![CDATA[Adds a selection listener to the manager. Selection listeners will be
 notified when any annotations are selected or deselected.
 
 @param listener
            The new listener]]>
      </doc>
    </method>
    <method name="clearSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears the current annotation component selection. Any annotation
 components that are selected will be deselected.]]>
      </doc>
    </method>
    <method name="deselectAnnotationComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ac" type="com.qoppa.pdf.annotations.AnnotationComponent"/>
      <doc>
      <![CDATA[Deselects an annotation.
 
 @param ac
            The annotation to deselect]]>
      </doc>
    </method>
    <method name="getSelectedComponents" return="java.util.Vector&lt;com.qoppa.pdf.annotations.AnnotationComponent&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of annotation components that are selected. The list
 contains objects that implement AnnotationComponent.
 
 @return a list of selected annotation components]]>
      </doc>
    </method>
    <method name="isSelected" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ac" type="com.qoppa.pdf.annotations.AnnotationComponent"/>
      <doc>
      <![CDATA[Returns a flag that indicates whether the selection component is
 selected.
 
 @param ac
            The annotation component
 @return true if selected, false otherwise]]>
      </doc>
    </method>
    <method name="selectAnnotationComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ac" type="com.qoppa.pdf.annotations.AnnotationComponent"/>
      <doc>
      <![CDATA[Selects an annotation.
 
 @param ac
            The annotation to select]]>
      </doc>
    </method>
    <method name="selectAnnotationComponents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="acs" type="com.qoppa.pdf.annotations.AnnotationComponent[]"/>
      <doc>
      <![CDATA[Selects a list of annotations.
 
 @param acs
            The annotations to select]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface manages the selection cycle for AnnotationComponents.
 AnnotationComponents can be programmatically selected and deselected with
 {@link #selectAnnotationComponent(AnnotationComponent)} and {@link #deselectAnnotationComponent(AnnotationComponent)}.
 <p>
 Listeners can register with this class with {@link #addSelectionListener(IAnnotSelectionListener)}.
 <p>
 An implementation of this class can be obtained from the main class in your library, i.e. PDFViewerBean or PDFDocument. 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.IAnnotationManager -->
  <!-- start interface com.qoppa.pdf.annotations.IAnnotSelectionListener -->
  <interface name="IAnnotSelectionListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="componentSelected"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="comp" type="com.qoppa.pdf.annotations.AnnotationComponent"/>
      <doc>
      <![CDATA[This notification is sent when an AnnotationComponent is selected
 
 @param comp
            The AnnotationComponent which has been selected]]>
      </doc>
    </method>
    <method name="componentsDeselected"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotComps" type="java.util.Vector&lt;com.qoppa.pdf.annotations.AnnotationComponent&gt;"/>
      <doc>
      <![CDATA[This notification is sent when one or more AnnotationComponents are
 deselected (or deleted)
 
 @param annotComps
            a list of the deselected AnnotationComponents]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The interface for AnnotationComponent selection events.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.IAnnotSelectionListener -->
  <!-- start interface com.qoppa.pdf.annotations.IFlattener -->
  <interface name="IFlattener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="flattenWidget"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="w" type="com.qoppa.pdf.annotations.Widget"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </method>
    <doc>
    <![CDATA[This interface is used internally to let annotations know how to flatten themselves into the document content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.IFlattener -->
  <!-- start interface com.qoppa.pdf.annotations.Ink -->
  <interface name="Ink"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="revalidateRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getGestures" return="com.qoppa.pdf.annotations.GestureList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of gestures that represent the Ink annotation.  Each object in the list
 is of type Vertices and contains a list of vertices to draw the gesture.
 
 @return A list of Vertices objects.]]>
      </doc>
    </method>
    <method name="addGesture" return="com.qoppa.pdf.annotations.Vertices"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new line and returns it to the calling function.
 The returned Vertices object is the actual Vertices object by the annotation,
 so any changes to the vertices will be reflected in the annotation.
 
 @return A Vertices object that holds the vertices in the gesture.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing an Ink annotation in a PDF document.
 Ink annotation consist of a list of x,y coordinates that
 are connected using lines when displayed.  The annotation
 can be double-clicked to display its content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Ink -->
  <!-- start interface com.qoppa.pdf.annotations.Line -->
  <interface name="Line"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="getX1" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the x coordinate of the origin of this line.
 
 @return The origin's x coordinate.]]>
      </doc>
    </method>
    <method name="getX2" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the x coordinate of the endpoint of this line.
 
 @return The endpoint's x coordinate.]]>
      </doc>
    </method>
    <method name="getY1" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the y coordinate of the origin of this line.
 
 @return The origin's y coordinate.]]>
      </doc>
    </method>
    <method name="getY2" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the y coordinate of the endpoint of this line.
 
 @return The endpoint's y coordinate.]]>
      </doc>
    </method>
    <method name="setX1"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x1" type="double"/>
    </method>
    <method name="setX2"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x2" type="double"/>
    </method>
    <method name="setY1"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="y1" type="double"/>
    </method>
    <method name="setY2"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="y2" type="double"/>
    </method>
    <method name="getLineEndStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLineStartStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setLineEndStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="style" type="java.lang.String"/>
    </method>
    <method name="setLineStartStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="style" type="java.lang.String"/>
    </method>
    <method name="revalidateRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the intent of the Line Annotation
 
 @return intent]]>
      </doc>
    </method>
    <method name="isIntentArrow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isIntentDimension" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <field name="LINE_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LINE_DIMENSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Interface representing a Line annotation in a PDF document.
 Line annotations are displayed as a line and can be double-clicked
 to display its content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Line -->
  <!-- start interface com.qoppa.pdf.annotations.Link -->
  <interface name="Link"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <doc>
    <![CDATA[Interface representing a Link annotation in a PDF document.
 Link annotations are displayed as a rectangle on the PDF
 document and when clicked, may jump to a different location
 on the document or open a URL in a browser window.  Use setBounds()
 to set the location and size of the link on the page.  Use
 setActions() to set the actions when the link is activated.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Link -->
  <!-- start interface com.qoppa.pdf.annotations.Polygon -->
  <interface name="Polygon"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="revalidateRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBorderEffect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="intensity" type="int"/>
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the intent of the Line Annotation
 
 @return intent]]>
      </doc>
    </method>
    <method name="isIntentDimension" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this polygon's intent is a dimension (measuring tool)
 
 @return Flag indicating whether the intent of this polygon is for dimension (measurement tool)]]>
      </doc>
    </method>
    <method name="getVertices" return="com.qoppa.pdf.annotations.Vertices"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an object that manages the vertices in the polygon.  The object has methods to get the vertices, 
 and to add and remove vertices.
  
 @return The vertices in the polygon.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <field name="POLYGON_DIMENSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Class representing a Polygon annotation in a PDF document.
 Polygon annotations are displayed as a series of connected vertices and can be
 double-clicked to display its note.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Polygon -->
  <!-- start interface com.qoppa.pdf.annotations.Polyline -->
  <interface name="Polyline"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="revalidateRectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the description of the intent of the Line Annotation
 
 @return intent]]>
      </doc>
    </method>
    <method name="isIntentDimension" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this polygon's intent is a dimension (measuring tool)
 @return Flag indicating whether the intent of this polygon is for dimension (measurement tool)]]>
      </doc>
    </method>
    <method name="getVertices" return="com.qoppa.pdf.annotations.Vertices"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an object that manages the vertices in the polygon.  The object has methods to get the vertices, 
 and to add and remove vertices.
  
 @return The vertices in the polygon.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <method name="setLineEndStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="style" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the polyline end style.
 <br><br>Possible values are:
 <ul>
 <li><code>ShapeAnnotation.LE_NONE_STR</code> <li><code>
 ShapeAnnotation.LE_SQUARE_STR</code> <li><code>
 ShapeAnnotation.LE_CIRCLE_STR</code> <li><code>
 ShapeAnnotation.LE_DIAMOND_STR</code> <li><code>
 ShapeAnnotation.LE_OPENARROW_STR</code> <li><code>
 ShapeAnnotation.LE_CLOSEDARROW_STR</code> <li><code>
 ShapeAnnotation.LE_BUTT_STR</code> <li><code>
 ShapeAnnotation.LE_REVERSE_OPEN_ARROW_STR</code> <li><code>
 ShapeAnnotation.LE_REVERSE_CLOSED_ARROW_STR</code> <li><code>
 ShapeAnnotation.LE_SLASH_STR</code>
 </ul>
 @param style The polyline end style]]>
      </doc>
    </method>
    <method name="setLineStartStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="style" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the polyline start style.
 <br><br>Possible values are:
 <ul>
 <li><code>ShapeAnnotation.LE_NONE_STR</code> <li><code>
 ShapeAnnotation.LE_SQUARE_STR</code> <li><code>
 ShapeAnnotation.LE_CIRCLE_STR</code> <li><code>
 ShapeAnnotation.LE_DIAMOND_STR</code> <li><code>
 ShapeAnnotation.LE_OPENARROW_STR</code> <li><code>
 ShapeAnnotation.LE_CLOSEDARROW_STR</code> <li><code>
 ShapeAnnotation.LE_BUTT_STR</code> <li><code>
 ShapeAnnotation.LE_REVERSE_OPEN_ARROW_STR</code> <li><code>
 ShapeAnnotation.LE_REVERSE_CLOSED_ARROW_STR</code> <li><code>
 ShapeAnnotation.LE_SLASH_STR</code>
 </ul>
 @param style The polyline start style]]>
      </doc>
    </method>
    <method name="getLineEndStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the polyline end style.
 
 @return The polyline end style]]>
      </doc>
    </method>
    <method name="getLineStartStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the polyline start style.
 
 @return The polyline start style]]>
      </doc>
    </method>
    <field name="POLYLINE_DIMENSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Class representing a Polyline annotation in a PDF document.
 Polyline annotations are displayed as a series of connected vertices and can be
 double-clicked to display its note.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Polyline -->
  <!-- start interface com.qoppa.pdf.annotations.Popup -->
  <interface name="Popup"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setOpen"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="open" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Interface representing a Popup annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Popup -->
  <!-- start interface com.qoppa.pdf.annotations.Redaction -->
  <interface name="Redaction"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="getQuadList" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of the quadrilaterals that compose this annotation if any.  Each item in the list
 is an array of 4 Point.Double objects that contains the 4 points needed for that quadrilateral. May return 
 an empty list, in which case the annotation is defined by it's rectangular bounds.
 
 @return List of quadrilaterals.]]>
      </doc>
    </method>
    <method name="setOverlayText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="text" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the text string specifying the overlay text that should be drawn over the
 redacted region.
 
 @param text The overlay text string.]]>
      </doc>
    </method>
    <method name="getOverlayText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text string specifying the overlay text that should be drawn
 over the redacted region.
 
 @return The overlay text string.]]>
      </doc>
    </method>
    <method name="setOverlayFont"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fontName" type="java.lang.String"/>
      <param name="fontSize" type="float"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the name and point size of the overlay text Font.
 <p>
 The supported fonts are Helvetica, Helvetica-Bold, Helvetica-Oblique,
 Helvetica-BoldOblique, Courier, Courier-Bold, Courier-Oblique,
 Courier-BoldOblique, Times-Roman, Times-Bold, Times-Italic,
 Times-BoldItalic.
 <p>
 The default font is Helvetica. The default font size is 12. 
 If the size is 0, then the text will be resized to fill the redacted region.
 
 @param fontName The font name.
 @param fontSize The Font size.]]>
      </doc>
    </method>
    <method name="getOverlayFontName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the overlay text font name.
 
 @return The overlay text font name.]]>
      </doc>
    </method>
    <method name="getOverlayFontSize" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the overlay text font size.
 
 @return The overlay text font size.]]>
      </doc>
    </method>
    <method name="setOverlayTextColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="color" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the overlay text color. The default color is white.
 
 @param color
            The overlay text color.]]>
      </doc>
    </method>
    <method name="getOverlayTextColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the overlay text color
 
 @return The overlay text color.]]>
      </doc>
    </method>
    <method name="setOverlayTextAlignment"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alignment" type="int"/>
      <doc>
      <![CDATA[Sets the overlay text alignment.
 
 The possible values are OVERLAY_ALIGNMENT_LEFT, OVERLAY_ALIGNMENT_CENTER,
 OVERLAY_ALIGNMENT_RIGHT.
 
 The default alignment is OVERLAY_ALIGNMENT_LEFT;
 
 @param alignment
            The overlay text alignment.]]>
      </doc>
    </method>
    <method name="getOverlayTextAlignment" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the overlay text alignment.
 
 The possible values are OVERLAY_ALIGNMENT_LEFT, OVERLAY_ALIGNMENT_CENTER,
 OVERLAY_ALIGNMENT_RIGHT.
 
 @return The overlay text alignment.]]>
      </doc>
    </method>
    <method name="setOverlayTextRepeats"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="repeats" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to determine if the overlay text should repeat. If true,
 then the text will be repeated to fill the redacted region. The default
 value is false.
 
 @param repeats
            The overlay text repeats flag.]]>
      </doc>
    </method>
    <method name="isOverlayTextRepeats" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flag to determine if the overlay text should repeat.
 
 @return The overlay text repeats flag.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <method name="setFillColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the annotation's fill color. 
 
 @param c The new color.]]>
      </doc>
    </method>
    <method name="getFillColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's fill color.
 
 @return The annotation's fill color.]]>
      </doc>
    </method>
    <field name="OVERLAY_ALIGNMENT_LEFT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates left alignment for overlay text; used by {@link #setOverlayTextAlignment}.]]>
      </doc>
    </field>
    <field name="OVERLAY_ALIGNMENT_CENTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates center alignment for overlay text; used by {@link #setOverlayTextAlignment}.]]>
      </doc>
    </field>
    <field name="OVERLAY_ALIGNMENT_RIGHT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates right alignment for overlay text; used by {@link #setOverlayTextAlignment}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Interface representing a Redaction annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Redaction -->
  <!-- start interface com.qoppa.pdf.annotations.RichMedia -->
  <interface name="RichMedia"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <doc>
    <![CDATA[Interface representing a RichMedia annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.RichMedia -->
  <!-- start interface com.qoppa.pdf.annotations.RubberStamp -->
  <interface name="RubberStamp"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="setRunInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="runInfo" type="java.util.Hashtable&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Sets information used for stamps that have dynamic fields, such as the current date and time.
 
 @param runInfo]]>
      </doc>
    </method>
    <method name="createImage" return="java.awt.Image"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="scale" type="double"/>
      <param name="maxWidth" type="int"/>
      <param name="maxHeight" type="int"/>
      <doc>
      <![CDATA[Return an image for the current stamp. If width and height are set to 0, the default stamp width and height are used.
 If width and height are > 0, the image is scaled to fit in (maxWidth, maxWeight) while preserving the original ratio width / height
 
 @param maxWidth Maximum width desired for the image.  If the natural image is larger than this, the image will be rescaled.
 @param maxHeight Maximum height desired for the image.  If the natural image is larger than this, the image will be rescaled.
 @return An Image object of the current stamp.]]>
      </doc>
    </method>
    <method name="getIconName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[If this stamp was created using a default predefined stamp, returns the stamp's predefined name.
 
 @return The stamp's predefined name.]]>
      </doc>
    </method>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the annotation's text content.
 @return The annotation's content.]]>
      </doc>
    </method>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the annotation's text content.
 
 @param contents The new content.]]>
      </doc>
    </method>
    <method name="setIconName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iconName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of the predefined stamp from the PDF format specs. The
 allowed values are "Approved", "Experimental", "NotApproved", "AsIs", "Expired",
 "NotForPublicRelease", "Confidential", "Final", "Sold", "Departmental", "ForComment",
 "TopSecret", "Draft", "ForPublicRelease".
 
 Note that some PDF viewers may use icon names different from the ones
 defined in the PDF Spec, for example "SBApproved".
 
 @param iconName
            The predefined name.]]>
      </doc>
    </method>
    <method name="getRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the rotation.
 
 @return rotation.]]>
      </doc>
    </method>
    <method name="setRotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rotation" type="int"/>
      <doc>
      <![CDATA[Sets the rotation of the stamp on the page in degrees such as 45, 90, etc...
 
 * @param rotation the rotation in degrees.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <method name="getJustification" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the text justification property for this stamp.  The possible return values
 are {@link #JUSTIFY_LEFT}, {@link #JUSTIFY_CENTER}, and {@link #JUSTIFY_RIGHT}
 
 @return The value of the text justification property.]]>
      </doc>
    </method>
    <method name="setJustification"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="justify" type="int"/>
      <doc>
      <![CDATA[Sets the text justification for this stamp.  The possible values are
 {@link #JUSTIFY_LEFT}, {@link #JUSTIFY_CENTER}, and {@link #JUSTIFY_RIGHT}
 
 @param justify The new value for the text justification]]>
      </doc>
    </method>
    <method name="isDropShadow" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the stamp is set to have a shadow behind the text.]]>
      </doc>
    </method>
    <method name="setDropShadow"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dropShadow" type="boolean"/>
      <doc>
      <![CDATA[Set whether a text stamp should have a shadow behind the text.
 
 @param dropShadow whether or not to have a shadow behind text]]>
      </doc>
    </method>
    <method name="isShowBorder" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the stamp is set to have a border around the text.]]>
      </doc>
    </method>
    <method name="setShowBorder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="showBorder" type="boolean"/>
      <doc>
      <![CDATA[Set whether a text stamp should have a border around the text.
 
 @param showBorder whether or not to have a border around text]]>
      </doc>
    </method>
    <method name="getTextStyle" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the style of the text of this stamp, i.e. {@link Font.BOLD} or {@link Font.ITALIC}
 
 @return textstyle]]>
      </doc>
    </method>
    <method name="setTextStyle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textStyle" type="int"/>
      <doc>
      <![CDATA[Sets the text style of the stamp.  Possible values are {@link Font.BOLD} or {@link Font.ITALIC}
 or ({@link Font.BOLD} | {@link Font.ITALIC}) for example.
 
 @param textStyle the style of the text]]>
      </doc>
    </method>
    <method name="getFontSize" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the font size of the text of the stamp.
 
 @return textSize.]]>
      </doc>
    </method>
    <method name="setFontSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textSize" type="float"/>
      <doc>
      <![CDATA[Sets the font size of the text of the stamp
 
 * @param textSize size for the text of the stamp]]>
      </doc>
    </method>
    <field name="ASIS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="APPROVED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONFIDENTIAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DEPARTMENTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="DRAFT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXPERIMENTAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EXPIRED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FINAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FORCOMMENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="FORPUBLICRELEASE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NOTAPPROVED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NOTFORPUBLICRELEASE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SOLD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TOPSECRET" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="INFORMATIONONLY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PRELIMINARYRESULTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="VOID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMPLETED" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="JUSTIFY_LEFT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Justification of stamp text - left]]>
      </doc>
    </field>
    <field name="JUSTIFY_CENTER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Justification of stamp text - center]]>
      </doc>
    </field>
    <field name="JUSTIFY_RIGHT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Justification of stamp text - right]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Interface representing a Rubber Stamp annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.RubberStamp -->
  <!-- start interface com.qoppa.pdf.annotations.ShapeAnnotation -->
  <interface name="ShapeAnnotation"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="getStroke" return="java.awt.BasicStroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the stroke to use when drawing the ink annotation.
 
 @return The stroke used in drawing.]]>
      </doc>
    </method>
    <method name="setStroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stroke" type="java.awt.BasicStroke"/>
      <doc>
      <![CDATA[Sets the stroke used when drawing the ink annotation.
 
 @param stroke The stroke to use when drawing the annotation.]]>
      </doc>
    </method>
    <method name="getInternalColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the fill color for this annotation.
 
 @return The fill color, null if it is not defined.]]>
      </doc>
    </method>
    <method name="setInternalColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="internalColor" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the fill color for this annotation.  If the value is set to 
 null, the square will leave it's interior transparent.
 
 @param internalColor The color to use to fill the rectangle.  If null, the interior will be transparent.]]>
      </doc>
    </method>
    <field name="LE_NONE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_SQUARE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_CIRCLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_DIAMOND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_OPENARROW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_CLOSEDARROW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_BUTT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_REVERSE_OPEN_ARROW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_REVERSE_CLOSED_ARROW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_SLASH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_NONE_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_SQUARE_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_CIRCLE_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_DIAMOND_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_OPENARROW_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_CLOSEDARROW_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_BUTT_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_REVERSE_OPEN_ARROW_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_REVERSE_CLOSED_ARROW_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="LE_SLASH_STR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Abstract class to be extended by annotations that contain
 textual content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.ShapeAnnotation -->
  <!-- start interface com.qoppa.pdf.annotations.Sound -->
  <interface name="Sound"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="setAudio"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audioStream" type="javax.sound.sampled.AudioInputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the audio content of this Sound annotation.
 
 @param audioStream Stream containing the sound content.
 @throws IOException]]>
      </doc>
    </method>
    <method name="getContent" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this sound annotation's sound content as a byte array.  The format
 of the content is specified by the AudioFormat object returned by getAudioFormat()
 
 @return A byte array containing the sound content.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getFormat" return="javax.sound.sampled.AudioFormat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this annotation's audio format.
 
 @return The audio format.]]>
      </doc>
    </method>
    <method name="setContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="byte[]"/>
      <param name="format" type="javax.sound.sampled.AudioFormat"/>
      <doc>
      <![CDATA[Sets the audio content of this Sound annotation.
 
 @param content A byte array containing the sound content
 @param format  the audio format
 @throws IOException]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Sound annotation in a PDF document.
 Sound annotations are displayed using a speaker icon and can
 be double-clicked to play back the audio content.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Sound -->
  <!-- start interface com.qoppa.pdf.annotations.Square -->
  <interface name="Square"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.ShapeAnnotation"/>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Square annotation in a PDF document.
 Square annotations are displayed as a square box on the PDF
 document and can be double-clicked to display their contents.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Square -->
  <!-- start interface com.qoppa.pdf.annotations.Text -->
  <interface name="Text"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="getIconName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the icon for this annotation.  Should be one of:
 <ul>
 <li>Text.ICON_NOTE - This is the default
 <li>Text.ICON_COMMENT
 <li>Text.ICON_KEY
 <li>Text.ICON_HELP
 <li>Text.ICON_NEWPARAGRAPH
 <li>Text.ICON_PARAGRAPH
 <li>Text.ICON_INSERT
 <li>Text.ICON_CHECK
 <li>Text.ICON_CHECKMARK
 <li>Text.ICON_CIRCLE
 <li>Text.ICON_CROSS
 <li>Text.ICON_CROSSHAIRS
 <li>Text.ICON_RIGHT_ARROW
 <li>Text.ICON_RIGHT_POINTER
 <li>Text.ICON_STAR
 <li>Text.ICON_UP_ARROW
 <li>Text.ICON_UP_LEFT_ARROW
 </ul>
 
 @return Name of the icon.]]>
      </doc>
    </method>
    <method name="isInitialOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the InitialOpen flag.
 
 @return Value of the flag.]]>
      </doc>
    </method>
    <method name="setInitialOpen"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initOpen" type="boolean"/>
      <doc>
      <![CDATA[Sets the initial open flag.
 
 @param initOpen The new value of the initial open flag.]]>
      </doc>
    </method>
    <method name="getContents" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the string contents for this annotation.]]>
      </doc>
    </method>
    <method name="setIconName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iconName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of the icon for this annotation.  Should be one of:
 <ul>
 <li>Text.ICON_NOTE - This is the default
 <li>Text.ICON_COMMENT
 <li>Text.ICON_KEY
 <li>Text.ICON_HELP
 <li>Text.ICON_NEWPARAGRAPH
 <li>Text.ICON_PARAGRAPH
 <li>Text.ICON_INSERT
 <li>Text.ICON_CHECK
 <li>Text.ICON_CHECKMARK
 <li>Text.ICON_CIRCLE
 <li>Text.ICON_CROSS
 <li>Text.ICON_CROSSHAIRS
 <li>Text.ICON_RIGHT_ARROW
 <li>Text.ICON_RIGHT_POINTER
 <li>Text.ICON_STAR
 <li>Text.ICON_UP_ARROW
 <li>Text.ICON_UP_LEFT_ARROW
 </ul>
 
 
 @param iconName Name of the icon.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <field name="ICON_NOTE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a note icon.  This is the default icon.]]>
      </doc>
    </field>
    <field name="ICON_COMMENT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a comment bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_KEY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a key icon.]]>
      </doc>
    </field>
    <field name="ICON_HELP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a question mark bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_NEWPARAGRAPH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates an insert new line icon.]]>
      </doc>
    </field>
    <field name="ICON_PARAGRAPH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a the literary paragraph icon.]]>
      </doc>
    </field>
    <field name="ICON_INSERT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates an insert icon.]]>
      </doc>
    </field>
    <field name="ICON_CHECK" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a checkmark bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_CHECKMARK" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a checkmark icon.]]>
      </doc>
    </field>
    <field name="ICON_CIRCLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a circle icon.]]>
      </doc>
    </field>
    <field name="ICON_CROSS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a cross or "X" icon.]]>
      </doc>
    </field>
    <field name="ICON_CROSSHAIRS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a crosshairs or bullseye icon.]]>
      </doc>
    </field>
    <field name="ICON_RIGHT_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a right arrow bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_RIGHT_POINTER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a right pointer icon.]]>
      </doc>
    </field>
    <field name="ICON_STAR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a star icon.]]>
      </doc>
    </field>
    <field name="ICON_UP_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates a up arrow bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_UP_LEFT_ARROW" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This string designates an up-left arrow bubble icon.]]>
      </doc>
    </field>
    <field name="ICON_DEFAULT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A reference to the default icon string.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Interface representing a Text annotation (also known as  sticky note) in a PDF document.
 Text annotations are displayed as a note icon on the PDF document
 and open a text box to show its contents when double-clicked.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Text -->
  <!-- start interface com.qoppa.pdf.annotations.TextMarkup -->
  <interface name="TextMarkup"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="setContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contents" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the text content for this annotation.  The content is the comment that a user can enter when creating
 the annotation.
 
 @param contents the new comment.]]>
      </doc>
    </method>
    <method name="getQuadList" return="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of the quadrilaterals that compose this annotation.  Each item in the list
 is an array of 4 Point.Double objects that contains the 4 points needed for that quadrilateral.
 
 @return List of quadrilaterals.]]>
      </doc>
    </method>
    <method name="setQuadList"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="quadList" type="java.util.Vector&lt;java.awt.geom.Point2D[]&gt;"/>
      <doc>
      <![CDATA[Sets the list of quadrilaterals that compose this annotation.  Each item in the list should
 be an array of 4 Point.Double objects.
 
 @param quadList The new list of quadrilaterals.]]>
      </doc>
    </method>
    <method name="setRectangleFromQuads"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convenience method to set the annotation rectangle from the quadrilaterals.]]>
      </doc>
    </method>
    <method name="getIntent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[returns intent for this annotation
 
 @return Returns the value of the Intent property. Possible values are StrikeOutTextEdit.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="com.qoppa.pdf.dom.IPDFPage"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <doc>
      <![CDATA[@param page The page the annotation is located on.
 @return The text corresponding to this annotation's quadrilaterals.
 @throws PDFPermissionException]]>
      </doc>
    </method>
    <method name="setSubtype"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subtype" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the annotation's subtype.
 
 @param subtype
            The type of the markup annotation. Possible values are Highlight,
            Underline, StrikeOut, Squiggly.]]>
      </doc>
    </method>
    <method name="getCreationDate" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date and time when the annotation was created. Milliseconds
 are always zero since the PDF date format doesn't support milliseconds.
 
 @return The date and time when the annotation was created.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface representing a Text Markup annotation in a PDF document.  Text markup
 annotations are a way to mark text in a document by highlighting, crossing out,
 or underlining.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.TextMarkup -->
  <!-- start interface com.qoppa.pdf.annotations.ThreeDimensional -->
  <interface name="ThreeDimensional"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <doc>
    <![CDATA[Interface representing a 3D annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.ThreeDimensional -->
  <!-- start interface com.qoppa.pdf.annotations.UnrecognizedAnnotation -->
  <interface name="UnrecognizedAnnotation"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <doc>
    <![CDATA[Interface representing an annotation of an unrecognized subtype.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.UnrecognizedAnnotation -->
  <!-- start class com.qoppa.pdf.annotations.Vertices -->
  <class name="Vertices" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Vertices"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct an empty list of vertices.]]>
      </doc>
    </constructor>
    <method name="addVertex" return="java.awt.geom.Point2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="double"/>
      <param name="y" type="double"/>
      <doc>
      <![CDATA[Adds a vertex at the end of the list.
 
 @param x The X location of the vertex
 @param y The y location of the vertex
 
 @return A Point2D object with the location of the vertex.]]>
      </doc>
    </method>
    <method name="getVertex" return="java.awt.geom.Point2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Gets the vertex at the given index.
 
 @param index The index of the vertex in this list to get.
 @return The vertex.]]>
      </doc>
    </method>
    <method name="getVertexCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the number of vertices that are held in this object.
 
 @return The number of vertices.]]>
      </doc>
    </method>
    <method name="removeVertex"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes a vertex from this list.
 
 @param index The index of the vertex to remove.]]>
      </doc>
    </method>
    <method name="isModified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether the list of vertices, or any vertices in the list has been modified.
 
 @return Flag indicating if this list has been modified.]]>
      </doc>
    </method>
    <method name="setModified"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mod" type="boolean"/>
      <doc>
      <![CDATA[Sets the modified flag.
 @param mod The new value of the modified flag.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear all the vertices in this list.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface represents a list of vertices.  This interface is used by annotations that are composed
 of lines that are formed by connecting points. 
 
 @author Qoppa Softwawe]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.annotations.Vertices -->
  <!-- start interface com.qoppa.pdf.annotations.WatermarkAnnotation -->
  <interface name="WatermarkAnnotation"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <doc>
    <![CDATA[Interface representing a Watermark annotation in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WatermarkAnnotation -->
  <!-- start interface com.qoppa.pdf.annotations.Widget -->
  <interface name="Widget"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Annotation"/>
    <method name="canEdit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getAppearanceState" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getBackground" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCaption" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getBorderColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHighlightMode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getField" return="com.qoppa.pdf.form.FormField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setHighlightMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="highlightMode" type="int"/>
    </method>
    <method name="setAppearanceState"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="aState" type="java.lang.String"/>
    </method>
    <method name="setBackground"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="background" type="java.awt.Color"/>
    </method>
    <method name="setBorderColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="borderColor" type="java.awt.Color"/>
    </method>
    <method name="setCaption"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="caption" type="java.lang.String"/>
    </method>
    <method name="fieldValueChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </method>
    <method name="isEditable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="com.qoppa.pdf.form.FormField"/>
    </method>
    <method name="setHidden"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hidden" type="boolean"/>
    </method>
    <method name="setPrintable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printable" type="boolean"/>
    </method>
    <method name="getEditingComponent" return="javax.swing.JComponent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHorzTextAlign" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setWidgetHighlight"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="highlight" type="boolean"/>
      <doc>
      <![CDATA[Flags this widget so that when displayed, it will display a highlight
 over the widget. This is intended so that a viewer will locate fields
 more easily on a form.
 
 @param highlight
            Boolean flag indicating whether the field should be
            highlighted.]]>
      </doc>
    </method>
    <method name="getRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rotation of this widget in degrees.
 
 @return	int	widget rotation in degrees]]>
      </doc>
    </method>
    <field name="HIGH_NONE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HIGH_INVERT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HIGH_OUTLINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HIGH_PUSH" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="HIGH_TOGGLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[An abstract class that represents a Widget. Widget annotations are used to
 display PDF interactive fields. There are different classes to represent the
 different Widget types, such as buttons, lists, text fields, etc.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.Widget -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetButton -->
  <interface name="WidgetButton"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Widget"/>
    <method name="getOnValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Interface to a button Widget annotation.  These annotations are used to display button fields in a document.
 This interface is extended by check box, push and radio buttons.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetButton -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetCheckBox -->
  <interface name="WidgetCheckBox"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.WidgetButton"/>
    <doc>
    <![CDATA[Interface to a check box Widget annotation.  These annotations are used to display check box fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetCheckBox -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetChoice -->
  <interface name="WidgetChoice"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Widget"/>
    <doc>
    <![CDATA[Abstract interface to a choice Widget annotation.  This is an abstract interface that is extended by WidgetCombo and WidgetList
 to display combo box and list fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetChoice -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetCombo -->
  <interface name="WidgetCombo"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.WidgetChoice"/>
    <doc>
    <![CDATA[Interface to a combo box Widget annotation.  These annotations are used to display combo box fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetCombo -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetList -->
  <interface name="WidgetList"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.WidgetChoice"/>
    <doc>
    <![CDATA[Interface to a list box Widget annotation.  These annotations are used to display list box fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetList -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetPushButton -->
  <interface name="WidgetPushButton"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.WidgetButton"/>
    <doc>
    <![CDATA[Interface to a push button Widget annotation.  These annotations are used to display push button fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetPushButton -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetRadioButton -->
  <interface name="WidgetRadioButton"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.WidgetButton"/>
    <doc>
    <![CDATA[Interface to a radio button Widget annotation.  These annotations are used to display radio button fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetRadioButton -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetSignature -->
  <interface name="WidgetSignature"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Widget"/>
    <doc>
    <![CDATA[Interface to a signature field Widget annotation.  These annotations are used to display signature fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetSignature -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetSignatureComponent -->
  <interface name="WidgetSignatureComponent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.AnnotationComponent"/>
    <doc>
    <![CDATA[Interface to the component for a Widget signature.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetSignatureComponent -->
  <!-- start interface com.qoppa.pdf.annotations.WidgetText -->
  <interface name="WidgetText"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.annotations.Widget"/>
    <method name="getMaxLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMaxLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxLength" type="int"/>
    </method>
    <method name="isMultiLine" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="doNotScroll" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isCombFormat" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Indicates whether this text widget is in the comb format. Comb format is when all characters
 in the text field are spaced out equally according to the max number of characters
 For a field to be in comb format, the comb property must be set, the maximum number of characters
 bigger than 0 and the text field can not be multi-lines.
 
 @return boolean comb format]]>
      </doc>
    </method>
    <method name="isPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="stringWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Interface to a text field Widget annotation.  These annotations are used to display text fields in a document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.annotations.WidgetText -->
</package>
<package name="com.qoppa.pdf.dom">
  <!-- start interface com.qoppa.pdf.dom.IPDFDocument -->
  <interface name="IPDFDocument"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.awt.print.Printable"/>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages in this document.]]>
      </doc>
    </method>
    <method name="getPageMode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the page mode viewer preference in the document. The
 page mode is used when the document is opened in a PDF viewer.
 
 This value can either be null or one of:<br>
 PAGEMODE_USENONE: Neither document outline nor thumbnail images are
 visible.<br>
 PAGEMODE_USEOUTLINES: Document outline visible.<br>
 PAGEMODE_USETHUMBS: Thumbnail images visible.<br>
 PAGEMODE_FULLSCREEN: Full screen mode, with no menu bar, window controls,
 or any other window visible.<br>
 PAGEMODE_USEOC: Optional content group panel visible (PDF 1.5 and up).<br>
 PAGEMODE_USEATTACHMENTS: Attachments panel visible (PDF 1.6 and up).]]>
      </doc>
    </method>
    <method name="getPDFPermissions" return="com.qoppa.pdf.permissions.AllPDFPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AllPDFPermissions object for this document.  AllPDFPermissions encompasses the PasswordPermissions, 
 DocMDPPermissions, and UsageRights Permissions.
 @return An AllPDFPermissions object that contains permission flags for this document.]]>
      </doc>
    </method>
    <method name="getMagnification" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getOpenAction()">
      <doc>
      <![CDATA[Returns the magnification value of the OpenAction key.  This value is used to set the initial magnification of a document.
 
 This value can null, the percentage value of the magnification as a double converted to a string, or one of the following:<br>
 IPDFDocument.DEFAULT: Use default magnification.<br>
 IPDFDocument.MAGNIFICATION_FIT_WIDTH: Display with the page magnified just enough to fit the entire width of the page within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_VISIBLE: Display with the page magnified just enough to fit the entire width of its bounding box within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_HEIGHT: Display with the page magnified just enough to fit the entire height of the page within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_PAGE: Display with the page magnified just enough to fit the entire page within the window both horizontally and vertically .<br>
 IPDFDocument.MAGNIFICATION_FIT_ACTUAL: Display the page with 100% magnification.
 @deprecated Use getOpenAction()]]>
      </doc>
    </method>
    <method name="getPageLayout" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the page layout key for this document.  This determines
 the layout of the page when initially opened.
 
 This value will be null or one of:<br>
 IPDFDocument.PAGELAYOUT_SINGLEPAGE: Display one page at a time.<br>
 IPDFDocument.PAGELAYOUT_ONECOLUMN: Display the page in one column (single page continuous).<br>
 IPDFDocument.PAGELAYOUT_TWOCOLUMNLEFT: Display the page in two columns (two facing continuous).<br>
 IPDFDocuemnt.PAGELAYOUT_TWOPAGELEFT: Display two pages at a time (two facing).]]>
      </doc>
    </method>
    <method name="getIPage" return="com.qoppa.pdf.dom.IPDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns an object that implements IPDFPage given the page number.
 
 @param pageIndex
            Index of the page to return.]]>
      </doc>
    </method>
    <method name="getLinearizationVersionNumber" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the linearization version number.
 @return Linearization version number.]]>
      </doc>
    </method>
    <method name="isLinearized" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if document is formatted for Fast Web View.
 @return True if document is formatted for Fast Web View.]]>
      </doc>
    </method>
    <method name="getLayerCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of PDF layers in this document.
 
 @return Number of layers in the document.]]>
      </doc>
    </method>
    <method name="getLayer" return="com.qoppa.pdf.Layer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="layerIndex" type="int"/>
      <doc>
      <![CDATA[Returns a particular PDF layer given its index.
 
 @return A reference to the PDF layer.]]>
      </doc>
    </method>
    <method name="addDocumentListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="com.qoppa.pdf.IDocumentListener"/>
      <doc>
      <![CDATA[Internal method to keep track of document events.]]>
      </doc>
    </method>
    <method name="removeDocumentListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="com.qoppa.pdf.IDocumentListener"/>
      <doc>
      <![CDATA[Internal method to keep track of document events.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document. This method will prompt the user with the
 printer dialog and then print the document. <br>
 <br>
 If more control is desired when printing, this object implements both the
 Pageable and the Printable interfaces. The calling application can create
 its own PrinterJob and then use this object as a parameter in the
 setPageable or setPrintable methods.
 
 @param printSettings
            Print job settings. Use this object to tell jPDFProcess how to
            print the document. If null, the library will print using
            default settings.]]>
      </doc>
    </method>
    <method name="getEmbeddedFiles" return="java.util.Vector&lt;com.qoppa.pdf.IEmbeddedFile&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of embedded files, if any, in the document. The list is a vector of @see com.qoppa.pdf.IEmbeddedFile.
 
 @return The list of embedded files.]]>
      </doc>
    </method>
    <method name="addPrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Adds a <code>PrintListener</code> to the PDFDocument
 @param printListener - the <code>PrintListener</code> to be added]]>
      </doc>
    </method>
    <method name="removePrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Removes a <code>PrintListener</code> from the PDFDocument
 @param printListener - the <code>PrintListener</code> to be removed]]>
      </doc>
    </method>
    <method name="getPDFSource" return="com.qoppa.pdf.source.PDFSource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an object representing the source of the PDF content.  The object can be one
 of the standard implementations in the com.qoppa.pdf.source package or it can be a custom
 implementation of the interface.
 
 @return The object that has information about the source of the PDF content.]]>
      </doc>
    </method>
    <method name="getFileOriginalID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the PDF document's original ID. This is a quasi-unique id
 generated by the software that created the document that can be used to
 reference documents.
 
 @return The document's original ID.]]>
      </doc>
    </method>
    <method name="getFileModifiedID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the PDF document's modified ID. This is a quasi-unique id that
 should be generated by any program that modifies the document.
 
 @return The document's modified ID.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the PDF standard document info
 if present.
 
 @return Document info fields]]>
      </doc>
    </method>
    <method name="getDocumentViewPrefs" return="com.qoppa.pdf.DocumentViewPrefs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentViewPrefs object containing information about the
 way the document is to be presented on the screen or in print.
 
 @return The viewer preferences for the document.]]>
      </doc>
    </method>
    <method name="getRootBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the bookmark tree for this document.
 
 @return The root of the bookmark tree.]]>
      </doc>
    </method>
    <method name="getPrintSettings" return="com.qoppa.pdf.PrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the current PrintSettings object.]]>
      </doc>
    </method>
    <method name="setPrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <doc>
      <![CDATA[Set the PrintSettings to be used on the next printout.
 
 @param printSettings
            Settings to use on the next printout.]]>
      </doc>
    </method>
    <method name="getAcroForm" return="com.qoppa.pdf.form.AcroForm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AcroForm in this document. Returns null if the document has
 no fields.
 
 @return AcroForm The AcroForm object for this document.]]>
      </doc>
    </method>
    <method name="getPageable" return="java.awt.print.Pageable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pJob" type="java.awt.print.PrinterJob"/>
      <doc>
      <![CDATA[Returns an object that implements Pageable for this PDF document. The
 method takes a PrinterJob object as a parameter because information about
 the printer is needed in order to fulfill the Pageable interface
 properly.
 
 @param pJob
            PrinterJob object where the Pageable will be used.
 
 @return Object that implements the Pageable interface.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text content of the entire document, as a <code>String</code>
 
 @return The text content of the document.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text content of this page as a <code>String</code>.
 
 @param pageIndex
            The index of the page to get the text for.
 
 @return The text content of this page.]]>
      </doc>
    </method>
    <method name="getOpenAction" return="com.qoppa.pdf.actions.Action"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of actions to run when the document is opened.
 @return The list of actions.]]>
      </doc>
    </method>
    <method name="setWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="watermark" type="com.qoppa.pdf.IWatermark"/>
      <doc>
      <![CDATA[Sets the watermark on the PDF document. Depending on the capabilities of
 the Java PDF Library, the PDF document will make callbacks to the
 watermark with types <code>IWatermark.TYPE_IMAGES</code>,
 <code>IWatermark.TYPE_PRINT</code>, <code>IWatermark.TYPE_VIEWER</code>
 when creating images, printing, and viewing the PDF document,
 respectively.
 
 @param watermark
            the <code>IWatermark</code> object to use when creating
            images, printing, and viewing the PDF document]]>
      </doc>
    </method>
    <method name="getWatermark" return="com.qoppa.pdf.IWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the watermark for the PDF document.
 
 @return the <code>IWatermark</code> object
 @see #setWatermark]]>
      </doc>
    </method>
    <method name="containsJavaScript" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true when the PDF document contains JavaScript.
 @return true when the PDF document contains JavaScript.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="getDestinationNames" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Get a vector of strings that are the names of named destinations.
 
 @return vector of strings that are names of destinations
 @throws PDFException]]>
      </doc>
    </method>
    <field name="MAGNIFICATION_FIT_WIDTH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAGNIFICATION_FIT_VISIBLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAGNIFICATION_FIT_HEIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAGNIFICATION_FIT_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MAGNIFICATION_FIT_ACTUAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_USENONE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_USEOUTLINES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_USETHUMBS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_FULLSCREEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_USEOC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGEMODE_USEATTACHMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_SINGLEPAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_ONECOLUMN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_TWOCOLUMNLEFT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_TWOPAGELEFT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_TWOPAGERIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PAGELAYOUT_TWOCOLUMNRIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Object representation of a PDF document. This interface provides information
 about the document and its pages.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.dom.IPDFDocument -->
  <!-- start interface com.qoppa.pdf.dom.IPDFPage -->
  <interface name="IPDFPage"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getMediaBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this page's Media Box.  The media box is equivalent
 to the physical paper the page was designed for.
 
 @return The page's media box.]]>
      </doc>
    </method>
    <method name="getCropBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Crop Box.  The crop box in a page
 determines what area of the page will be displayed
 or printed.
 
 @return The page's crop box.]]>
      </doc>
    </method>
    <method name="getBleedBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Bleed Box.  A page should be clipped to
 this coordinates when output to a production environment.
 jPDFViewer does not use the Bleed Box, it uses the Crop Box
 to clip a page before displaying.  The method is provided
 for information to the host application.
 
 @return The page's bleed box.]]>
      </doc>
    </method>
    <method name="getTrimBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Trim Box.  The trim box defines a finished
 page's intended dimension after trimming.  jPDFViewer does not
 use the Trim Box, the method is provided here for information
 to the host application.
 
 @return The page's crop box.]]>
      </doc>
    </method>
    <method name="getArtBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Art Box.  The art box defines the extent
 of the page's meaningful content (including potential
 whitespace). jPDFViewer does not use the Art Box, the method
 is provided here for information to the host application.
 
 @return The page's art box.]]>
      </doc>
    </method>
    <method name="paintPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <doc>
      <![CDATA[Paints this page to the given graphics object.
 
 @param g2d Graphics objects to paint the page to.
 
 @throws PDFException Any errors encountered during painting the page.]]>
      </doc>
    </method>
    <method name="paintPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <param name="paintAnnotations" type="boolean"/>
      <doc>
      <![CDATA[Paints this page to the given graphics object, with an option to paint the annotations on the page.
 
 @param g2d Graphics objects to paint the page to.
 @param paintAnnotations Flag indicating whether annotations should be painted
 
 @throws PDFException Any errors encountered during painting the page.]]>
      </doc>
    </method>
    <method name="printPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <param name="pf" type="java.awt.print.PageFormat"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <doc>
      <![CDATA[Prints this page given a page format describing the printer's page and
 a PrintSettings object.
 
 @param g2d Printer graphics object.
 @param pf PageFormat object to use when printing.
 @param printSettings Printing preferences.]]>
      </doc>
    </method>
    <method name="getDisplayHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page's display height.  This is equivalent to getCropBox().getHeight();
 @return The page's display height.]]>
      </doc>
    </method>
    <method name="getDisplayWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page's display width.  This is equivalent to getCropBox().getWidth();
 @return The page's display width.]]>
      </doc>
    </method>
    <method name="getDisplayX" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page's left margin.  This value correspond to the different between
 the page's CropBox X coordinate and the MediaBox X coordinate.  When the page is,
 this will be the origin of the displayed page.
 
 @return The page's display X coordinate.]]>
      </doc>
    </method>
    <method name="getDisplayY" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page's top margin.  This value correspond to the different between
 the page's CropBox Y coordinate and the MediaBox Y coordinate.  When the page is,
 this will be the origin of the displayed page.
 
 @return The page's display Y coordinate.]]>
      </doc>
    </method>
    <method name="getPageRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rotation of this page in degrees.
 
 @return	int	Page rotation in degrees.]]>
      </doc>
    </method>
    <method name="getPageIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This method returns the index of this page in its parent document.
 
 @return the index of the page]]>
      </doc>
    </method>
    <method name="getAnnotations" return="java.util.Vector&lt;com.qoppa.pdf.annotations.Annotation&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a list of PDF annotations in this page.  The objects
 in the Vector are all derived from com.qoppa.pdf.annotations.Annotation.
 
 @return List of annotations.]]>
      </doc>
    </method>
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="keepAspect" type="boolean"/>
      <doc>
      <![CDATA[Returns a buffered image showing the contents of this page.  The image is
 resized to the given width and height.  If keepAspect is true, the resized
 image keeps its aspect ratio.
 
 @param width Width of the desired image.
 @param height Height of the desired image.
 @param keepAspect Flag to indicate whether the resized image should keep its aspect ratio.
 
 @return BufferedImage with the contents of the page.]]>
      </doc>
    </method>
    <method name="findTextWithContext" return="java.util.Vector&lt;com.qoppa.pdf.TextPositionWithContext&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="searchText" type="java.lang.String"/>
      <param name="caseSensitive" type="boolean"/>
      <param name="wholeWords" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method searches for the given text in the page.  If there are instances of the text found,
 the method returns a Vector of TextPositionWithContext objects.  These objects contain information about the
 text, its position and the surrounding text.
 
 @param searchText The text to search for.
 @param caseSensitive Flag to determine if the search should be case sensitive.
 @param wholeWords Flag to indicate if only whole words should be found
 
 @return A list of TextPositionWithContext objects
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="findTextWithContextUsingRegEx" return="java.util.Vector&lt;com.qoppa.pdf.TextPositionWithContext&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="regex" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method searches for text in the page for matches with the given regular expression.  If there are matches found,
 the method returns a Vector of TextPositionWithContext objects.  These objects contain information about the
 text, its position and the surrounding text.
 
 @param regex The regular expression to match against.
 
 @return A list of TextPositionWithContext objects
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="findText" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="searchText" type="java.lang.String"/>
      <param name="caseSensitive" type="boolean"/>
      <param name="wholeWords" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method searches for the given text in the page.  If there are instances of the text found,
 the method returns a Vector of TextPosition objects.  These objects contain information about the
 text and its position.
 
 @param searchText The text to search for.
 @param caseSensitive Flag to determine if the search should be case sensitive.
 @param wholeWords Flag to indicate if only whole words should be found
 
 @return A list of TextPosition objects
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getTabbingOrder" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tabbing order as defined in the page description, if present.  The tabbing order is used by
 viewers to determine the tabbing between form fields.  The possible values are R for row order, C for column
 order and S for structure order.
 
 @return A string that holds the entry for the tabbing order from the page description.]]>
      </doc>
    </method>
    <method name="getTextWithCursors" return="com.qoppa.pdf.TextSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startCursor" type="java.awt.geom.Point2D"/>
      <param name="endCursor" type="java.awt.geom.Point2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text contained between the start and end cursors, in "reading mode".  Reading
 mode implies line wrapping, column detection and wrapping and more.  The effect should be the 
 same as if the user chose the text selection tool, pressed down at the startCursor location and 
 dragged to the endCursor location.
 
 @param startCursor the location where the cursor should start selection
 @param endCursor The location where the cursor ends selection
 
 @return A TextSelection object representing the text that was selected.]]>
      </doc>
    </method>
    <method name="getTextInArea" return="com.qoppa.pdf.TextSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="selectArea" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Selects the text in an area of the page.  The coordinates on the page should be in
 'display' coords, i.e. the origin of the coordinates is page.getCropBox.getX() and
 page.getCropBox().getY().
 
 @return A TextSelection object representing the selected text.  null if no text is
 selected.  The text selection coordinates will be returned in 'display' space as well,
 i.e. the origin of the coordinates is page.getCropBox.getX() and
 page.getCropBox().getY();]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text content of this page as a <code>String</code>.
 
 @return The text content of this page.]]>
      </doc>
    </method>
    <method name="getIDocument" return="com.qoppa.pdf.dom.IPDFDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document that this page belongs to.

 @return The document that this page belongs to.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Object representation of a page in a PDF document.  This interface provides information
 about a page in a PDF document and has methods to paint and print the page.
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.dom.IPDFPage -->
</package>
<package name="com.qoppa.pdf.errors">
  <!-- start class com.qoppa.pdf.errors.PDFErrorHandling -->
  <class name="PDFErrorHandling" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFErrorHandling"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clearErrors"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clear any errors that have accumulated from previous pages.  This method is called
 by any page rendering operations within the library.]]>
      </doc>
    </method>
    <method name="addError"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="error" type="com.qoppa.pdf.errors.RenderError"/>
      <doc>
      <![CDATA[Add an error to the list of errors accumulated.  This method is called by the internal
 classes in the library anytime there is an error rendering an element in a PDF page (such
 as an error on an image or in a font).
 
 @param error The error.]]>
      </doc>
    </method>
    <method name="addError"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="prefixMsg" type="java.lang.String"/>
      <doc>
      <![CDATA[Add an error to the list of errors accumulated.  This method is called by the internal
 classes in the library anytime there is an error rendering an element in a PDF page (such
 as an error on an image or in a font).  THis is a convenience method that takes an exception
 and an error message and then creates a RenderError object to add to the error list.
 
 @param t The exception that was thrown.
 @param prefixMsg A message to prefix to error string.]]>
      </doc>
    </method>
    <method name="getErrors" return="java.util.Vector&lt;com.qoppa.pdf.errors.RenderError&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a list of errors in the last rendering.  This method can be called by the host
 application after a rendering when the error handling is set to EH_SHOW_ERROR_AND_CONTINUE
 to find out if there were any errors in the rendering.
 
 @return A list of errors.]]>
      </doc>
    </method>
    <method name="checkForErrors_UsePrinterException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorMsg" type="java.lang.String"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[This is a convenience method that gets called by the library after printing a page.  If there
 were errors when printing the page, and error handling is set to EH_ABORT_PAGE, the method
 throws a PrinterException.
  
 @param errorMsg The error message to use in the PrinterException.
 
 @throws PrinterException]]>
      </doc>
    </method>
    <method name="checkForErrors_UsePDFException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorMsg" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This is a convenience method that gets called by the library after a rendering.  If there
 were errors when rendering the contents of a page, and error handling is set to EH_ABORT_RENDERING, 
 the method throws a PDFException, thereby aborting the entire rendering of the document.
  
 @param errorMsg The error message to use in the PDFException.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getErrorHandling" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current value of the error handling flag.
 
 @return The current value of the error handling flag.  This value can be either
 EH_SHOW_ERROR_AND_CONTINUE or EH_ABORT_RENDERING.]]>
      </doc>
    </method>
    <method name="setErrorHandling"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="errorHandling" type="int"/>
      <doc>
      <![CDATA[Sets the value of the error handling flag.  THis can be either EH_SHOW_ERROR_AND_CONTINUE or EH_ABORT_RENDERING.
 
 @param errorHandling The new value of the error handling flag.]]>
      </doc>
    </method>
    <method name="isThrowXFADynamicException" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the flag that controls whether or not an exception is thrown when trying to build a 
 document with an AcroForm that has Adobe XML Forms Architecture (XFA) data, and is a Dynamic Form.
 
 @return Boolean flag that indicates whether to throw an exception on documents with a Dynamic Form.]]>
      </doc>
    </method>
    <method name="setThrowXFADynamicException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwDynamicXFAException" type="boolean"/>
      <doc>
      <![CDATA[When the flag is set to true (the default), the library will throw an error if the document being built
 has an AcroForm that has Adobe XML Forms Architecture (XFA) data, and is a Dynamic Form.  If the flag is false, there will be no error.
 
 @param throwDynamicXFAException The new value of the flag.]]>
      </doc>
    </method>
    <field name="EH_SHOW_ERROR_AND_CONTINUE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Display the error in the rendering of the page and continue rendering other pages.]]>
      </doc>
    </field>
    <field name="EH_ABORT_RENDERING" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Abort the entire rendering operation and throw an exception to the host application.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class is used to set different error handling options within the PDF library.  With the methods
 in this class, the host application can tell the library whether to display an error in the rendering
 of a page or to abort the entire rendering operation.  Additionally, The class has methods for the 
 library to keep track of errors and for the host application to get the list of errors in the last
 rendering operation.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.errors.PDFErrorHandling -->
  <!-- start class com.qoppa.pdf.errors.RenderError -->
  <class name="RenderError" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RenderError" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getErrorMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class is used to describe an error in rendering a PDF page.  Objects of this class
 are added to the list kept by the PDFErrorHandling class to keep track of any errors that
 might have happened during rendering.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.errors.RenderError -->
</package>
<package name="com.qoppa.pdf.form">
  <!-- start interface com.qoppa.pdf.form.AcroForm -->
  <interface name="AcroForm"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="exportAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to a file in XFDF format.
 
 @param fileName The name of the file to export the data to.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="exportAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to a file in FDF format.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 
 @param fileName The name of the file to export the data to.]]>
      </doc>
    </method>
    <method name="exportAsXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exports XFA field data to a file in XDP format.
 
 @param fileName The name of the file to export the data to.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.]]>
      </doc>
    </method>
    <method name="exportAsXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pdfReference" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exports XFA field data to an OutputStream.  The output stream is left open (NOT closed) after writing the XDP data.
 @param outStream The output stream to write the data to.
 @param pdfReference Reference to the PDF file.  This is used to the pdf/href element in the XDP file.  If null, the pdf/href element is not added to the output.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.]]>
      </doc>
    </method>
    <method name="exportAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to an output stream in XML format.
 
 @param outStream The output stream to write the data to.
 
 @param pathToPDFFile is the relative path from the fdf file to the pdf file name. This parameter can be left null. 
 This parameter is used to fill the pdf file name entry in the FDF file, the file entry will be set to pathToPDFFile + fileName
 The file entry is used when you open an fdf file to be able to locate the corresponding pdf file. 
 Example of pathToPDFFile ../qoppa/mydir
 
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to an output stream in FDF format.
 
 @param outStream The output stream to write the data to.
 
 @param pathToPDFFile is the relative path from the fdf file to the pdf file name. This parameter can be left null. 
 This parameter is used to fill the pdf file name entry in the FDF file, the file entry will be set to pathToPDFFile + fileName
 The file entry is used when you open an fdf file to be able to locate the corresponding pdf file. 
 
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 
 Example of pathToPDFFile ../qoppa/mydir]]>
      </doc>
    </method>
    <method name="getFieldList" return="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the list of fields in this AcroForm.  The list returned contains objects of type FormField.
 
 @return List of fields in the AcroForm.]]>
      </doc>
    </method>
    <method name="getSignatureFields" return="java.util.Vector&lt;com.qoppa.pdf.form.SignatureField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a list of signature fields, if any.  The list returned contains objects of type SignatureField.
 
 @return List of signature fields (if any) in the AcroForm.  If there are no fields, this method returns null.]]>
      </doc>
    </method>
    <method name="getField" return="com.qoppa.pdf.form.FormField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets a field by name.  As fields can be hierarchical, names of fields
 can be hierarchical:  choices.choice1 would refer to a field named
 choice1 whose parent is a field named choices.
 
 @param fieldName The name of a field in hierarchical form.
 
 @return AFField The field referenced by the name, null if there is no field by that name.]]>
      </doc>
    </method>
    <method name="importFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm field data from a file in FDF Format.
 
 @param fileName The name of the FDF file to import the data from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Imports AcroForm field data from an input stream in FDF format.
 
 @param inStream The input stream in FDF format to read the data from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Imports AcroForm fields data from a file in XFDF Format.
 
 @param fileName The name of the XFDF file to import the data from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Imports XFA field data from a file in XDP format.
 
 @param fileName The name of the XDP file to read.
 @throws PDFException, IOException]]>
      </doc>
    </method>
    <method name="importXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Imports XFA field data from an InputStream in XDP format.  The input stream is left open (NOT closed) after reading the XDP data.
 
 @param inStream The input stream to read the XDP data from.
 @throws PDFException, IOException]]>
      </doc>
    </method>
    <method name="importXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="topElement" type="com.qoppa.nanoxml.XMLElement"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm field data from an xml element representing the top element of an fdf file.
 
 @param topElement The xml element representing the XFDF file.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Imports AcroForm field data from an input stream in XFDF format.
 
 @param inStream The input stream in XFDF format to read the data from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="resetFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Reset the form fields to their default value. If there is no default value, then the value is set to null.]]>
      </doc>
    </method>
    <method name="exportAsXML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="useHierarchy" type="boolean"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values in a simple XML format.
 
 @param outStream Output stream to write the XML to.
 @param useHierarchy Preserve the hierarchy in the form in the XML output.  If this parameter
 is set to false, the output XML will have all the fields together in a single level below the root.]]>
      </doc>
    </method>
    <method name="exportAsXML"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="useHierarchy" type="boolean"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values in a simple XML format.
 
 @param fileName Name of the file to output the XML to.
 @param useHierarchy Preserve the hierarchy in the form in the XML output.  If this parameter
 is set to false, the output XML will have all the fields together in a single level below the root.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.]]>
      </doc>
    </method>
    <method name="exportAsCSV"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <param name="exportEmpty" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values in comma-separated-value format.
 
 @param os Output stream to write the CSV to.
 @param exportEmpty Flag to indicate whether empty or null fields should be exported.
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAsCSV"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmpty" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values in comma-separated-value format.
 
 @param fileName Name of the file to write the CSV to.
 @param exportEmpty Flag to indicate whether empty or null fields should be exported.
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAsText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="os" type="java.io.OutputStream"/>
      <param name="exportEmpty" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values as text (separated by tabs).
 
 @param os Output stream to write the text to.
 @param exportEmpty Flag to indicate whether empty or null fields should be exported.
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAsText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmpty" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export field values as text (separated by tabs).
 
 @param fileName Name of the file to write the text to.
 @param exportEmpty Flag to indicate whether empty or null fields should be exported.
 @throws IOException]]>
      </doc>
    </method>
    <method name="hasXFA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data.

 @return true if this form has XFA data, otherwise false]]>
      </doc>
    </method>
    <method name="removeXFA"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes the Adobe XML Forms Architecture (XFA) data from this AcroForm if present.]]>
      </doc>
    </method>
    <method name="getCalculationOrder" return="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the list of fields with calculate actions in the correct order.  May return null.]]>
      </doc>
    </method>
    <method name="isXFAStatic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data, and it is a Static Form.

 @return true if this form has Static XFA data, otherwise false]]>
      </doc>
    </method>
    <method name="isXFADynamic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data, and it is a Dynamic Form.

 @return true if this form has Dynamic XFA data, otherwise false]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class represents the AcroForm content in a PDF document.  AcroForms are the form segment
 in interactive PDF documents.  This class can be used to get information about the fields in
 the PDF document and to get references to the fields to set and get their values.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.AcroForm -->
  <!-- start interface com.qoppa.pdf.form.CheckBoxField -->
  <interface name="CheckBoxField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value for the check box field. If the check box is checked, the value is the export value, else
 the value is "off".]]>
      </doc>
    </method>
    <method name="getDefaultValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default value for the check box field. The default value is the export value if the check box is checked by default
 or it is "off" if the check box is not checked by default.]]>
      </doc>
    </method>
    <method name="setDefaultValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the default value for the check box field. To make the check box checked by default, set the default value to the export value.
 To make the check box unchecked by default, set the default value to "off".]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the value for the check box field. To make the check box checked, set the value to the export value.
 To make the check box unchecked, set the value to "off".]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<code>CheckBoxField</code> holds a check box field.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.CheckBoxField -->
  <!-- start interface com.qoppa.pdf.form.ChoiceField -->
  <interface name="ChoiceField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="getDefaultValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default value for this field.
 @return The default value]]>
      </doc>
    </method>
    <method name="getDisplayOptions" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of display options (or items) for this field.
 @return The list of display options as a vector]]>
      </doc>
    </method>
    <method name="getDisplayValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exportValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the display value (or item) corresponding to a given export value.
 @return The display value]]>
      </doc>
    </method>
    <method name="getExportOptions" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of export options for this field.
 @return The list of export options as a vector]]>
      </doc>
    </method>
    <method name="getExportValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="displayValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the export value corresponding to a given display value (or item).
 @return The export value]]>
      </doc>
    </method>
    <method name="getValues" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current list of selected export values.
 @return The list of selected export values as a vector]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current selected value. If this field allows multiple selection and there are more than one value selected, 
 this method will return the first value selected.
 @return The selected export value]]>
      </doc>
    </method>
    <method name="isCombo" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the choice field is a combo box field, false if it's a list field. 
 @return true or false]]>
      </doc>
    </method>
    <method name="isEditable" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if user is allowed to enter custom text, false if not. This flag only applies to combo box fields, it doesn't apply to list fields.
 @return true or false]]>
      </doc>
    </method>
    <method name="isMultiSelect" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if selection of multiple items is allowed, false if not. 
 @return true or false]]>
      </doc>
    </method>
    <method name="isSpellCheck" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if spelling should be checked on the custom values entered by user (@see isEditable()), false if not. 
 @return true or false]]>
      </doc>
    </method>
    <method name="setDefaultValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the default selected export value for this choice field. 
 @param defaultValue]]>
      </doc>
    </method>
    <method name="setOptions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exportOptions" type="java.util.Vector&lt;java.lang.String&gt;"/>
      <param name="displayOptions" type="java.util.Vector&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Set the list of options for this choice field. If the list of export options is left null, it will be defaulted to the list of display options.
 Similarly, if the list of display options if left null, it will be defaulted to the list of export options.
 @param exportOptions the list of export options
 @param displayOptions the list of items or display options.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the selected export value for this choice field. 
 @param value]]>
      </doc>
    </method>
    <method name="setValues"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.util.Vector&lt;java.lang.String&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the list of currently selected values for this choice field. 
 @param values List of selected export values as a vector]]>
      </doc>
    </method>
    <field name="FF_COMBO" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is a combo box.]]>
      </doc>
    </field>
    <field name="FF_EDIT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is editable if it is also a combo box.]]>
      </doc>
    </field>
    <field name="FF_SORT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field's options are sorted alphabetically.]]>
      </doc>
    </field>
    <field name="FF_MULTISELECT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field may have multiple options selected.]]>
      </doc>
    </field>
    <field name="FF_DONOTSPELLCHECK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is not spell checked.]]>
      </doc>
    </field>
    <field name="FF_COMMITONSELECTION" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field's value is committed when a selection is made.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<code>ChoiceField</code> is the abstract class to hold a choice field. A choice field contains
 several text items.
 <code>ComboField</code> and <code>ListField</code> extend this class.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.ChoiceField -->
  <!-- start interface com.qoppa.pdf.form.ComboField -->
  <interface name="ComboField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.ChoiceField"/>
    <doc>
    <![CDATA[<code>ComboField</code> holds a combo field. 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.ComboField -->
  <!-- start interface com.qoppa.pdf.form.FieldListener -->
  <interface name="FieldListener"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="focusGained"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="com.qoppa.pdf.form.FormField"/>
      <doc>
      <![CDATA[This method gets called whenever a field gains focus.
 
 @param field The field that just gained the focus.]]>
      </doc>
    </method>
    <method name="focusLost"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="com.qoppa.pdf.form.FormField"/>
      <doc>
      <![CDATA[This method gets called whenever a field loses focus.
 
 @param field The field that just lost the focus.]]>
      </doc>
    </method>
    <method name="valueChanged"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="com.qoppa.pdf.form.FormField"/>
      <param name="oldValue" type="java.lang.Object"/>
      <param name="newValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[This method gets called whenever a field's value is changed.
 Supported field types are Check Boxes, Radio Buttons, Choice Fields, and TextFields.
 
 @param field
 @param oldValue
 @param newValue]]>
      </doc>
    </method>
    <field name="EVENT_FOCUSGAINED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EVENT_FOCUSLOST" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="EVENT_VALUECHANGED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This interface is used to let the host application listen in on field focus events.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.FieldListener -->
  <!-- start interface com.qoppa.pdf.form.FormField -->
  <interface name="FormField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getAltFieldName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the alternate field name for this field.
 
 @return The alternate field name.]]>
      </doc>
    </method>
    <method name="getFieldName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of this field.
 
 @return The field's name.]]>
      </doc>
    </method>
    <method name="getFieldFlags" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the flags for this field as an int. This flag represents properties for this field and is the or'ed combination
 of the flags.  All fields support the following flags:<br>
      FormField.FF_READONLY <br>
      FormField.FF_REQUIRED <br>
      FormField.FF_NOEXPORT <br>
      
 @return The value of the field flags.]]>
      </doc>
    </method>
    <method name="getFieldTypeDesc" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a description of the field type.
 "CheckBox" for <code>CheckBoxField</code>
 "ComboBox" for <code>ComboBoxField</code>
 "List" for <code>ListField</code>
 "PushButton" for <code>PushButtonField</code>
 "RadioButtonGroup" for <code>RadioButtonGroupField</code>
 "Signature" for <code>SignatureField</code>
 "TextField" for <code>TextField</code>
 
 
 @return A string describing the field type.]]>
      </doc>
    </method>
    <method name="getFullFieldName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the full name of the fields. If the field is hierarchical, the name will include the full path to the top parent. For instance "address.line1"
 
 @return The fully qualified field name.]]>
      </doc>
    </method>
    <method name="getMapFieldName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this field's mapping name.
 
 @return The field's mapping name.]]>
      </doc>
    </method>
    <method name="getUserName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets this field's user name.
 
 @return The field's user name.]]>
      </doc>
    </method>
    <method name="isNoExport" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the 'No Export' flag.
 
 @return Value of the 'No Export' flag.]]>
      </doc>
    </method>
    <method name="isReadOnly" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the 'Read Only' flag.
 
 @return The value of the 'Read Only' flag.]]>
      </doc>
    </method>
    <method name="isRequired" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the 'Required' flag.
 
 @return The value of the 'Required' flag.]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Resets the field to its default value. If there is no default value then the value will be set to null.]]>
      </doc>
    </method>
    <method name="setAltFieldName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="altFieldName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the alternate field name.
 
 @param altFieldName The new alternate field name.]]>
      </doc>
    </method>
    <method name="setFieldFlags"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldFlags" type="int"/>
      <doc>
      <![CDATA[Sets the field flags.  The field flags are an or'ed combination of the following values:<br>
      FF_READONLY <br>
      FF_REQUIRED <br>
      FF_NOEXPORT <br>
 
 @param fieldFlags The new value for the flags.]]>
      </doc>
    </method>
    <method name="setFieldName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the field name.
 
 @param fieldName The new field name.]]>
      </doc>
    </method>
    <method name="setMapFieldName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this field's mapping name.
 
 @param mapName The new mapping name.]]>
      </doc>
    </method>
    <method name="setNoExport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="noExport" type="boolean"/>
      <doc>
      <![CDATA[Sets the 'No Export' flag.  If this flag is set, the field value
 will not be exported to an external file.
 
 @param noExport The new value of the 'No Export' flag.]]>
      </doc>
    </method>
    <method name="setReadOnly"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readOnly" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the 'Read Only' flag.  If this value is set, the fields
 value may not be changed.
 
 @param readOnly The new value of the 'Read Only' flag.]]>
      </doc>
    </method>
    <method name="setRequired"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="required" type="boolean"/>
      <doc>
      <![CDATA[Sets the value of the 'Required' flag.  If this flag is set, the value in this
 field is a required value.
 
 @param required The new value of the 'Required' flag.]]>
      </doc>
    </method>
    <method name="setUserName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userName" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets this field's user name.
  
 @param userName The new user name.]]>
      </doc>
    </method>
    <method name="setPrintable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printable" type="boolean"/>
      <doc>
      <![CDATA[Sets the PRINTABLE flag for this field. A hidden field will not be displayed on the screen and will not print. 
 
 @param printable the new invisible setting.]]>
      </doc>
    </method>
    <method name="setHidden"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hidden" type="boolean"/>
      <doc>
      <![CDATA[Sets the HIDDEN flag.  A hidden field will not be displayed on the screen and will not print. 
 
 @param hidden the new hidden setting. True to hide, false to show the field.]]>
      </doc>
    </method>
    <method name="setComponentVisible"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="visible" type="boolean"/>
      <doc>
      <![CDATA[Sets the visibility of the component(s) associated with this field on the screen. This method should be used
 when component visibility needs to be changed temporarily on the screen. To hide the field definitively,
 use the setHidden method that will set the hidden flag in the document.
 
 @param visible The new value of the components visibility.]]>
      </doc>
    </method>
    <method name="getWidgets" return="java.util.Vector&lt;com.qoppa.pdf.annotations.Widget&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a list of any widgets associated with this field.  A field can have
 several widgets (components) that display or interact with its values, so the
 return value for this method is a Vector. 
 The objects in the Vector are all derived from {@link com.qoppa.pdf.annotations.Widget}
 
 @return List of widgets for this field.]]>
      </doc>
    </method>
    <method name="addFieldListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="com.qoppa.pdf.form.FieldListener"/>
      <doc>
      <![CDATA[Adds a field listener to this field.
 
 @param list An object that implements FieldListener.]]>
      </doc>
    </method>
    <method name="addMouseListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.awt.event.MouseListener"/>
      <doc>
      <![CDATA[Adds a mouse listener to this field. This will add a mouse listener to all the field's widgets
 but not to the widget's editing component. This means that events will not be generated
 when the field is in edit mode. 
 
 
 IMPORTANT: The field's widgets need to be created for the listener to be added properly
 and one way to guarantee this is by calling pdfBean.setIncrementalLoad(false);
 
 @param list An object that implements MouseListener.]]>
      </doc>
    </method>
    <method name="addKeyListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="java.awt.event.KeyListener"/>
      <doc>
      <![CDATA[Adds a key listener to this field. This will add a key listener to all the field's widgets
 but not to the widget's editing component. This means that events will not be generated
 when the field is in edit mode. 
 
 IMPORTANT: The field's widgets need to be created for the listener to be added properly
 and one way to guarantee this is by calling pdfBean.setIncrementalLoad(false);
 
 @param list An object that implements KeyListener]]>
      </doc>
    </method>
    <method name="removeFieldListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="list" type="com.qoppa.pdf.form.FieldListener"/>
      <doc>
      <![CDATA[Removes a field listener from this field.
 
 @param list The listener to remove.]]>
      </doc>
    </method>
    <method name="flattenField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the field into the document's content layer.  This method only
 works when the document is a mutable document, such as within the jPDFNotes or
 jPDFProcess libraries.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getKids" return="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a list of fields from the kids array. 
 
 @return List of child fields.]]>
      </doc>
    </method>
    <method name="getTriggerActions" return="com.qoppa.pdf.actions.TriggerActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the TriggerActions associated with the field.
 @return TriggerActions]]>
      </doc>
    </method>
    <method name="setTriggerActions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="triggerActions" type="com.qoppa.pdf.actions.TriggerActions"/>
      <doc>
      <![CDATA[Sets the TriggerActions for this field.]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the field is not filled. Some fields cannot be empty (Checkboxes, Signatures,  Lists, Buttons) and will always return false]]>
      </doc>
    </method>
    <field name="TYPE_TEXT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a text field.]]>
      </doc>
    </field>
    <field name="TYPE_COMBOBOX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a combo box field.]]>
      </doc>
    </field>
    <field name="TYPE_LISTBOX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a list box field.]]>
      </doc>
    </field>
    <field name="TYPE_CHECKBOX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a check box field.]]>
      </doc>
    </field>
    <field name="TYPE_BUTTON" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a button field.]]>
      </doc>
    </field>
    <field name="TYPE_RADIOBUTTON" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a radio button field.]]>
      </doc>
    </field>
    <field name="TYPE_SIGNATURE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[This field type designates a signature field.]]>
      </doc>
    </field>
    <field name="FF_READONLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is read only.]]>
      </doc>
    </field>
    <field name="FF_REQUIRED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field value is required.]]>
      </doc>
    </field>
    <field name="FF_NOEXPORT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field must not be exported.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<code>FormField</code> is the abstract class that is being extended by all fields such as <code>CheckBoxField</code>, <code>ChoiceField</code>, <code>ComboField</code>,
 <code>PushButtonField</code>, <code>RadioButtonGroupField</code>, <code>SignatureField</code> and <code>TextField</code>.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.FormField -->
  <!-- start interface com.qoppa.pdf.form.ListField -->
  <interface name="ListField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.ChoiceField"/>
    <doc>
    <![CDATA[<code>ListField</code> holds a list field. Multiple values can be selected at a time.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.ListField -->
  <!-- start interface com.qoppa.pdf.form.PushButtonField -->
  <interface name="PushButtonField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="setImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bi" type="java.awt.image.BufferedImage"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Set an image to display in the button fields.  Push button fields in PDF can be used to load and
 display images.  The field has to be an "image field", which is a push button field designated to
 hold images.
 
 @param bi The image to set in the field.
 
 @throws PDFException When there are any errors setting the image in the PDF.]]>
      </doc>
    </method>
    <method name="isImageField" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Checks whether this push button field is designated to be an image field.
 
 @return true if the button is an image field.]]>
      </doc>
    </method>
    <field name="FF_PUSHBUTTON" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is a push button.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<code>PushButtonField</code> holds a push button field. 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.PushButtonField -->
  <!-- start interface com.qoppa.pdf.form.RadioButtonGroupField -->
  <interface name="RadioButtonGroupField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="getDefaultValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default value for this radio button group field. The default value is the export value if the radio button in the group that is to be selected by default
 Returns null if all radio buttons in the group are not selected by default. 
 
 @return The default value for this radio button group field.]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value for this radio button group field. The value is the export value if the radio button in the group that is currently selected.
 Returns null if all radio buttons in the group are currently not selected.
 
  @return The current value for this radio button group field.]]>
      </doc>
    </method>
    <method name="setDefaultValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the default value for this radio button group field. To make one of the radio button in the group selected by default, set the default value to the export value
 of this radio button. To make all the radio buttons in this group unselected by default, set the default value to null.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the value for this radio button group field. To make one of the radio button in the group selected, set the value to the export value
 of this radio button. To make all the radio buttons in this group unselected, set the value to null.]]>
      </doc>
    </method>
    <method name="getValueFromOptions" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value for this radio button group field from the options if they exist.  Otherwise returns the on value.
 Returns null if all radio buttons in the group are currently not selected.]]>
      </doc>
    </method>
    <method name="setValueFromOptions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the value from the options for this radio button group field if the options exist.  Otherwise sets the value as normal.
 To make all the radio buttons in this group unselected, set the value to null.
 @param value
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getOnValues" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a Vector of values containing the on state for each of the radio buttons in this radio button group field.]]>
      </doc>
    </method>
    <method name="getOptions" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a Vector of values representing the export value of each annotation in this radio button group field.  
 If the options do not exist, the Vector of on values is returned.]]>
      </doc>
    </method>
    <field name="FF_NOTOGGLETOOFF" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating exactly one radio button must be selected at all times.]]>
      </doc>
    </field>
    <field name="FF_RADIO" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is a radio button.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<code>RadioButtonGroupField</code> holds a radio button group field. This is a group of radio buttons that all have the same name.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.RadioButtonGroupField -->
  <!-- start interface com.qoppa.pdf.form.SignatureField -->
  <interface name="SignatureField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="getSignDateTime" return="java.util.Date"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature date and time as a java date object.
 @return signature date and time]]>
      </doc>
    </method>
    <method name="getSignLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature location.
 @return signature location]]>
      </doc>
    </method>
    <method name="getSignName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature name.
 @return signature name]]>
      </doc>
    </method>
    <method name="getSignReason" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the signature reason.
 @return signature reason]]>
      </doc>
    </method>
    <method name="getSignatureValidity" return="com.qoppa.pdf.SignatureValidity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the validity information for this signature.
 
 @return An object describing the validity state of this signature.]]>
      </doc>
    </method>
    <method name="hasBeenSigned" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this signature has already been signed or if it is an empty signature.
 
 @return A flag indicating whether this field has been signed.]]>
      </doc>
    </method>
    <method name="isSignAuthor" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this is an author signature.  false indicates that this
 is a recipient signature.
 
 @return flag indicating if this is an author signature]]>
      </doc>
    </method>
    <method name="clearSignature" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clears this signature, if the field has been signed.
 
 @return true if the field had been signed and the clearing of the signature was successful.]]>
      </doc>
    </method>
    <method name="getCustomProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method can be used to retrieve the values of custom properties in the signature <i>field</i> dictionary.
 
 @param key The key for the custom property in the signature field dictionary.
 
 @return The value of the custom property in the signature field dictionary.
 
 @see SignatureField#getSignCustomProperty(String)]]>
      </doc>
    </method>
    <method name="setCustomProperty"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method can be used to add additional custom properties to the signature field dictionary.
 
 @param key A unique key for the custom property
 @param value The vale of the custom property]]>
      </doc>
    </method>
    <method name="getSignCustomProperty" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method can be used to retrieve the values of custom properties in the <i>signature</i> dictionary.
 
 @param key The key for the custom property in the signature dictionary.
  
 @return The value of the custom property in the signature dictionary.
 
 @see SignatureField#getCustomProperty(String)]]>
      </doc>
    </method>
    <method name="getSignContactInfo" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the contact information used in the signature.
 
 @return The contact information used in the signature.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<code>SignatureField</code> holds a signature field. 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.SignatureField -->
  <!-- start interface com.qoppa.pdf.form.TextField -->
  <interface name="TextField"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.form.FormField"/>
    <method name="getDefaultValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the default value for this text field.
 @return The default value of the field]]>
      </doc>
    </method>
    <method name="getMaxLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum number of characters allowed for this text field. 
 @return the max length]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the plain text value of the text field. 
 @return The plain text value of the field 
 
 @see #getRichValue()]]>
      </doc>
    </method>
    <method name="getRichValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rich value of the text field when rich text is enabled, or null if rich text is not enabled.
 @return the rich value of the text field when rich text is enabled, or null if rich text is not enabled.]]>
      </doc>
    </method>
    <method name="isMultiLine" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the 'Multi-Line' flag is on for this text field. Returns false if the flag is off. The 'Multi-Line' flag
 controls wether users are allowed to type-in multi lines in the field. 
 @return true or false]]>
      </doc>
    </method>
    <method name="isRichText" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the 'Rich Text' flag is on for this field.  Returns false if the flag is off.  The 'Rich Text' flag
 indicates the value of this field should be represented as a rich text string and the RV entry of the field dictionary
 specifies the rich text string.
 @return true or false]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the value for this text field.
 @param value the new value.]]>
      </doc>
    </method>
    <method name="setRichValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="richValue" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the rich value for this text field if rich text is enabled.
 @param richValue the new rich value.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setDefaultValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="defaultValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the default value for this text field.
 @param defaultValue the new default value.]]>
      </doc>
    </method>
    <method name="setMaxLen"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxLen" type="int"/>
      <doc>
      <![CDATA[Sets the maximum number of characters allowed in this text field.
 @param maxLen the maximum number of characters allowed in this text field.]]>
      </doc>
    </method>
    <method name="setHorzTextAlign"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="justify" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the text alignment for this field.  The possible values are SwingConstants.LEFT,
 SwingConstants.CENTER and SwingConstants.RIGHT.
 
 @param justify The new value for the text alignment]]>
      </doc>
    </method>
    <method name="getHorzTextAlign" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the horizontal text alignment property for this field.  The possible return values
 are SwingConstants.LEFT, SwingConstants.CENTER and SwingConstants.RIGHT.
 
 @return The value of the horizontal text alignment property.]]>
      </doc>
    </method>
    <field name="FF_MULTILINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field can have multiple lines.]]>
      </doc>
    </field>
    <field name="FF_PASSWORD" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field contains a password.]]>
      </doc>
    </field>
    <field name="FF_FILESELECT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field contains a file path.]]>
      </doc>
    </field>
    <field name="FF_DONOTSPELLCHECK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is not spell checked.]]>
      </doc>
    </field>
    <field name="FF_DONOTSCROLL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field does not scroll.]]>
      </doc>
    </field>
    <field name="FF_COMB" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field is combed.]]>
      </doc>
    </field>
    <field name="FF_RICHTEXT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The field flag indicating the field contains rich text.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<code>TextField</code> holds a text field. 
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.form.TextField -->
</package>
<package name="com.qoppa.pdf.permissions">
  <!-- start class com.qoppa.pdf.permissions.AllPDFPermissions -->
  <class name="AllPDFPermissions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AllPDFPermissions" type="com.qoppa.pdf.permissions.PasswordPermissions, com.qoppa.pdf.permissions.DocMDPPermissions, com.qoppa.pdf.permissions.UsageRightsPermissions, com.qoppa.pdf.permissions.SignaturePermissions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new AllPDFPermissions object that encompasses PasswordPermissions, DocMDPPermissions, and UsageRightsPermissions.
 
 @param passwordPermissions The password permissions.
 @param docMDPPermissions The DocMDP permissions.
 @param usageRightsPermissions The usage rights permissions.
 @param signaturePermissions The signature permissions.]]>
      </doc>
    </constructor>
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow assembling the document:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to assemble the document.]]>
      </doc>
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow changing the document.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to change the document.]]>
      </doc>
    </method>
    <method name="isCreateModifyFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow modifying annotations and changing the document.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to change the document.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow extracting text graphics from the document.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to extract text graphics from the document.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow extracting text graphics for accessibility from the document.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to extract text graphics for accessibility.]]>
      </doc>
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow filling form field.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to fill form fields.]]>
      </doc>
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow modifying annotations.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to modify annotations.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow printing the document.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to print the document.]]>
      </doc>
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns true if all the document's permissions allow printing the document at high resolution.
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Permission to print the document at high resolution.]]>
      </doc>
    </method>
    <method name="getAssembleDocumentRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts assembling the document:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for assembling the document.]]>
      </doc>
    </method>
    <method name="getChangeDocumentRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts changing the document:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for changing the document.]]>
      </doc>
    </method>
    <method name="getExtractTextGraphicsRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts extracting text graphics:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for extracting text graphics.]]>
      </doc>
    </method>
    <method name="getExtractTextGraphicsForAccessibilityRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts extracting text graphics for accessibility:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for extracting text graphics for accessibility.]]>
      </doc>
    </method>
    <method name="getFillFormFieldsRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts filling form fields:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for filling form fields.]]>
      </doc>
    </method>
    <method name="getModifyAnnotsRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts modifying annotations:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for modifying annotations.]]>
      </doc>
    </method>
    <method name="getPrintRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts printing the document:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for printing the document.]]>
      </doc>
    </method>
    <method name="getPrintHighResRestrictions" return="com.qoppa.pdf.permissions.Restrictions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="checkOwnerPassword" type="boolean"/>
      <doc>
      <![CDATA[Returns a new Restrictions object that contains information about which type of Permission restricts printing the document at high resolution:<br>
 
 @param checkOwnerPassword Set to true to check the owner password. If this is true and the
            owner's password has been entered, then this permission will be allowed by
            PasswordPermissions. However, this permission could still be restricted by other
            permission types.
 @return Restrictions for printing the document at high resolution.]]>
      </doc>
    </method>
    <method name="getPasswordPermissions" return="com.qoppa.pdf.permissions.PasswordPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission object for this document. A new permissions object with all permissions is returned if the document is not encrypted.
 
 @return The permission object.]]>
      </doc>
    </method>
    <method name="getDocMDPPermissions" return="com.qoppa.pdf.permissions.DocMDPPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Document Modification Detection and Prevention permissions.  May be null.
 
 @return DocMDP permissions, may be null.]]>
      </doc>
    </method>
    <method name="getUsageRightsPermissions" return="com.qoppa.pdf.permissions.UsageRightsPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Usage Rights permissions.  May be null.
 
 @return Usage Rights permissions, may be null.]]>
      </doc>
    </method>
    <method name="getSignaturePermissions" return="com.qoppa.pdf.permissions.SignaturePermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns permissions related to a digital signature.  May be null.
 
 @return Signature permissions, may be null.]]>
      </doc>
    </method>
    <method name="setEnforceSignaturePermissions"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enforce" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to enforce or ignore signature permissions.
 When set to true, documents that are signed will have restrictions on document assembly and changing the document.  
 When set to false, signatures will not restrict document actions.
 The default value is true.
 
 Note that enforcing signature permissions prevents users from making any changes to signed documents that could invalidate digital signatures present on the document.  
 When a document is signed, it is recommended to clear signature before manipulating it, then apply new signature(s) on the modified document. 
 Only set this flag to false in a controlled environment where signed PDF documents need to be manipulated with the risk of invalidating digital signatures. 
 
 @param enforce Set to true to enforce signature permissions or false to ignore them.  The default value is true.]]>
      </doc>
    </method>
    <method name="isEnforceSignaturePermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if signature permissions will be enforced.
 @return true if signature permissions will be enforced.]]>
      </doc>
    </method>
    <method name="setEnforceDocMDPPermissions"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enforce" type="boolean"/>
      <doc>
      <![CDATA[Sets the flag to enforce or ignore DocMDP permissions.
 When set to true, documents that are certified will have restrictions according to their permissions flag.  
 When set to false, certifying signatures will not restrict document actions.
 The default value is true.
 
 Note that enforcing Doc MDP permissions prevents users from making any changes to signed documents that could invalidate certifying signatures present on the document.  
 When a document is certified, it is recommended to clear signature before manipulating it, then apply new signature(s) on the modified document. 
 Only set this flag to false in a controlled environment where certified PDF documents need to be manipulated with the risk of invalidating certifying signatures. 
 
 @param enforce Set to true to enforce Doc MDP permissions or false to ignore them.  The default value is true.]]>
      </doc>
    </method>
    <method name="isEnforceDocMDPPermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if Doc MDP permissions will be enforced.
 @return true if Doc MDP permissions will be enforced.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class encompasses all of the document's permissions including Password permissions, DocMDP permissions, Signature, and Usage Rights permissions.
 It has methods to check if an operation is allowed to be performed by all the document's permissions.  It can also return a Restrictions object 
 that contains information about which type of permission is restricting an operation.

 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.AllPDFPermissions -->
  <!-- start class com.qoppa.pdf.permissions.DocMDPPermissions -->
  <class name="DocMDPPermissions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.permissions.IPDFPermissions"/>
    <constructor name="DocMDPPermissions" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Create a new DocMDPPermissions object.  The permission level must be 1, 2, or 3.
 @param permissionLevel The permission level.
 @throws PDFException When the permission level is invalid (less than 1 or greater than 3)]]>
      </doc>
    </constructor>
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP does not allow assembling the document.  This will always return false.]]>
      </doc>
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP does not allow changing the document.  This will always return false.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP always allows extracting text graphics.  This will always return true.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP always allows extracting text graphics for accessibility.  This will always return true.]]>
      </doc>
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP permission levels 2 and 3 allow filling existing form fields and signatures.]]>
      </doc>
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP permission level 3 allows annotations to be created, deleted, and modified.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP always allows printing.  This will always return true.]]>
      </doc>
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[DocMDP always allows printing at high resolution.  This will always return true.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class contains information about the DocMDP (Document modification detection and prevention)
 permissions. These permissions are applied when the document contains a certifying signature.
 DocMDP certifying signatures have one of three permission levels.  <br>
 - 1 Does not allow any changes.<br>
 - 2 Allows filling in existing form fields and signatures.<br>
 - 3 Allows filling in existing form fields and signatures, and creating, deleting, and modifying annotations.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.DocMDPPermissions -->
  <!-- start interface com.qoppa.pdf.permissions.IPDFPermissions -->
  <interface name="IPDFPermissions"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if document assembly is allowed.
 @return true if document assembly is allowed.]]>
      </doc>
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if changing the document is allowed.
 @return true if changing the document is allowed.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if extracting text graphics is allowed.
 @return true if extracting text graphics is allowed.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if extracting text graphics for accessibility is allowed.
 @return true if extracting text graphics for accessibility is allowed.]]>
      </doc>
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if filling existing form fields is allowed.
 @return true if filling existing form fields is allowed.]]>
      </doc>
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if modifying annotations is allowed.
 @return true if modifying annotations is allowed.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if printing the document is allowed.
 @return true if printing the document is allowed.]]>
      </doc>
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if printing the document at high resolution is allowed.
 @return true if printing the document at high resolution is allowed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This interface represents document permissions. Use this interface to get information about what
 operations are allowed to be performed.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.permissions.IPDFPermissions -->
  <!-- start class com.qoppa.pdf.permissions.PasswordPermissions -->
  <class name="PasswordPermissions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.permissions.IPDFPermissions"/>
    <constructor name="PasswordPermissions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new PasswordPermissions object with all permissions granted.]]>
      </doc>
    </constructor>
    <constructor name="PasswordPermissions" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new PasswordPermissions object with all permissions set to allperms.

 @param allperms flag for all permissions]]>
      </doc>
    </constructor>
    <constructor name="PasswordPermissions" type="int, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new PasswordPermissions object using perms, the permissions integer representing the 12 permissions bits as specified in the PDF documentation. 

 @param perms the permissions integer representing the 12 permissions bits as specified in the PDF documentation.
 @param ownerPasswordEntered flag indicating wether the owner password was entered when opening the document]]>
      </doc>
    </constructor>
    <method name="getPermFlag" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permissions int representing the 12 permissions bits as specified in the PDF documentation.
 
 @return Permission flags.]]>
      </doc>
    </method>
    <method name="hasAllPermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if all permissions are granted for the document. 
 
 @return true if all permissions are granted.]]>
      </doc>
    </method>
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to assemble the document: <br>
 - insert, rotate or delete pages <br>
 - create bookmarks <br>
 - create thumbnail images<br>
 
 This permission is automatically granted if the permission to change the document is granted (see {@link PasswordPermissions#isChangeDocumentAllowed()}).

 @return Permission to assemble the document.]]>
      </doc>
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to change the document.
 
 When this permission is granted, the 3 following permissions are also granted:<br>
 - Assemble document (see {@link PasswordPermissions#isAssembleDocumentAllowed()})<br>
 - Modify Annotations (see {@link PasswordPermissions#isModifyAnnotsAllowed()})<br>
 - Fill Form Fields (see {@link PasswordPermissions#isFillFormFieldsAllowed()})<br>
 @return Permission to change the document.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to extract text and graphics.
 When this permission is granted, the permission to extract for accessibility is automatically granted (see {@link PasswordPermissions#isExtractTextGraphicsForAccessibilityAllowed()}).
 When this permission is not granted, the permission to extract for accessibility can be set independently.

 @return Permission to extract text and graphics.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to extract text and graphics in support of accessibility to disabled users or other purposes.
 
 This permission is automatically granted when the permission to extract text and graphics is granted (see {@link PasswordPermissions#isExtractTextGraphicsAllowed()}).

 @return Permission to extract text and graphics for accessibility.]]>
      </doc>
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to fill form fields and sign the document.
 
 This permission is automatically granted if the modify annotations permissions is granted (see {@link PasswordPermissions#isModifyAnnotsAllowed()})
 or if the permission to change the document is granted (see {@link PasswordPermissions#isChangeDocumentAllowed()}).
 When this permission is granted and the permission to change document is also granted, create or modify interactive form fields (including signature fields) is allowed.");

 @return Permission to fill form fields.]]>
      </doc>
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to add or modify text annotations in the document.
 
 When this permission is granted, the permission to fill form fields is automatically granted (see {@link PasswordPermissions#isFillFormFieldsAllowed()}).
 When this permission is not granted, then the permission to fill form fields can be granted independently.
 When this permission is granted and the permission to change document is also granted (see {@link PasswordPermissions#isChangeDocumentAllowed()}), create or modify interactive form fields (including signature fields) is allowed.");

 This permission is automatically granted if the permission to change the document is granted (see {@link PasswordPermissions#isChangeDocumentAllowed()}). 
 @return Permission to add or modify text annotations.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to print the document.
 
 This permission is automatically granted if the permission to print the document at high resolution is granted (see {@link PasswordPermissions#isPrintHighResAllowed()})

 @return Permission to print the document.]]>
      </doc>
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the permission to print the document at high resolution.
 
 When this permission is granted, the permission to print the document is automatically granted (see {@link PasswordPermissions#isPrintAllowed()}).
 When this permission is not granted, then the permission to print the document can be granted independently.

 @return Permission to print the document at high resolution.]]>
      </doc>
    </method>
    <method name="ownerPasswordEntered" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return a flag indicating whether the document was opened using the owner password if the document is encrypted. This flag is useful when
 enforcing permissions, if the document was opened with the owner password then application should allow any operations on the PDF document.
 If the document is not encrypted, this flag will return true
 
 @return true if the owner password was used to open the document, false o.w.]]>
      </doc>
    </method>
    <method name="setAssembleDocumentAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to assemble the document. Assembling the document can be done by:<br>
 - inserting, rotating or deleting pages <br>
 - creating bookmarks <br>
 - creating thumbnail images<br>
 
 @see PasswordPermissions#setChangeDocumentAllowed(boolean)
 
 @param allowed the permission to assemble the document.]]>
      </doc>
    </method>
    <method name="setChangeDocumentAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to change the document.
 
 When this permission is granted, the 3 permissions: <br>
 - Assemble Document (see {@link PasswordPermissions#setAssembleDocumentAllowed(boolean)})<br>
 - Modify Annotations (see {@link PasswordPermissions#setModifyAnnotsAllowed(boolean)})<br>
 - Fill Form Fields (see {@link PasswordPermissions#setFillFormFieldsAllowed(boolean)})<br>
  are also automatically granted.
 
 When this permission is not granted, the 3 permissions mentioned above can independently be granted.
 
 @param allowed the permission to change the document]]>
      </doc>
    </method>
    <method name="setExtractTextGraphicsAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to extract text and graphics.
 When this permission is granted, the permission to extract for accessibility is automatically granted (see {@link PasswordPermissions#isExtractTextGraphicsForAccessibilityAllowed()}).
 When this permission is not granted, the permission to extract for accessibility can be set independently.

 @param allowed the permission to extract text and graphics.]]>
      </doc>
    </method>
    <method name="setExtractTextGraphicsForAccessibilityAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to extract text and graphics in support of accessibility to disabled users or other purposes.
 @see PasswordPermissions#isExtractTextGraphicsAllowed()

 @param allowed the permission to extract text and graphics.]]>
      </doc>
    </method>
    <method name="setFillFormFieldsAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to fill form fields and sign the document.

 @see PasswordPermissions#setChangeDocumentAllowed(boolean)
 
 @param allowed the permission to fill form fields.]]>
      </doc>
    </method>
    <method name="setModifyAnnotsAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to add or modify annotations in the document.
 
 When this permission is granted, the permission to fill form fields is automatically granted (see {@link PasswordPermissions#setFillFormFieldsAllowed(boolean fillFormsAllowed)}).
 When this permission is not granted, then the permission to fill form fields can be granted independently.
 When this permission is granted and the permission to change document is also granted (see {@link PasswordPermissions#setChangeDocumentAllowed(boolean)}), create or modify interactive form fields (including signature fields) is allowed.");
   
 @param allowed the permission to add or modify annotations.]]>
      </doc>
    </method>
    <method name="setPermFlag"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="perms" type="int"/>
      <doc>
      <![CDATA[Sets the permissions from the int representing the 12 permissions bits as specified in the PDF documentation.
 
 @param perms the permissions int.]]>
      </doc>
    </method>
    <method name="setPrintAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to print the document.

 @see PasswordPermissions#setPrintHighResAllowed(boolean)
 
 @param allowed to print the document.]]>
      </doc>
    </method>
    <method name="setPrintHighResAllowed"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="allowed" type="boolean"/>
      <doc>
      <![CDATA[Sets the permission to print the document at high resolution.  
 
 When this permission is granted, the Print permission is also automatically granted (see {@link PasswordPermissions#isPrintAllowed()}).
 When this permission is not granted, the Print permission can be granted independently.
 @param allowed the permission to print at high resolution]]>
      </doc>
    </method>
    <field name="ENCRYPTION_RC4_128" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RC4 Encryption - 128 bits]]>
      </doc>
    </field>
    <field name="ENCRYPTION_AES_128" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[AES Encryption - 128 bits]]>
      </doc>
    </field>
    <field name="ENCRYPTION_RC4_40" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[RC4 Encryption - 40 bits]]>
      </doc>
    </field>
    <field name="ENCRYPTION_AES_256" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[AES Encryption 256 bits.  This is only available if the Java JVM provides unlimited strength encryption.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class contains information regarding a PDF document permissions. The list of permissions are the following:
 assemble the document, change the document, extract text and graphics, extract content for accessibility, fill form fields, modify annotations, print, print high resolution.

 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.PasswordPermissions -->
  <!-- start class com.qoppa.pdf.permissions.Restrictions -->
  <class name="Restrictions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Restrictions" type="boolean, boolean, boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isRestricted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if one or more permission types have restrictions.
 @return true if one or more permission types have restrictions.]]>
      </doc>
    </method>
    <method name="isRestrictedByPasswordPermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if PasswordPermissions have restrictions.
 @return true if PasswordPermissions have restrictions.]]>
      </doc>
    </method>
    <method name="isRestrictedByDocMDPPermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if DocMDPPermissions have restrictions.
 @return true if DocMDPPermissions have restrictions.]]>
      </doc>
    </method>
    <method name="isRestrictedByUsageRightsPermissions" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if UsageRightsPermissions have restrictions.
 @return true if UsageRightsPermissions have restrictions.]]>
      </doc>
    </method>
    <method name="isRestrictedBySignature" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[The Restrictions class contains information about the type of Permission that is restricting an operation.
 Document permissions may be restricted by Password permissions, DocMDP permissions, and/or Usage Rights permissions.

 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.Restrictions -->
  <!-- start class com.qoppa.pdf.permissions.SignaturePermissions -->
  <class name="SignaturePermissions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.permissions.IPDFPermissions"/>
    <constructor name="SignaturePermissions" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This class contains information regarding Signature permissions. The list of
 permissions are the following: assemble the document, change the document,
 extract text and graphics, extract content for accessibility, fill form
 fields, modify annotations, print, print high resolution.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.SignaturePermissions -->
  <!-- start class com.qoppa.pdf.permissions.UsageRightsPermissions -->
  <class name="UsageRightsPermissions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.permissions.IPDFPermissions"/>
    <constructor name="UsageRightsPermissions" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new UsageRights instance.
 @param formFill Set to true if form fill is allowed.]]>
      </doc>
    </constructor>
    <method name="isAssembleDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage rights never allow assembling the document.  This method will always return false.]]>
      </doc>
    </method>
    <method name="isChangeDocumentAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights never allow changing the document.  This method will always return false.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights always allow extracting text graphics.  This method will always return true.]]>
      </doc>
    </method>
    <method name="isExtractTextGraphicsForAccessibilityAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights always allow extracting text graphics for accessibility.  This method will always return true.]]>
      </doc>
    </method>
    <method name="isFillFormFieldsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if the Usage Rights allow filling existing form fields and signatures.]]>
      </doc>
    </method>
    <method name="isModifyAnnotsAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights always allow modifying annotations.  This method will always return true.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights always allow printing.  This method will always return true.]]>
      </doc>
    </method>
    <method name="isPrintHighResAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Usage Rights always allow printing in high resolution.  This method will always return true.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class contains information about Usage Rights.  Usage rights are used by PDF documents that have been
 "Adobe Reader Enabled", they protect the document from most changes while still allowing modifications to annotations 
 and in some cases filling existing form fields. Enforcing Usage Rights permissions when manipulating a document will 
 preserve the "Adobe Reader Enablement" status and avoid a warning message when opening the document in Adobe Reader.
 If not concerned with the Adobe Reader Enablement status, it is possible to simply clear the Usage Rights permissions. 
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.permissions.UsageRightsPermissions -->
</package>
<package name="com.qoppa.pdf.resources">
  <!-- start interface com.qoppa.pdf.resources.IFontResource -->
  <interface name="IFontResource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFontName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Return the name of this font.
 @return The name of this font resource.]]>
      </doc>
    </method>
    <method name="isEmbedded" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a flag indicating if this font is embedded in the document.
 
 @return Flag, true if the font is embedded, false o.w.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of a font resource in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.resources.IFontResource -->
  <!-- start interface com.qoppa.pdf.resources.IImageResource -->
  <interface name="IImageResource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method returns a BufferedImage object for the image embedded in the PDF document.
 @return The image in the image resource.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getWidth" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Return the width of the image, in pixels.
 
 @return The width of the image in pixels.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getHeight" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Return the height of the image, in pixels.
 @return The height of the image in pixels.
 @throws PDFException if there is an error reading the image.]]>
      </doc>
    </method>
    <method name="getCompression" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Return the compression used for this image.  The string returned by this method
 is the internal PDF name for the image compression.  Some common image compression methods:<br>
 <ul>
 <li>DCTDecode - JPEG</li>
 <li>JPXDecode - JPEG 2000</li>
 <li>CCITTFaxDecode - CCITT Fax Group 3 or Group 4</li>
 <li>JBIG2Decode - JBIG 2</li>
 @return the name of the image compression
 @throws PDFException if there is an error reading the image.]]>
      </doc>
    </method>
    <method name="getColorSpace" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the name of the color space used for this image.
 @return the color space name for the image
 @throws PDFException if there is an error reading the image.]]>
      </doc>
    </method>
    <method name="getNumComponents" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the number of color components in the image.
 @return the number of color components
 @throws PDFException if there is an error reading the image.]]>
      </doc>
    </method>
    <method name="getBitsPerComponent" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the number of bits per component.
 @return the number of bits per component.
 @throws PDFException if there is an error reading the image.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Representation of an image resource in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.resources.IImageResource -->
  <!-- start interface com.qoppa.pdf.resources.IResourceManager -->
  <interface name="IResourceManager"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="listImages" return="java.util.List&lt;? extends com.qoppa.pdf.resources.IImageResource&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of image resources in the PDF document.
 
 @return a list of IImageResource objects.]]>
      </doc>
    </method>
    <method name="listFonts" return="java.util.List&lt;? extends com.qoppa.pdf.resources.IFontResource&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a list of all font resources in the PDF document.
 
 @return a list of IFontResource objects.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[This class provides access to information about some objects in a PDF document
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.resources.IResourceManager -->
</package>
<package name="com.qoppa.pdf.settings">
  <!-- start class com.qoppa.pdf.settings.ImageColorSpace -->
  <class name="ImageColorSpace" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="COLORSPACE_RETAIN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Retain image current color space.]]>
      </doc>
    </field>
    <field name="COLORSPACE_RGB" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convert image to RGB.]]>
      </doc>
    </field>
    <field name="COLORSPACE_GRAY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convert image to grayscale.]]>
      </doc>
    </field>
    <field name="COLORSPACE_CMYK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convert image to CMYK.]]>
      </doc>
    </field>
    <field name="COLORSPACE_BW" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Convert image to B/W (1 bit grayscale).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[This class holds constants which describe the color space of an Image when importing or updating an image.]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.settings.ImageColorSpace -->
  <!-- start class com.qoppa.pdf.settings.ImageCompression -->
  <class name="ImageCompression" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="ImageCompression"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a default image parameters object.  Compression is set to COMPRESSION_DEFLATE.]]>
      </doc>
    </constructor>
    <constructor name="ImageCompression" type="int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an ImageSettings object with the given compression type.
 @param compression The type of compression.]]>
      </doc>
    </constructor>
    <constructor name="ImageCompression" type="int, float"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs an ImageSettings object with the given compression type and quality setting.  Currently,
 the quality setting is only used when the compression type is set to COMPRESSION_JPEG.
 
 @param compression The type of compression.
 @param quality The quality setting.]]>
      </doc>
    </constructor>
    <method name="getCompression" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the compression type used when writing images to the PDF document.  This method
 will return one of the values: COMPRESSION_DEFLATE, COMPRESSION_JPEG, COMPRESSION_JBIG2, and COMPRESSION_JPEG2000.
 
 @return The type of compression.]]>
      </doc>
    </method>
    <method name="setCompression"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="compression" type="int"/>
      <doc>
      <![CDATA[Sets the compression type used when writing images to the PDF document.  The types
 supported are COMPRESSION_DEFLATE, COMPRESSION_JPEG, COMPRESSION_JBIG2, and COMPRESSION_JPEG2000.
 
 @param compression The new compression type.]]>
      </doc>
    </method>
    <method name="getQuality" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current quality settings.  This value is only used when the compression 
 type is set to JPEG and ranges from 0.1 to 1.0.
 
 @return The current quality settings]]>
      </doc>
    </method>
    <method name="setQuality"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="quality" type="float"/>
      <doc>
      <![CDATA[Sets the current quality setting.  This value is only used when the compression 
 type is set to JPEG and ranges from 0.1 to 1.0.
 
 @param quality  The new compression quality.  The value will be bounded to >= 0.1 and <= 1.0]]>
      </doc>
    </method>
    <method name="clone" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Clones this object.
 
 @return A clone of this object.]]>
      </doc>
    </method>
    <field name="COMPRESSION_DEFLATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use Deflate compression when saving images to the PDF document.]]>
      </doc>
    </field>
    <field name="COMPRESSION_JPEG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use JPEG compression when saving images to the PDF document.]]>
      </doc>
    </field>
    <field name="COMPRESSION_JBIG2" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use JBIG2 compression when saving images to the PDF document.]]>
      </doc>
    </field>
    <field name="COMPRESSION_JPEG2000" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use Jpeg2000 compression when saving images to the PDF document.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[The class provides settings to decide what type of image compression to use (Deflate, JPEG, JPEG2000 or JBIG2)
 and in the case of JPEG, what the compression quality should be.
 <br><br>
 Use instances of this object to make a call to PDFGraphics.setImageCompression. After the
 call is made, all images drawn to the graphics object will be output to the PDF in the
 appropriate format.
 <br><br>
 JBIG2 compression is only available when the optional JBIG2 module has been purchased.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.settings.ImageCompression -->
</package>
<package name="com.qoppa.pdf.source">
  <!-- start class com.qoppa.pdf.source.ByteArrayPDFSource -->
  <class name="ByteArrayPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="ByteArrayPDFSource" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a source that uses a byte array to hold the PDF content.
 The name and path of the source will be set to null when this constructor is used.
 
 @param content The byte array that holds the PDF content.]]>
      </doc>
    </constructor>
    <constructor name="ByteArrayPDFSource" type="byte[], java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a source that uses a byte array to hold the PDF content.  The name
 and path of the PDF source will be initialized to the arguments.
 
 @param content The byte array that holds the PDF content.
 
 @param name THe name of the source, returned by the getName() method
 @param path THe path to the source, returned by the getPath() method.]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the array of bytes that backs this PDF source.
 @return The array of bytes that holds the PDF content.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface when the document comes from a byte array.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.ByteArrayPDFSource -->
  <!-- start class com.qoppa.pdf.source.EmptyPDFSource -->
  <class name="EmptyPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="EmptyPDFSource"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="EmptyPDFSource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a new empty PDF source with a given name.  This constructor can be used to create
 new blank documents, with an initialized name.
 
 @param name The name of the document.]]>
      </doc>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface when the document has no source, such as when creating a new document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.EmptyPDFSource -->
  <!-- start class com.qoppa.pdf.source.FilePDFSource -->
  <class name="FilePDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="FilePDFSource" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </constructor>
    <constructor name="FilePDFSource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getFile" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file that this PDF source represents.
 
 @return The file that backs this PDF source.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface when the document comes from a file.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.FilePDFSource -->
  <!-- start class com.qoppa.pdf.source.InputStreamPDFSource -->
  <class name="InputStreamPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="InputStreamPDFSource" type="java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="InputStreamPDFSource" type="java.io.InputStream, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface when the document comes from an input stream.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.InputStreamPDFSource -->
  <!-- start class com.qoppa.pdf.source.MBBPDFSource -->
  <class name="MBBPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="MBBPDFSource" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </constructor>
    <constructor name="MBBPDFSource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getFile" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file that this PDF source represents.
 
 @return The file that backs this PDF source.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface that uses a MappedByteBuffer.  This class opens a file
 using a MappedByteBuffer and fulfills the PDFSource interface by passing the calls on to the buffer.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.MBBPDFSource -->
  <!-- start interface com.qoppa.pdf.source.PDFContent -->
  <interface name="PDFContent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="position" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Set the current position of the content and read the next byte.
   
 @param position
 @return The byte read from the content.
 @throws IOException]]>
      </doc>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="position" type="long"/>
      <param name="buffer" type="byte[]"/>
      <param name="offset" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Read the passed in number of bytes into a byte array.  The function should start reading from "position"
 in the content and should insert the bytes at the passed in offset into the byte array.  If there are
 less than "len" bytes in the content, the method should read to the end of the content and return the number
 of bytes.read. 
 
 @param position The location in the content at which to start reading.
 @param buffer The byte array into which to insert the read bytes.
 @param offset The offset in to the byte array at which to insert the read bytes.
 @param len The number of bytes to read.
 @return the number of bytes read.
 @throws IOException]]>
      </doc>
    </method>
    <method name="length" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Get the length of the content.
 @return The length of the content.
 @throws IOException]]>
      </doc>
    </method>
    <method name="writeContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write the contents to an output stream.
 
 @param outStream
 @throws IOException]]>
      </doc>
    </method>
    <method name="writeContents"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="start" type="long"/>
      <param name="length" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Write a section of the content to an output stream.
 @param outStream
 @param start
 @param length
 @throws IOException]]>
      </doc>
    </method>
    <method name="setBytes"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="byte[]"/>
      <param name="position" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Modifies some of the content in the PDF content.
 
 @param content The new content
 @param position The position at which to update the PDF content.
 @throws IOException]]>
      </doc>
    </method>
    <method name="append"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="addContent" type="byte[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Append content to this PDF.  This method is used when modifying a PDF
 by appending modified objects to the content.
 
 @param addContent The additional content.
 @throws IOException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close or release any resources that this object holds.  This method is used when
 the PDF content will no longer be accessed.  The intent is to proactively release
 any resources held by this object without waiting for finalization, such as open
 files or network connections.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface used to read PDF content. PDF content is read randomly and on
 demand, objects are located at arbitrary locations in a PDF file and we need
 to be able to read objects only when we need them. This interface provides
 method to read the contents from an arbitrary source (i.e. not a file).
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.source.PDFContent -->
  <!-- start interface com.qoppa.pdf.source.PDFSource -->
  <interface name="PDFSource"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the document.  The name of the document is normally the file name.]]>
      </doc>
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the full path to the document.  The path of the document should normally be sufficient to uniquely
 identify the document.  If the source is a file, the path is the full path to the file.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
      <doc>
      <![CDATA[Tests if this source is equal to another source.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns an object that implements PDFContent, that contains and can deliver the contents of the PDF document.
 
 @return Returns an object that implements the PDFContent interface.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Represents a source of PDF content.  This interface is used to provide PDF content to the library
 when loading a document.  There are a number of default implementations in this package to load
 PDF documents from files, byte arrays, input streams and URLs.  A host application can also create
 its own implementation if the source of the PDF content is custom.
 
 @author Qoppa Software]]>
    </doc>
  </interface>
  <!-- end interface com.qoppa.pdf.source.PDFSource -->
  <!-- start class com.qoppa.pdf.source.RAFilePDFSource -->
  <class name="RAFilePDFSource" extends="com.qoppa.pdf.source.FilePDFSource"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RAFilePDFSource" type="java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new <code>RAFilePDFSource</code> instance using the given
 <code>File</code>.
 
 @param source
            A source file
 @throws PDFException
             If the <code>source</code> file does not exist]]>
      </doc>
    </constructor>
    <constructor name="RAFilePDFSource" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new <code>RAFilePDFSource</code> instance using the given
 fileName.
 
 @param fileName
            A fileName string
 @throws PDFException
             If the <code>File</code> created with <code>fileName</code>
             does not exist]]>
      </doc>
    </constructor>
    <constructor name="RAFilePDFSource" type="java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new <code>RAFilePDFSource</code> instance using the given
 fileName and boolean parameter indicating if the file should be locked.
 To unlock, use <code>getContent().close()</code>.
 
 @param fileName
            A fileName string
 @param lockFile
            If <code>true</code>, the internal
            <code>RandomAccessFile</code> will be locked, otherwise it
            will not be locked
 @throws PDFException
             If the <code>File</code> created with <code>fileName</code>
             does not exist
 @see PDFContent]]>
      </doc>
    </constructor>
    <constructor name="RAFilePDFSource" type="java.io.File, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new <code>RAFilePDFSource</code> instance using the given
 <code>File</code> and boolean parameter indicating if the file should be
 locked. To unlock, use <code>getContent().close()</code>.
 
 @param source
            A source file
 @param lockFile
            If <code>true</code>, the internal
            <code>RandomAccessFile</code> will be locked, otherwise it
            will not be locked
 @throws PDFException
             If the <code>source</code> file does not exist
 @see PDFContent]]>
      </doc>
    </constructor>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface that uses a RandomAccessFile. This
 class opens a file using a RandomAccessFile and fulfills the PDFSource
 interface by passing the calls on to the file.
 
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.RAFilePDFSource -->
  <!-- start class com.qoppa.pdf.source.URLOnDemandPDFSource -->
  <class name="URLOnDemandPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="URLOnDemandPDFSource" type="java.net.URL, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Create a PDFSource to read a PDF from a URL "on demand".  On demand means that the PDF is read
 one sector at a time, when the contents of that sector are needed to render the PDF content.  This
 source depends on the HTTP server supporting the HTTP Range property.
 
 @param url The URL to the PDF document.
 @param storeType The type of local storage to use.  This can be STORE_BYTE_ARRAY to keep local content
 in a byte array, or STORE_TEMP_FILE to store the contents in a temporary file.
 @throws PDFException]]>
      </doc>
    </constructor>
    <constructor name="URLOnDemandPDFSource" type="java.net.URL, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Create a PDFSource to read a PDF from a URL "on demand".  On demand means that the PDF is read
 one sector at a time, when the contents of that sector are needed to render the PDF content.  This
 source depends on the HTTP server supporting the HTTP Range property.
 
 @param url The URL to the PDF document.
 @param tempFile A temporary file used to store the PDF content locally.
 @throws PDFException]]>
      </doc>
    </constructor>
    <method name="setSectorSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sectorSize" type="int"/>
      <doc>
      <![CDATA[Set the sector size to use when reading the PDF.  This value implies a compromise:  with larger sector
 sizes, there is less HTTP requests, but more of the document is read at load time.  The default sector
 size is set at 64 KB.
 @param sectorSize]]>
      </doc>
    </method>
    <method name="getSectorSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current sector size.
 @return The sector size.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
      <doc>
      <![CDATA[Compares this PDF source to anothe URLOnDemandPDFSource for equality.]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the name of this PDF source.]]>
      </doc>
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL path to the PDF document.]]>
      </doc>
    </method>
    <method name="getURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL where the PDF came from. 
 
 @return The URL location of the PDF document.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Create an object to implement PDFContent.]]>
      </doc>
    </method>
    <field name="STORE_BYTE_ARRAY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="STORE_TEMP_FILE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Implementation of the PDFSource interface that will load sections of a PDF on demand.  This
 This PDFSource can be used to display the first page of the PDF before the whole PDF is loaded.
 The source creates a local copy of the PDF either in a byte array or a local temp file and
 downloads sections of the PDF only when they are accessed.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.URLOnDemandPDFSource -->
  <!-- start class com.qoppa.pdf.source.URLPDFSource -->
  <class name="URLPDFSource" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.qoppa.pdf.source.PDFSource"/>
    <constructor name="URLPDFSource" type="java.net.URL"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </constructor>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="com.qoppa.pdf.source.PDFSource"/>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL path to the PDF document.]]>
      </doc>
    </method>
    <method name="getURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the URL where the PDF came from. 
 
 @return The URL location of the PDF document.]]>
      </doc>
    </method>
    <method name="getContent" return="com.qoppa.pdf.source.PDFContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Implementation of the PDFSource interface when the document comes from a URL.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdf.source.URLPDFSource -->
</package>
<package name="com.qoppa.pdfAssemble">
  <!-- start class com.qoppa.pdfAssemble.PDFAssemble -->
  <class name="PDFAssemble" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFAssemble"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a blank PDFAssemble object.  This constructor can
 be used to create a new document entirely from other documents.]]>
      </doc>
    </constructor>
    <constructor name="PDFAssemble" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from an InputStream.
 
 @param   inStream InputStream to read the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFAssemble" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param	fileName	Name of the PDF file.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFAssemble" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param	url	Location of the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object  becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages in this document.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)
 
 @return DocumentInfo Object containing header information for the document.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFFields.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="appendDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendDoc" type="com.qoppa.pdfAssemble.PDFAssemble"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Appends a PDF document to this document. All the pages in appendDoc will be added at the end of this document.
 
 @param appendDoc Document to be appended.]]>
      </doc>
    </method>
    <method name="appendPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="source" type="com.qoppa.pdfAssemble.PDFAssemble"/>
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Appends a page to this document.
 
 @param source The document from which to append the page.
 @param pageIndex The index of the page to append from the source document.]]>
      </doc>
    </method>
    <method name="insertPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceDoc" type="com.qoppa.pdfAssemble.PDFAssemble"/>
      <param name="srcPageIndex" type="int"/>
      <param name="dstPageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Inserts a page into this document at the given index. If the index is less than 0, the page is inserted as the first page. If the index is greater than
 the number of pages in the document, the page is appended to the document.
 
 @param sourceDoc The document from which to append the page.
 @param srcPageIndex The index of the page to append from the source document.\
 @param dstPageIndex The index of the page at which to insert the new page.]]>
      </doc>
    </method>
    <method name="deletePage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Deletes a page from this document. If the index is out of bounds, (index < 0 or index >= number of pages) this method has no effect on the document.
 
 @param pageIndex Index of the page to remove.]]>
      </doc>
    </method>
    <method name="deletePages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Deletes a range of pages in the document.  The start and end index are 0 based and inclusive.
 
 @param startIndex The index of the first page to delete.
 @param endIndex The index of the last page to delete, inclusive.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="extractPages" return="com.qoppa.pdfAssemble.PDFAssemble"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <param name="outputFile" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates and saves a new PDF document that contains a range of pages from this document. 
 
 @param startIndex The first page to include in the new document.
 @param endIndex The last page to include in the new document.
 @param outputFile The path to the file to save the PDF document in.
 
 @throws IOException Any errors writing the file
 @throws PDFException Any errors extracting the pages]]>
      </doc>
    </method>
    <method name="extractPages" return="com.qoppa.pdfAssemble.PDFAssemble"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startIndex" type="int"/>
      <param name="endIndex" type="int"/>
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates and saves a new PDF document that contains a range of pages from this document. 
 
 @param startIndex The first page to include in the new document.
 @param endIndex The last page to include in the new document.
 @param outStream The output stream to write the new document to.
 
 @throws IOException Any errors writing the file
 @throws PDFException Any errors extracting the pages]]>
      </doc>
    </method>
    <method name="createRootBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new root bookmark and saves it in the document catalog. When this method is called, any existing bookmarks will be discarded and the new root
 bookmark will be put in place. Initially, the new root bookmark will have no children (no entries will be displayed in the bookmarks pane when viewing
 the document).
 
 @return Bookmark The new root bookmark.]]>
      </doc>
    </method>
    <method name="getRootBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 'root' bookmark. Bookmarks form a tree structure in a document.
 
 @return Bookmark The root bookmark for this document.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to a file.
 
 @param   fileName    Name of the file to save the document.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to an output stream.
 
 @param   outStream   OutputStream where the document will be written to.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ownerPassword" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFAssemble object that the permissions password is known, so
 all permissions are granted.
 
 @param ownerPassword
            The permissions password
 @return true if the password was validated
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getPDFPermissions" return="com.qoppa.pdf.permissions.AllPDFPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AllPDFPermissions object which encompasses this document's PasswordPermissions, DocMDPPermissions, and UsageRightsPermissions.]]>
      </doc>
    </method>
    <method name="setInitialPageMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageMode" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Changes the value of the page mode viewer preference in the document.  The page mode is
 used when the document is opened in a PDF Viewer.
 
 @param pageMode The new page mode.  This value has to be one of:<br>
 PAGEMODE_USENONE: Neither document outline nor thumbnail images are visible.<br>
 PAGEMODE_USEOUTLINES: Document outline visible.<br>
 PAGEMODE_USETHUMBS: Thumbnail images visible.<br>
 PAGEMODE_FULLSCREEN: Full screen mode, with no menu bar, window controls, or any other window visible.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setInitialPageLayout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageLayout" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Changes the value of the page layout key for this document.  This determines
 the layout of the page when initially opened.
 
 @param pageLayout The new page mode.  This value has to be one of:<br>
 PAGELAYOUT_SINGLEPAGE: Display one page at a time.<br>
 PAGELAYOUT_ONECOLUMN: Display the page in one column (single page continuous).<br>
 PAGELAYOUT_TWOCOLUMNLEFT: Display the page in two columns (two facing continuous).<br>
 PAGELAYOUT_TWOPAGELEFT: Display two pages at a time (two facing).
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setInitialPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="scale" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the initial page and scale to use when this document is opened with a PDF viewer.
 
 @param pageIndex The index of the page (0 based) to display upon opening the document.  If this value is -1, this method will clear
					the initial page entry.
 @param scale The scale to use when displaying the page.  This argument can be one of the following<br>
 			<ul>
 			<li>(percent scale, as a number) If this argument is a number, it will be interpreted as a percentage scale, 100 == actual size</li>
 			<li>"FitH" - Adjust the scale to fit the page to width.</li>
 			<li>"FitV" - Adjust the scale to fit the page to height.</li>
 			<li>"Fit" - Adjust the scale to fit the page to width and height</li>
 			<li>"FitBH" - Adjust the scale to fit the page's bounding box to width.
 			<li>"FitActual" - 100% Scale.</li>]]>
      </doc>
    </method>
    <method name="addGoToPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bookmark" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a GoToPage action to the Bookmark Parameter.
 
 @param bookmark The Bookmark to add the GotoPage Action to
 @param pageNum The page number to display with this bookmark
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addGoToPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bookmark" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="scale" type="double"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a GoToPage action to the Bookmark Parameter that uses x and y coordinates and a zoom scale.
 
 @param bookmark The Bookmark to add the GotoPage Action to
 @param pageNum The page number to display with this bookmark
 @param x The x coordinate to display of the page
 @param y The y coordinate to display of the page
 @param scale The zoom scale as a decimal. 0.5 will be 50% zoom, 5 will be 500%. Set to -1 or 0 to retain the current zoom value
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addGoToPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bookmark" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <param name="zoomMode" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a GoToPage action to the Bookmark Parameter with a zoom mode.
 
 @param bookmark The Bookmark to add the GotoPage Action to
 @param pageNum The page number to display with this bookmark
 @param zoomMode A type of zoom defined by the following constants:<br>
 GotoPageAction.ZOOM_FIT - Zoom to fit the page horizontally and vertically.<br>
 GotoPageAction.ZOOM_FIT_HORIZONTAL - Zoom to fit the page horizontally.<br>
 GotoPageAction.ZOOM_FIT_VERTICAL - Zoom to fit the page vertically.<br>
 GotoPageAction.ZOOM_EXPLICIT - Set the zoom scale explicitly.  When using this mode, the viewer will use the value in TargetZoom for the scale.<br>
 GotoPageAction.ZOOM_RETAIN - Do not adjust the zoom scale, retain the current value.<br>
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a Bookmark with a GoToPage action, and Add it as a child to the parent Bookmark parameter
 
 @param parent The parent Bookmark of the Bookmark to be created
 @param pageNum The page number to display with this bookmark
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="scale" type="double"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a Bookmark with a GoToPage action that uses x and y coordinates and a zoom scale. Adds it as a child to the parent Bookmark parameter
 
 @param parent The parent Bookmark of the Bookmark to be created
 @param pageNum The page number to display with this bookmark
 @param x The x coordinate to display of the page
 @param y The y coordinate to display of the page
 @param scale The zoom scale as a decimal. 0.5 will be 50% zoom, 5 will be 500%. Set to -1 or 0 to retain the current zoom value
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parent" type="com.qoppa.pdf.Bookmark"/>
      <param name="pageNum" type="int"/>
      <param name="zoomMode" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a Bookmark with a GoToPage action with a zoom mode, and Add it as a child to the parent Bookmark parameter
 
 @param parent The parent Bookmark of the Bookmark to be created
 @param pageNum The page number to display with this bookmark
 @param zoomMode A type of zoom defined by the following constants:<br>
 GotoPageAction.ZOOM_FIT - Zoom to fit the page horizontally and vertically.<br>
 GotoPageAction.ZOOM_FIT_HORIZONTAL - Zoom to fit the page horizontally.<br>
 GotoPageAction.ZOOM_FIT_VERTICAL - Zoom to fit the page vertically.<br>
 GotoPageAction.ZOOM_EXPLICIT - Set the zoom scale explicitly.  When using this mode, the viewer will use the value in TargetZoom for the scale.<br>
 GotoPageAction.ZOOM_RETAIN - Do not adjust the zoom scale, retain the current value.<br>
 @throws PDFException]]>
      </doc>
    </method>
    <field name="MAGNIFICATION_FIT_WIDTH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial magnification: Fit to width]]>
      </doc>
    </field>
    <field name="MAGNIFICATION_FIT_HEIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial magnification: Fit to height]]>
      </doc>
    </field>
    <field name="MAGNIFICATION_FIT_PAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial magnification: Fit page (both width and height)]]>
      </doc>
    </field>
    <field name="MAGNIFICATION_FIT_ACTUAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial magnification: 100% Scale]]>
      </doc>
    </field>
    <field name="PAGEMODE_USENONE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  Neither document outline nor thumbnail images visible]]>
      </doc>
    </field>
    <field name="PAGEMODE_USEOUTLINES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  Document outline visible]]>
      </doc>
    </field>
    <field name="PAGEMODE_USETHUMBS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  Thumbnail images visible]]>
      </doc>
    </field>
    <field name="PAGEMODE_FULLSCREEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  Full-screen mode, with no menu bar, window controls, or any other window visible]]>
      </doc>
    </field>
    <field name="PAGEMODE_USEOC" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  (PDF 1.5) Optional content group panel visible]]>
      </doc>
    </field>
    <field name="PAGEMODE_USEATTACHMENTS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page mode:  (PDF 1.6) Attachments panel visible]]>
      </doc>
    </field>
    <field name="PAGELAYOUT_SINGLEPAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page layout: Single page]]>
      </doc>
    </field>
    <field name="PAGELAYOUT_ONECOLUMN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page layout: Single page continuous]]>
      </doc>
    </field>
    <field name="PAGELAYOUT_TWOCOLUMNLEFT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page layout: Two pages continuous]]>
      </doc>
    </field>
    <field name="PAGELAYOUT_TWOPAGELEFT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Setting for the initial page layout: Two pages]]>
      </doc>
    </field>
    <doc>
    <![CDATA[The <code>PDFAssemble</code> class provides methods to assemble and disassemble PDF documents. 
 The PDFAssemble class can load existing documents (or start from a blank document) and can add pages
 from other documents or delete pages in the document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfAssemble.PDFAssemble -->
  <!-- start class com.qoppa.pdfAssemble.PDFAssemble.KeyInfoAssemble -->
  <class name="PDFAssemble.KeyInfoAssemble" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFAssemble.KeyInfoAssemble"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFAssemble.jar that can generate server
 key requests, validate a key, and display server information. Valid usage
 is:
 </p>
 <p>
 <strong>java -jar jPDFAssemble.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFAssemble.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFAssemble.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfAssemble.PDFAssemble.KeyInfoAssemble -->
</package>
<package name="com.qoppa.pdfFields">
  <!-- start class com.qoppa.pdfFields.PDFFields -->
  <class name="PDFFields" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFFields" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from an InputStream.
 
 @param   inStream InputStream to read the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFFields" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param	fileName	Name of the PDF file.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFFields" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param	url	Location of the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)
 
 @return DocumentInfo Object containing header information for the document.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFFields.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="exportAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export AcroForm field data to an output stream in FDF format.
 
 @param outStream The output stream to write the data to.
 @param pathToPDFFile is the relative path from the fdf file to the pdf file name. This parameter can be left null. 
 This parameter is used to fill the pdf file name entry in the FDF file, the file entry will be set to pathToPDFFile + fileNa
 The file entry is used when you open an fdf file to be able to locate the corresponding pdf file. 
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 Example of pathToPDFFile ../qoppa/mydir]]>
      </doc>
    </method>
    <method name="exportAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to a file in FDF format.
 
 @param fileName The name of the file to export the data to.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.]]>
      </doc>
    </method>
    <method name="exportAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Export AcroForm field data to an output stream in XFDF format.
 
 @param outStream The output stream to write the data to.
 @param pathToPDFFile is the relative path from the fdf file to the pdf file name. This parameter can be left null. 
 This parameter is used to fill the pdf file name entry in the FDF file, the file entry will be set to pathToPDFFile + fileNa
 The file entry is used when you open an fdf file to be able to locate the corresponding pdf file. 
 Example of pathToPDFFile ../qoppa/mydir
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="exportAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports AcroForm field data to a file in XML format.
 
 @param fileName The name of the file to export the data to.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAsXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports XFA field data to a file in XDP format.
 
 @param fileName The name of the file to export the data to.
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 @throws IOException If there are any errors opening or writing to the file.<br>
 PDFException If there is no no XFA form defined in the PDF document.]]>
      </doc>
    </method>
    <method name="exportAsXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="exportEmptyFields" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Export XFA field data to an output stream in XDP format.
 
 @param outStream The output stream to write the data to.
 @param pathToPDFFile is the relative path from the xdp file to the pdf file name. This parameter can be left null. 
 This parameter is used to fill the pdf file name reference in the XDP file, the file entry will be set to pathToPDFFile + fileName
 @param exportEmptyFields flag to indicate whether empty or null fields should be exported.
 <br><br>
 Example of pathToPDFFile ../qoppa/mydir
 
 @throws IOException If there are any errors writing to the output stream.<br>
 PDFException If there is no no XFA form defined in the PDF document.]]>
      </doc>
    </method>
    <method name="flattenFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintButtons" type="boolean"/>
      <param name="paintNonPrintableFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the form fields in the current PDF document. This method paints the content of the fields directly 
 into the pages and remove the fields themselves from the document. 
 @param paintButtons Flag to indicate whether push buttons should be painted or not.
 @param paintNonPrintableFields Flag to indicate whether non-printable fields should be painted or not.]]>
      </doc>
    </method>
    <method name="flattenFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintButtons" type="boolean"/>
      <param name="paintOnlyImageButtons" type="boolean"/>
      <param name="paintNonPrintableFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the form fields in the current PDF document. This method paints the content of the fields directly 
 into the pages and remove the fields themselves from the document. 
 @param paintButtons Flag to indicate whether push buttons should be painted or not.
 @param paintOnlyImageButtons Flag to indicate that push buttons should only be painted if they have an image (only matters if paintButtons is true)
 @param paintNonPrintableFields Flag to indicate whether non-printable fields should be painted or not.]]>
      </doc>
    </method>
    <method name="getFieldList" return="java.util.Vector&lt;com.qoppa.pdf.form.FormField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the list of fields in this AcroForm.  The objects in the returned
 Vector are of type FormField.
 
 @return A Vector of FormField objects.]]>
      </doc>
    </method>
    <method name="getField" return="com.qoppa.pdf.form.FormField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <doc>
      <![CDATA[Gets a field by name.  As fields can be hierarchical, names of fields
 can be hierarchical:  choices.choice1 would refer to a field named
 choice1 whose parent is a field named choices.
 
 @param fieldName The name of a field in hierarchical form.
 
 @return AFField The field referenced by the name, null if there is no field by that name.]]>
      </doc>
    </method>
    <method name="importFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm field data from an input stream in FDF format.
 
 @param inStream The input stream in FDF format to read the data from.]]>
      </doc>
    </method>
    <method name="importFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm field data from a file in FDF Format.
 
 @param fileName The name of the FDF file to import the data from.]]>
      </doc>
    </method>
    <method name="importXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm field data from an input stream in XML format.
 
 @param inStream The input stream in XML format to read the data from.]]>
      </doc>
    </method>
    <method name="importXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Import XFA field data from a file in XDP Format.
 
 @param fileName The name of the XDP file to import the data from.
 
 @throws PDFException, IOException]]>
      </doc>
    </method>
    <method name="importXDP"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Import XFA field data from an input stream in XDP format.
 
 @param inStream The input stream in XDP format to read the data from.
 
 throws PDFException, IOException]]>
      </doc>
    </method>
    <method name="importXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import AcroForm fields data from a file in XML Format.
 
 @param fileName The name of the XML file to import the data from.]]>
      </doc>
    </method>
    <method name="resetFields"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Reset fields values to their default value. If there is no default values, then value is set to null.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to a file.
 
 @param   fileName    Name of the file to save the document.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to an output stream.
 
 @param   outStream   OutputStream where the document will be written to.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="hasXFA" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data.

 @return true if this form has XFA data, otherwise false]]>
      </doc>
    </method>
    <method name="isXFAStatic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data, and it is a Static Form.

 @return true if this form has Static XFA data, otherwise false]]>
      </doc>
    </method>
    <method name="isXFADynamic" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if this AcroForm has Adobe XML Forms Architecture (XFA) data, and it is a Dynamic Form.

 @return true if this form has Dynamic XFA data, otherwise false]]>
      </doc>
    </method>
    <method name="containsJavaScript" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true when the PDF document contains javascript.
 @return true when the PDF document contains javascript.]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ownerPassword" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFFields object that the permissions password is known, so all
 permissions are granted.
 
 @param ownerPassword
            The permissions password
 @return true if the password was validated
 @throws PDFException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The <code>PDFFields</code> class provides methods to work with interactive PDF forms - also called acroforms. <br>
 It can load an existing PDF form and extract acroform fields in XML (XFDF) or FDF format.<br>
 It can also load an existing PDF form and import acroform fields from an XML (XFDF) or FDF file and then save
 the updated PDF form.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfFields.PDFFields -->
  <!-- start class com.qoppa.pdfFields.PDFFields.KeyInfoFields -->
  <class name="PDFFields.KeyInfoFields" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFFields.KeyInfoFields"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFFields.jar that can generate server
 key requests, validate a key, and display server information. Valid usage
 is:
 </p>
 <p>
 <strong>java -jar jPDFFields.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFFields.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFFields.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfFields.PDFFields.KeyInfoFields -->
</package>
<package name="com.qoppa.pdfImages">
  <!-- start class com.qoppa.pdfImages.PDFImages -->
  <class name="PDFImages" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFImages"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a blank PDFImages object.  This constructor can
 be used to create a new document entirely from images.]]>
      </doc>
    </constructor>
    <constructor name="PDFImages" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param	fileName	Name of the PDF file.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFImages" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from an InputStream.
 
 @param	inStream InputStream to read the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFImages" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param	url	Location of the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFImages" type="com.qoppa.pdf.source.PDFSource, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a PDFSource object.  Implementations of PDFSource can be found in the com.qoppa.pdf.source package
 or can be implemented by the host application for custom PDF sources.
 
 @param	source	Source of the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)
 
 @return DocumentInfo Object containing header information for the document.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param	key		Production key.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFImages.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="getPageImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="resDPI" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns an RGB BufferedImage containing a rendering
 of the page at the given resolution in DPI.
 
 @param pageIndex The 0 based page index.
 @param resDPI Dots per inch at which to render the image.  72 is the PDF native DPI and 100% scale
 
 @return A BufferedImage object of the page at the requested DPI..]]>
      </doc>
    </method>
    <method name="getPageImageCS" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="dpi" type="int"/>
      <param name="imageCS" type="java.awt.color.ColorSpace"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage, created in the given color space, containing a rendering of the page at the given resolution in DPI.
 Note that this method will render content directly onto the image in the image's color space, not render in RGB and then convert.
 This method can be used to preview output to devices that have a specific color spaces, such as printers. 
 
 @param dpi Dots per inch at which to render the image.
 @param imageCS The color space to use when creating the image.
 
 @return A BufferedImage object of the page at the requested DPI.]]>
      </doc>
    </method>
    <method name="getPageImageCS" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="dpi" type="int"/>
      <param name="imageCS" type="java.awt.color.ColorSpace"/>
      <param name="simOverprint" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage, created in the given color space, containing a rendering of the page at the given resolution in DPI.
 Note that this method will render content directly onto the image in the image's color space, not render in RGB and then convert.
 This method can be used to preview output to devices that have a specific color spaces, such as printers. 
 
 @param dpi Dots per inch at which to render the image.
 @param imageCS The color space to use when creating the image.
 @param simOverprint Boolean flag indicating whether the rendering should simulate overprint
 
 @return A BufferedImage object of the page at the requested DPI.]]>
      </doc>
    </method>
    <method name="getPageImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns an RGB BufferedImage containing a rendering of the page at the given page size.  Use
 this method when the size of the output image is fixed.
 
 @param pageIndex The 0 based page index.
 @param width The width of the desired image, in pixels
 @param height The height of the desired image, in pixels]]>
      </doc>
    </method>
    <method name="getPageSubImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="pageArea" type="java.awt.geom.Rectangle2D"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage containing a rendering of part of the page at a given scale.
 
 @param pageIndex The 0 based page index.
 @param pageArea Rectangle of the area from which the image should be created.  This rectangle should be
 in the page coordinate system, which is at 72 DPI.
 @param dpi Dots per inch at which to render the image.  72 is the PDF native DPI and 100% scale.
 
 @return A BufferedImage object of a section of the page.]]>
      </doc>
    </method>
    <method name="getPaperHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the paper's height of this page in 72 DPI.  This
 values comes from the page's MediaBox.
 
 @param pageIndex The 0 based page index.
 
 @return  double  Height of this page]]>
      </doc>
    </method>
    <method name="getPaperWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the paper's width of this page in 72 DPI.  This
 values comes from the page's MediaBox.
 
 @param pageIndex The 0 based page index.
 
 @return  double  Width of this page]]>
      </doc>
    </method>
    <method name="getMediaBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the PDF page's 'MediaBox'.  The MediaBox is a rectangle that defines
 the size of the Media that this page was designed for, this roughly corresponds
 to the paper size when printing.
 
 @return  Rectangle2D This page's MediaBox]]>
      </doc>
    </method>
    <method name="getCropBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the PDF page's 'CropBox'.  The CropBox is a 
 rectangle that is used to crop content before displaying
 or printing the page. This rectangle is in PDF native
 coordinates starting at the bottom left and increasing
 up to the right. 
 
 @return  Rectangle2D This page's CropBox]]>
      </doc>
    </method>
    <method name="getDisplayHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the display height of this page in 72 DPI.  This value
 comes from the page's CropBox
 
 @return  double  Width of this page]]>
      </doc>
    </method>
    <method name="getDisplayWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns the display width of this page in 72 DPI.  This value
 comes from the pages CropBox
 
 @param pageIndex The 0 based page index.
 
 @return  double  Width of this page]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages in this document.]]>
      </doc>
    </method>
    <method name="getPageRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns a page's rotation value, in degrees.
 
 @param pageIndex The 0 based page index.
 
 @return the rotation of a page in degrees.]]>
      </doc>
    </method>
    <method name="savePageAsPNG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="dpi" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendered image of the page to the given OutputStream in PNG format.
 
 @param pageIndex The 0 based page index.
 @param outStream The stream to save the image to.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution and is equivalent to 100% scale.]]>
      </doc>
    </method>
    <method name="savePageAsPNG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendered image of the page to the given OutputStream in PNG format.
 
 @param pageIndex The 0 based page index.
 @param fileName The name of the PNG file.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution and is equivalent to 100% scale.]]>
      </doc>
    </method>
    <method name="savePageAsGIF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendered image of the page to the given OutputStream in GIF format.
 
 @param pageIndex The 0 based page index.
 @param fileName The name of the PNG file.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution and is equivalent to 100% scale.]]>
      </doc>
    </method>
    <method name="savePageAsJPEG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="resDPI" type="int"/>
      <param name="quality" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendered image of the page to the given OutputStream in JPEG format.
 
 @param pageIndex The 0 based page index.
 @param outStream The stream to save the image to.
 @param resDPI Dots per inch at which to render the image.  72 is the native PDF resolution and is equivalent to 100% scale.
 @param quality The quality setting to use for JPEG compression.  The range for this value is 0.0 to 1.0.
 Lower values mean higher compression and lower quality.  As a guideline, 0.25 is low quality, 0.5 is medium
 quality and 0.75 is high quality.]]>
      </doc>
    </method>
    <method name="savePageAsJPEG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="resDPI" type="int"/>
      <param name="quality" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendered image of the page to the given file in JPEG format.
 
 @param pageIndex The 0 based page index.
 @param fileName The name of the file to save to.
 @param resDPI Dots per inch at which to render the image.  72 is the native PDF resolution and is equivalent to 100% scale.
 @param quality The quality setting to use for JPEG compression.  The range for this value is 0.0 to 1.0.
 Lower values mean higher compression and lower quality.  As a guideline, 0.25 is low quality, 0.5 is medium
 quality and 0.75 is high quality.]]>
      </doc>
    </method>
    <method name="savePageAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Render a page to an image and save it in TIFF format.  If the TIFF compression is one
 of the fax compressions, the image will be converted to black and white automatically.
  
 @param pageIndex The 0 based page index.
 @param fileName The name of the file to save the image to.
 @param options Options to use when saving the image, such as the TIFF compression type.]]>
      </doc>
    </method>
    <method name="savePageAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Render a page to an image and save it in TIFF format.  If the TIFF compression is one
 of the fax compressions, the image will be converted to black and white automatically.
  
 @param pageIndex The 0 based page index.
 @param outStream The output stream to write the image to.
 @param options Options to use when saving the image, such as the TIFF compression type.]]>
      </doc>
    </method>
    <method name="saveDocumentAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="resDPI" type="double"/>
      <param name="tiffCompression" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Save the entire document as a multi-page TIFF image to the given file.
 resDPI is the resolution in DPI used to render the page,
 72 is the native PDF resolution and is equivalent to 100% scale.<br><br>
 
 @param fileName The name of the file to write the TIFF image to.
 @param resDPI Dots per inch at which to render the image, 72 is the native PDF resolution and is equivalent to 100% scale..
 @param tiffCompression The type of TIFF compression to use.  This value needs to be one of
 these predefined values:<br><br>
 TIFFOptions.TIFF_DEFLATE - Deflate lossless compression (Zip-in-TIFF)<br>
 TIFFOptions.TIFF_CCITT_RLE - CCITT Modified Huffman RLE<br>
 TIFFOptions.TIFF_FAX_GROUP3 - CCITT Group 3 fax encoding<br>
 TIFFOptions.TIFF_FAX_GROUP4 - CCITT Group 4 fax encoding<br>
 TIFFOptions.TIFF_JPEG - JPEG-in-TIFF compression.<br>
 TIFFOptions.TIFF_LZW - LZW Compression<br>
 TIFFOptions.TIFF_PACKBITS - Byte-oriented run-length encoding "PackBits" compression.<br>
 TIFFOptions.TIFF_ZLIB - ZLib Compression.<br>
 TIFFOptions.TIFF_NO_COMPRESSION - No compression.<br>]]>
      </doc>
    </method>
    <method name="saveDocumentAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Save the entire document as a multi-page TIFF image to the given file.  This method takes
 a {@link com.qoppa.pdf.TIFFOptions TIFFOptions} object as an argument to describe various
 TIFF options when saving the file.
 
 @param fileName The name of the file to write the TIFF image to.
 @param options Options to use when saving the TIFF file.]]>
      </doc>
    </method>
    <method name="saveDocumentAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Save the entire document as a multi-page TIFF image to an OutputStream.  This method takes
 a {@link com.qoppa.pdf.TIFFOptions TIFFOptions} object as an argument to describe various
 TIFF options when saving the file.
 
 @param outStream The stream to save the image to.
 @param options Options to use when saving the TIFF file.]]>
      </doc>
    </method>
    <method name="appendTIFFAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tiffFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Appends the pages in a TIFF file to the end of this document.  The method will create a new
 page for each image in a TIFF file and then draw the image onto the page.  The page dimensions
 will be the same as for the TIFF image, calculated using the TIFF dpi value.
 
 @param tiffFileName The name of the TIFF file to add to this document.]]>
      </doc>
    </method>
    <method name="appendTIFFAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Appends the pages in a TIFF image from an input stream to the end of this document.  The method will
 create a new page for each image in a TIFF image and then draw the image onto the page.  The page
 dimensions will be the same as for the TIFF image, calculated using the TIFF dpi value.
 
 @param inStream The input stream to read the TIFF image from]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG file to it.  The method looks at the DPI
 value in the JPEG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param jpegFileName The name of the JPEG file to add to this document.]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG image to it.  The method looks at the DPI
 value in the JPEG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param inStream The input stream from which to read the JPEG image.]]>
      </doc>
    </method>
    <method name="appendGIFAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gifFileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the GIF image to it.  The DPI must be provided
 because GIF files do not have DPI information embedded in them.  PDF standard resolution is 72 DPI.
 
 @param gifFileName The name of gif file
 @param dpi The DPI value to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendGIFAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the GIF image to it.  The image is read from an input
 stream.  The DPI must be provided because GIF files do not have DPI information embedded in them.  
 PDF standard resolution is 72 DPI.
 
 @param inStream An input stream containing the GIF file content
 @param dpi The DPI value to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegFileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG file to it.  The method ignores the DPI
 value in the file and uses the dpi passed into the method to determine the page size.
 
 @param jpegFileName The name of the JPEG file to add to this document.
 @param dpi The DPI value to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendPNGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pngFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the PNG file to it.  The method looks at the DPI
 value in the PNG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param pngFileName The name of the PNG file to add to this document.]]>
      </doc>
    </method>
    <method name="appendPNGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document adds the PNG content to it.  The method reads the input stream
 expecting PNG content and looks at the DPI setting in the image to determine the size of the new page.
 If the DPI information is not present, the method defaults to 72 DPI.
 
 @param inStream The input stream to read the PNG content from.
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to an output stream.
 
 @param outStream OutputStream where the document will be written to.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to a file.
 
 @param fileName Name of the file to save the document.]]>
      </doc>
    </method>
    <method name="setWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="watermark" type="com.qoppa.pdf.IWatermark"/>
      <doc>
      <![CDATA[Sets the watermark on the PDFImages document. The PDFImages document will
 make callbacks to this watermark with type
 <code>IWatermark.TYPE_IMAGES</code> when creating images from the
 document.
 
 @param watermark
            the <code>IWatermark</code> object to use when creating images
            from the PDFImages document]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ownerPassword" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFImages object that the permissions password is known, so all
 permissions are granted.
 
 @param ownerPassword
            The permissions password
 @return true if the password was validated
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getWatermark" return="com.qoppa.pdf.IWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the watermark for the PDFImages document.
 
 @return the <code>IWatermark</code> object
 @see #setWatermark]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The <code>PDFImages</code> class provides methods to load PDF documents and export or import
 images from and to the document.  The object can export pages or sections of pages as images and
 can also create new pages from images.  Documents can be loaded from the file system,
 from a URL or from a Java InputStream, or can be created from scratch.<br><br>
 
 The class can import and export the images using the file system or an output stream in
 JPEG, TIFF and PNG formats and can also return a BufferedImage  object to the calling 
 application.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfImages.PDFImages -->
  <!-- start class com.qoppa.pdfImages.PDFImages.KeyInfoImages -->
  <class name="PDFImages.KeyInfoImages" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFImages.KeyInfoImages"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFImages.jar that can generate server
 key requests, validate a key, and display server information. Valid usage
 is:
 </p>
 <p>
 <strong>java -jar jPDFImages.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFImages.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFImages.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfImages.PDFImages.KeyInfoImages -->
</package>
<package name="com.qoppa.pdfPrint">
  <!-- start class com.qoppa.pdfPrint.PDFPrint -->
  <class name="PDFPrint" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.awt.print.Printable"/>
    <constructor name="PDFPrint" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param	fileName	Name of the PDF file.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFPrint" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from an InputStream.
 
 @param	inStream InputStream to read the PDF document.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFPrint" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param	url	Location of the PDF document.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="password" type="com.qoppa.pdf.IPassword"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Convenience method to print a PDF document from a file.  This method will 
 prompt the user with the printer dialog and then print the document.  This
 method is equivalent to:<br><br>
 
 PDFPrint pdfPrint = new PDFPrint (fileName, pwdHandler);<br>
 pdfPrint.print (printSettings); 
 
 @param	fileName	Name of the PDF file.
 
 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  The library uses default
 settings when null is used.
  
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="password" type="com.qoppa.pdf.IPassword"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Convenience method to print a PDF document from a file to a named printer.
 This method is equivalent to:<br><br>
 
 PDFPrint pdfPrint = new PDFPrint (fileName, pwdHandler);<br>
 pdfPrint.print (printerName, printSettings); 
 
 @param	fileName	Name of the PDF file.
 
 @param	printerName	Name of the printer to print to.  If null, prints to
 the default printer.
 
 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  The library uses default
 settings when null is used. 
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document.  This method will prompt the user
 with the printer dialog and then print the document.
 <br>
 <br>
 If finer control of printing is necessary, the PDFPrint object
 implements both Printable and Pageable (through the getPageable method).
 The host application can then create its own PrinterJob and set any
 settings necessary, then call either setPageable or setPrintable
 and then start the print job.

 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document to the specified printer, by name.  This method will
 print the PDF document silently (without showing the printer dialog) to the named
 printer.  If the printerName parameter is null, this method will print to the
 default printer.<br><br>
 This method can only be called if using Java 1.4.2 or higher as it needs PrintServices,
 which were only implemented starting on 1.4.
 <br><br>
 If finer control of printing is necessary, the PDFPrint object
 implements both Printable and Pageable (through its getPageable method).
 The host application can then create its own PrinterJob and set any 
 settings necessary, then call either setPageable or setPrintable and
 then start the print job.

 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.
 
 @param printerName The name of the printer to print to.  If this parameter
 is set to null, the method will print to the default printer.
 
 @throws PrinterException This exception is thrown if the printer is not
 found or if there is an error while printing.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="printAttrSet" type="javax.print.attribute.PrintRequestAttributeSet"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document to the specified printer, by name and passes the attribute set to the printer job.
 This method will print the PDF document silently (without showing the printer dialog) to the named
 printer.  If the printerName parameter is null, this method will print to the
 default printer.  If the printAttrSet parameter is null, the printer job will use its default settings.<br><br>
 
 This method can only be called if using Java 1.4.2 or higher as it needs PrintServices,
 which were only implemented starting on 1.4.<br><br>
 
 If finer control of printing is necessary, the PDFPrint object
 implements both Printable and Pageable (through its getPageable method).
 The host application can then create its own PrinterJob and set any 
 settings necessary, then call either setPageable or setPrintable and
 then start the print job.

 @param   printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.
 
 @param printerName The name of the printer to print to.  If this parameter
 is set to null, the method will print to the default printer.
 
 @param printAttrSet The attribute set to pass to the printer.  This parameter simply gets passed through to the printer job to set options 
 such as the media tray, chromaticity and others.  If null is passed, the print job will use default attributes.
 
 @throws PrinterException This exception is thrown if the printer is not
 found or if there is an error while printing.]]>
      </doc>
    </method>
    <method name="printToDefaultPrinter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints the PDF document to the default printer.  This method will print the PDF document
 silently (without showing the printer dialog) to the default printer.
 
 @param   printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.
 
 @throws PrinterException This exception is thrown if the printer is not
 found or if there is an error while printing.]]>
      </doc>
    </method>
    <method name="createSimpleDoc" return="javax.print.SimpleDoc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="attributes" type="javax.print.attribute.DocAttributeSet"/>
      <doc>
      <![CDATA[Creates and returns a SimpleDoc, with the specified doc attribute set,
 which can be used in many common printing requests.
 <p>
 Example:
   <pre>
   PrintService printService = PrintServiceLookup.lookupDefaultPrintService();
   DocPrintJob printJob = printService.createPrintJob();
   
   DocumentName docName = new DocumentName(&quot;Doc Name&quot;, Locale.getDefault());
   HashDocAttributeSet attributes = new HashDocAttributeSet(docName);
   
   try {
     PDFPrint pdfPrint = new PDFPrint(&quot;sampleFile.pdf&quot;, null);
     printJob.print(pdfPrint.createSimpleDoc(attributes), null);
   }
   catch (PDFException e) {
     e.printStackTrace();
   }
   catch (PrintException e) {
     e.printStackTrace();
   }
 </pre>
 
 @param attributes
            a <code>DocAttributeSet</code>, which can be <code>null</code>
 @return a SimpleDoc object]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param	key		Production key.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFPrint.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="print" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="graphics" type="java.awt.Graphics"/>
      <param name="pageFormat" type="java.awt.print.PageFormat"/>
      <param name="pageIndex" type="int"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints the page.  This method fulfills the Printable interface and usually
 gets called by PrinterJob when printing the document.]]>
      </doc>
    </method>
    <method name="getPrintSettings" return="com.qoppa.pdf.PrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the PrintSettings that will be used when printing the document.
 
 @return PrintSettings Print settings used when printing.]]>
      </doc>
    </method>
    <method name="getPageable" return="java.awt.print.Pageable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pJob" type="java.awt.print.PrinterJob"/>
      <doc>
      <![CDATA[Returns an object that implements Pageable for this PDF document.  The method
 takes a PrinterJob object as a parameter because information about the printer
 is needed in order to fulfill the Pageable interface properly.
 
 @param pJob PrinterJob object where the Pageable will be used.
 
 @return Object that implements the Pageable interface.]]>
      </doc>
    </method>
    <method name="setPrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <doc>
      <![CDATA[Set the PrintSettings used when printing this document while using the class as a Printable
 (rather than calling one of the print methods).
 
 @param printSettings PrintSettings to use when printing.]]>
      </doc>
    </method>
    <method name="getPageFormat" return="java.awt.print.PageFormat"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="IndexOutOfBoundsException" type="java.lang.IndexOutOfBoundsException"/>
      <doc>
      <![CDATA[Returns a PageFormat object for the given page.  Page indices are 0 based
 (1st page is pageIndex 0).
 
 @return PageFormat A PageFormat object describing the page dimensions.]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages in this document.]]>
      </doc>
    </method>
    <method name="isPrintAllowed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this document has permissions to print.
 
 @return Boolean flag indicating if this document has permissions to print.]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this PDFPrint object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ownerPassword" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFPrint object that the permissions password is known, so all
 permissions are granted.
 
 @param ownerPassword
            The permissions password
 @return true if the password was validated
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="watermark" type="com.qoppa.pdf.IWatermark"/>
      <doc>
      <![CDATA[Sets the watermark on the PDFPrint document. The PDFPrint document will
 make callbacks to this watermark with type
 <code>IWatermark.TYPE_PRINT</code> when printing the document.
 
 @param watermark
            the <code>IWatermark</code> object to use when printing the
            PDFPrint document]]>
      </doc>
    </method>
    <method name="getWatermark" return="com.qoppa.pdf.IWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the watermark for the PDFPrint document.
 
 @return the <code>IWatermark</code> object
 @see #setWatermark]]>
      </doc>
    </method>
    <method name="addPrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Adds a <code>PrintListener</code> to the PDFDocument
 @param printListener - the <code>PrintListener</code> to be added]]>
      </doc>
    </method>
    <method name="removePrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Removes a <code>PrintListener</code> from the PDFDocument
 @param printListener - the <code>PrintListener</code> to be removed]]>
      </doc>
    </method>
    <method name="printAsImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="printAttrSet" type="javax.print.attribute.PrintRequestAttributeSet"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this document by first converting each page to an image and then sending the image to the printer.  This method is
 here as a workaround to Java JDK issues where in some rare cases, the full page is not printed correctly.<br>
 When converting to an image, the method looks at the printer's DPI and creates an image of the page using that DPI.  By doing
 this, there should be no loss in quality.  However, this might cause performance issues because a full page image at high
 DPI values can get quite large, so this method should only be used when standard printing has issues.
 
 @param printerName The name of the printer to print to.  If this parameter
 is set to null, the method will print to the default printer.
 
 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.
 
 @param printAttrSet The attribute set to pass to the printer.  This parameter simply gets passed through to the printer job to set options 
 such as the media tray, chromaticity and others.  If null is passed, the print job will use default attributes.
 
 @throws PDFPermissionException This exception is thrown if the PDF does not allow for printing.
 
 @throws PrinterException This exception is thrown if the printer is not
 found or if there is an error while printing.
 
 @throws PrinterException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The <code>PDFPrint</code> class provides methods to print a pdf document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfPrint.PDFPrint -->
  <!-- start class com.qoppa.pdfPrint.PDFPrint.KeyInfoPrint -->
  <class name="PDFPrint.KeyInfoPrint" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFPrint.KeyInfoPrint"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFPrint.jar that can generate server key
 requests, validate a key, and display server information. Valid usage is:
 </p>
 <p>
 <strong>java -jar jPDFPrint.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFPrint.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFPrint.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfPrint.PDFPrint.KeyInfoPrint -->
</package>
<package name="com.qoppa.pdfProcess">
  <!-- start class com.qoppa.pdfProcess.PDFDocument -->
  <class name="PDFDocument" extends="com.qoppa.pdfViewer.hiObjects.AbstractPDFDocument"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFDocument"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a blank PDF document. Pages can then be added to this document from other documents or by creating blank pages and drawing to them.]]>
      </doc>
    </constructor>
    <constructor name="PDFDocument" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a PDFDocument object from a PDF InputStream.
 
 @param inStream InputStream to read the pdf document from.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFDocument" type="com.qoppa.pdf.source.PDFSource, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Create a PDFDocument object using a PDFSource interface.  A PDFSource interface is responsible
 for providing the PDF binary content to the PDFDocument object.  There are default implementations
 in the com.qoppa.pdf.source package to load PDF documents from files, input streams, byte arrays and
 URLs.  An application can create its own object that implements PDFSource to load a document from
 a custom source.
 
 @param source The source of the PDF content.
 @param password The password, if any, used to open the document.  Set to null if there is no password needed.]]>
      </doc>
    </constructor>
    <constructor name="PDFDocument" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param fileName Name of the PDF file.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFDocument" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param url URL pointing to the location of the PDF file.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFProcess. If this is the demo version, the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="loadRTF" return="com.qoppa.pdfProcess.PDFDocument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rtfFile" type="java.lang.String"/>
      <param name="pf" type="java.awt.print.PageFormat"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="BadLocationException" type="javax.swing.text.BadLocationException"/>
      <doc>
      <![CDATA[Creates a PDFDocument from an RTF file. The document will create as many pages as needed to draw the full RTF document.
 
 @param rtfFile - Name of the RTF file.
 @param pf - PageFormat to use when creating pages in the PDF document.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param key Production key.]]>
      </doc>
    </method>
    <method name="addAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annotHash" type="java.util.Map&lt;java.lang.Integer, java.util.Vector&lt;com.qoppa.pdf.annotations.Annotation&gt;&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method allows multiple annotations to be added to multiple pages. The hashtable of annotations
 must have <code>Integer</code>s for the keys representing the page index. The values in the
 hashtable must be <code>Vector</code>s of <code>Annotations</code>.
 
 @param annotHash The hashtable of annotations to be added to the document.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addDocumentListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="com.qoppa.pdf.IDocumentListener"/>
      <doc>
      <![CDATA[Internal method to keep track of document events.]]>
      </doc>
    </method>
    <method name="addLayer" return="com.qoppa.pdf.Layer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="initialState" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates and returns a PDF layer (Optional Content Group). This layer can then be used to add optional content
 sections to the document by passing it as a parameter to the createGraphics method in PDFPage.
 
 @param name The name of the layer. This name will show up on a PDF viewer to turn the layer on or off.
 @param initialState The initial visibility state of the layer. This determines whether the layer will be 
          visible or not when the PDF document is opened. Valid values for this are Layer.STATE_ON or Layer.STATE_OFF.]]>
      </doc>
    </method>
    <method name="addLayer" return="com.qoppa.pdf.Layer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="initialState" type="int"/>
      <param name="showInList" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates and returns a PDF layer (Optional Content Group). This layer can then be used to add optional content
 sections to the document by passing it as a parameter to the createGraphics method in PDFPage.
 
 @param name The name of the layer. This name will show up on a PDF viewer to turn the layer on or off.
 @param initialState The initial visibility state of the layer. This determines whether the layer will be 
 visible or not when the PDF document is opened. Valid values for this are Layer.STATE_ON or Layer.STATE_OFF.
 @param showInList Flag to indicate whether this layer should be shown in the list of layers when the 
 document is opened in a PDF viewer]]>
      </doc>
    </method>
    <method name="appendDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="appendDoc" type="com.qoppa.pdfProcess.PDFDocument"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Appends a PDF document to this document. All the pages in appendDoc will
 be added at the end of this document.
 
 @param appendDoc
            Document to be appended.
 @throws PDFException
             <ul>
             <li>
             if this <code>PDFDocument</code> is equal to
             <code>appendDoc</code></li>
             <li>if this <code>PDFDocument</code> has an AcroForm with XFA
             data and <code>appendDoc</code> has an AcroForm.</li>
             <li>if <code>appendDoc</code> has an AcroForm with XFA
             data and this <code>PDFDocument</code> has an AcroForm
             @see AcroForm#removeXFA()]]>
      </doc>
    </method>
    <method name="appendGIFAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gifStream" type="java.io.InputStream"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the GIF image to it.  The image is read from an input
 stream.  The DPI must be provided because GIF files do not have DPI information embedded in them.  
 PDF standard resolution is 72 DPI.
 
 @param gifStream The name of gif file
 @param dpi The DPI value to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendGIFAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gifFileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the GIF image to it.  The DPI must be provided
 because GIF files do not have DPI information embedded in them.  PDF standard resolution is 72 DPI.
 
 @param gifFileName The name of gif file
 @param dpi The DPI value to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendGIFAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="gifFileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <param name="compression" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the GIF image to it.  The DPI must be provided
 because GIF files do not have DPI information embedded in them.  PDF standard resolution is 72 DPI.
 The compression type must be one of ImageSettings.COMPRESSION_JPEG2000, ImageSettings.COMPRESSION_JPEG, 
 ImageSettings.COMPRESSION_DEFLATE, or ImageSettings.COMPRESSION_JBIG2.
 
 @param gifFileName The name of gif file
 @param dpi The DPI value to use when importing the image.
 @param compression The compression type to use when importing the image.]]>
      </doc>
    </method>
    <method name="appendImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="imageFile" type="java.io.File"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[This method appends an image (or series of images) to the current document.  The method
 will convert the image(s) to a full PDF page and then add it to the document.  If the input
 image format supports multiple images, such as TIFF, and the file has more than one image,
 all images will be appended to the document.
 
 @param imageFile The input image file.  The format of the input file is determined by looking
 at the extension.]]>
      </doc>
    </method>
    <method name="appendImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="formatName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method appends an image (or series of images) to the current document.  The method
 will convert the image(s) to a full PDF page and then add it to the document.  If the input
 image format supports multiple images, such as TIFF, and the file has more than one image,
 all images will be appended to the document.
 
 @param inStream The input stream holding the image contents.
 @param formatName The name of the format of the input content data.  Valid format names are pdf, tiff,
 tif, png, jpg, jpeg and jpe and are case insensitive.]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG image to it.  The method looks at the DPI
 value in the JPEG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param inStream the input stream to read the JPEG image from]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG file to it.  The method looks at the DPI
 value in the JPEG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param jpegFileName The name of the JPEG file to add to this document.]]>
      </doc>
    </method>
    <method name="appendJPEGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegFileName" type="java.lang.String"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the JPEG file to it.  The method ignores the DPI
 value in the file and uses the dpi passed into the method to determine the page size.
 
 @param jpegFileName The name of the JPEG file to add to this document.
 @param dpi The DPI value to use to determine the size of the page to create.  This value overrides any DPI value inside the JPEG file.]]>
      </doc>
    </method>
    <method name="appendNewPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageWidth" type="double"/>
      <param name="pageHeight" type="double"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates and appends a new PDFPage to this document. The pageWidth and
 pageHeight are specified in 72DPI. The page object can be drawn to by
 getting a graphics object from it and then drawing to that.
 
 @param pageWidth
            Width of the page. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points
 @param pageHeight
            Height of the page. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="appendPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="com.qoppa.pdfProcess.PDFPage"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Appends a page to this document. The method creates a copy of this page
 and then the copy is added to the document. The method returns the newly
 created PDFPage object. To move a page within the same document, use the
 {@link #movePage(int, int)} method.
 
 @param page
            The page to add to the document.
 @return The newly created page
 @throws PDFException
             <ul>
             <li>if this <code>PDFDocument</code> has an AcroForm with XFA
             data and <code>page</code>'s <code>PDFDocument</code> has an
             AcroForm.</li>
             <li>if <code>page</code>'s <code>PDFDocument</code> has an
             AcroForm with XFA data and this <code>PDFDocument</code> has
             an AcroForm
             @see AcroForm#removeXFA()]]>
      </doc>
    </method>
    <method name="appendPNGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds a PNG image, read from an input stream, to it.  The 
 method looks at the DPI value in the PNG image to determine the size of the new page.  If not present, 
 the method defaults to 72 DPI.
 
 @param inStream The input stream to read the PNG image from.]]>
      </doc>
    </method>
    <method name="appendPNGAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pngFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the PNG file to it.  The method looks at the DPI
 value in the PNG image to determine the size of the new page.  If not present, the method defaults
 to 72 DPI.
 
 @param pngFileName The name of the PNG file to add to this document.]]>
      </doc>
    </method>
    <method name="appendJPEG2000AsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="dpi" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds a JPEG200 image, read from an input stream, to it using the DPI specified.
 
 @param inStream Input stream to the JPEG 2000 iamge.
 @param dpi The DPI of the input image 
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="appendImageAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.image.BufferedImage"/>
      <param name="pageWidth" type="double"/>
      <param name="pageHeight" type="double"/>
      <param name="compressionType" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page, with given dimensions, in the PDF document and adds the image to it. The image is added at 72dpi and compressed 
 according to the compressionType parameter. 
 
 @param image The image for the new page.
 @param pageWidth The width for the new page.
 @param pageHeight The height for the new page.
 @param compressionType The compressionType for the image. See {@link ImageCompression}.]]>
      </doc>
    </method>
    <method name="appendImageAsPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="original" type="java.awt.image.BufferedImage"/>
      <param name="compressionType" type="int"/>
      <param name="colorSpace" type="int"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates a new page in the PDF document and adds the image to it. The image is modified according to the 
 color space, compression, and dpi.
 
 @param original The image for the new page.
 @param compressionType The compression type for the image. See {@link ImageCompression}.
 @param colorSpace The color space for the image. See {@link ImageColorSpace}.
 @param dpi The dpi of the image.]]>
      </doc>
    </method>
    <method name="appendTextAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="textStream" type="java.io.InputStream"/>
      <param name="settings" type="com.qoppa.pdf.TextToPDFSettings"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates new pages in the PDF document and adds the text, read from an
 input stream, to them.
 
 @param textStream The input stream to read the text from.
 @param settings The object to set the text to PDF settings.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="appendTextAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="txtFileName" type="java.lang.String"/>
      <param name="settings" type="com.qoppa.pdf.TextToPDFSettings"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Creates new pages in the PDF document and adds the text from an text file
 to them.
 
 @param txtFileName
            The name of the text file to add to this document.
 @param settings
            The object to set the text to PDF settings.
 
 @throws PDFException
             , IOException]]>
      </doc>
    </method>
    <method name="appendTIFFAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Appends the pages in a TIFF image from an input stream to the end of this document.  The method will 
 create a new page for each image in a TIFF file and then draw the image onto the page.  The page
 dimensions will be the same as for the TIFF image, calculated using the TIFF dpi value.
 
 @param inStream The input stream to read the TIFF image from]]>
      </doc>
    </method>
    <method name="appendTIFFAsPages"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tiffFileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Appends the pages in a TIFF file to the end of this document.  The method will create a new
 page for each image in a TIFF file and then draw the image onto the page.  The page dimensions
 will be the same as for the TIFF image, calculated using the TIFF dpi value.
 
 @param tiffFileName The name of the TIFF file to add to this document.]]>
      </doc>
    </method>
    <method name="clearPasswordPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentPermissionsPwd" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Clears the password permissions for this document. Calling this method will clear user password, owner password, permissions and encryption.

 
 @param currentPermissionsPwd The current permissions password in the document, if any. This password is needed to be able to change the passwords and
            permissions in a document.
 @throws PDFPermissionException If currentPermissionsPwd is invalid.]]>
      </doc>
    </method>
    <method name="createRootBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new root bookmark and saves it in the document catalog. When this method is called, any existing bookmarks will be discarded and the new root
 bookmark will be put in place. Initially, the new root bookmark will have no children (no entries will be displayed in the bookmarks pane when viewing
 the document).
 
 @return The new root bookmark.]]>
      </doc>
    </method>
    <method name="deleteAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Delete all annotations in the document.]]>
      </doc>
    </method>
    <method name="deletePage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Deletes a page from this document. If the index is out of bounds, (index < 0 or index >= number of pages) this method has no effect on the document.
 
 @param pageIndex Index of the page to remove.]]>
      </doc>
    </method>
    <method name="exportAnnotsAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="annotSet" type="java.util.Set&lt;com.qoppa.pdf.annotations.Annotation&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Export the set of annotation comments to an output stream in FDF format.
 
 @param outStream
            The output stream to write the data to.
 
 @param pathToPDFFile
            is the relative path from the FDF file to the PDF file name.
            This parameter can be left null. This parameter is used to
            fill the PDF file name entry in the FDF file, the file entry
            will be set to pathToPDFFile + fileName. The file entry is
            used when you open an FDF file to be able to locate the
            corresponding PDF file. Example of pathToPDFFile
            ../qoppa/mydir
 @param annotSet
            The set of annotations to export. If annotSet is not null,
            only the annotations contained in the set will be exported.
            Otherwise, all annotations will be exported.]]>
      </doc>
    </method>
    <method name="exportAnnotsAsFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="annotSet" type="java.util.Set&lt;com.qoppa.pdf.annotations.Annotation&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports a set of annotation comments in FDF format.
 
 @param fileName
            The name of the file to export the data to.
 @param annotSet
            The set of annotations to export. If annotSet is not null,
            only the annotations contained in the set will be exported.
            Otherwise, all annotations will be exported.]]>
      </doc>
    </method>
    <method name="exportAnnotsAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="pathToPDFFile" type="java.lang.String"/>
      <param name="annotSet" type="java.util.Set&lt;com.qoppa.pdf.annotations.Annotation&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Export annotations comments to an output stream in XFDF format.
 
 @param outStream
            The output stream to write the data to.
 
 @param pathToPDFFile
            is the relative path from the fdf file to the pdf file name.
            This parameter can be left null. This parameter is used to
            fill the pdf file name entry in the FDF file, the file entry
            will be set to pathToPDFFile + fileNa The file entry is used
            when you open an fdf file to be able to locate the
            corresponding pdf file. Example of pathToPDFFile
            ../qoppa/mydir
 @param annotSet
            The set of annotations to export. If annotSet is not null,
            only the annotations contained in the set will be exported.
            Otherwise, all annotations will be exported.
 
 @throws IOException]]>
      </doc>
    </method>
    <method name="exportAnnotsAsXFDF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="annotSet" type="java.util.Set&lt;com.qoppa.pdf.annotations.Annotation&gt;"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Exports annotations comments in XFDF format.
 
 @param fileName
            The name of the file to export the data to.
 @param annotSet
            The set of annotations to export. If annotSet is not null,
            only the annotations contained in the set will be exported.
            Otherwise, all annotations will be exported.]]>
      </doc>
    </method>
    <method name="flattenAnnotations" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintNonPrintableAnnots" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the annotations. This method paints the content of the annotations directly 
 into the pages and remove the annotations themselves from the document. 
 @param paintNonPrintableAnnots Flag to indicate whether non-printable annotations should be painted or not.
 @return The number of annotations flattened.]]>
      </doc>
    </method>
    <method name="flattenFields" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintButtons" type="boolean"/>
      <param name="paintNonPrintableFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the pdf form fields. This method paints the content of the fields directly 
 into the pages and remove the fields themselves from the document. 
 @param paintButtons Flag to indicate whether push buttons should be painted or not.
 @param paintNonPrintableFields Flag to indicate whether non-printable fields should be painted or not.
 @return The number of fields flattened.]]>
      </doc>
    </method>
    <method name="flattenFields" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintButtons" type="boolean"/>
      <param name="paintOnlyImageButtons" type="boolean"/>
      <param name="paintNonPrintableFields" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the pdf form fields. This method paints the content of the fields directly 
 into the pages and remove the fields themselves from the document. 
 @param paintButtons Flag to indicate whether push buttons should be painted or not.
 @param paintOnlyImageButtons Flag to indicate that push buttons should only be painted if they have an image (only matters if paintButtons is true)
 @param paintNonPrintableFields Flag to indicate whether non-printable fields should be painted or not.
 @return The number of fields flattened.]]>
      </doc>
    </method>
    <method name="getAnnotationFactory" return="com.qoppa.pdf.annotations.IAnnotationFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AnnotationFactory for this document.
 
 @return The annotation factory for the document.]]>
      </doc>
    </method>
    <method name="getAcroForm" return="com.qoppa.pdf.form.AcroForm"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AcroForm in this document. Returns null if the document has no fields.
 
 @return AcroForm The AcroForm object for this document.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an object representing the document metadata information (author, title, etc.).  This is a mutable object, so any
 changes to this object will be saved with the document.
 
 @return DocumentInfo Object containing metadata information for the document.]]>
      </doc>
    </method>
    <method name="getEmbeddedFiles" return="java.util.Vector&lt;com.qoppa.pdf.IEmbeddedFile&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of embedded files in the document (annotations attachments are not part of the list).
 The list is a vector of @see com.qoppa.pdf.IEmbeddedFile.
 
 @return Vector a vector of IEmbbededFile]]>
      </doc>
    </method>
    <method name="getEncryptionAlgorithm" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the encryption algorithm used to encrypt the document.  If the document is not encrypted, the
 method returns null.  Encryptions supported are RC4 and AES.
 
 @return The name of the encryption algorithm.]]>
      </doc>
    </method>
    <method name="getEncryptionLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an int representing the number of bits used in the encryption technique. The integer is the length of the encryption key. 
 It can be 40 for the 40 bits encryption or 128 for 128 bits encryption. -1 indicates that the documents is not encrypted.
 
 @return int The number of bits used in the encryption algorithm.]]>
      </doc>
    </method>
    <method name="getFileModifiedID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file modified ID. A PDF document contains 2 IDs, an original
 ID and a modified ID generated by the application that created or
 modified the document. This method returns a hex string of the value.
 
 @return The PDF document "modified" ID, or null if not present.]]>
      </doc>
    </method>
    <method name="getFileOriginalID" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file original ID. A PDF document contains 2 IDs, an original
 ID and a modified ID generated by the application that created or
 modified the document. This method returns a hex string of the value.
 
 @return The PDF document "original" ID, or null if not present.]]>
      </doc>
    </method>
    <method name="getLayer" return="com.qoppa.pdf.Layer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="layerIndex" type="int"/>
      <doc>
      <![CDATA[Returns a particular PDF layer given its index.
 
 @return A reference to the PDF layer.]]>
      </doc>
    </method>
    <method name="getLayerCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of PDF layers in this document.
 
 @return Number of layers in the document.]]>
      </doc>
    </method>
    <method name="getPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns a page in this document.
 
 @param pageIndex Index of the page to return.]]>
      </doc>
    </method>
    <method name="getPageable" return="java.awt.print.Pageable"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pJob" type="java.awt.print.PrinterJob"/>
      <doc>
      <![CDATA[Returns an object that implements Pageable for this PDF document. The method takes a PrinterJob object as a parameter because information about the
 printer is needed in order to fulfill the Pageable interface properly.
 
 @param pJob PrinterJob object where the Pageable will be used.
 @return Object that implements the Pageable interface.]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages in this document.]]>
      </doc>
    </method>
    <method name="getPDFFileVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the PDF file version for the current document.
 
 @return The version of the PDF document.]]>
      </doc>
    </method>
    <method name="getPrintSettings" return="com.qoppa.pdf.PrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the current PrintSettings object.]]>
      </doc>
    </method>
    <method name="getPDFSource" return="com.qoppa.pdf.source.PDFSource"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an object representing the source of the PDF content.  The object can be one
 of the standard implementations in the com.qoppa.pdf.source package or it can be a custom
 implementation of the interface.
 
 @return The object that has information about the source of the PDF content.]]>
      </doc>
    </method>
    <method name="getRootBookmark" return="com.qoppa.pdf.Bookmark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the 'root' bookmark. Bookmarks form a tree structure in a document.
 
 @return Bookmark The root bookmark for this document.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text in the pdf document as a <code>String</code>. Pages are separated with a return char.
 
 @return Text contained in the pdf document as String.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns text contained in the specified page of the pdf document 
 as a String. 
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @return Text contained in the specified page as a String.]]>
      </doc>
    </method>
    <method name="getWords" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns all words in the pdf document as a <code>Vector</code> of <code>Strings</code>.
 
 @return Words contained in the pdf document as a Vector of Strings.]]>
      </doc>
    </method>
    <method name="getWords" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns all words contained in the specified page of the pdf document 
 as a Vector of Strings. 
 
 The default separators used to separate words are the following: ,/;\n><():?&.@*\t
 To customize separators, see {@link #getWordsWithPositions(int, String) getWordsWithPositions(int, String)}
 
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @return Words contained in the specified page as a Vector of Strings.]]>
      </doc>
    </method>
    <method name="hasOpenPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted with a 'user' password.
 
 @return boolean true if the document is encrypted with an open password, false otherwise.]]>
      </doc>
    </method>
    <method name="hasPermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted with a 'owner' password.
 
 @return boolean true if the document is encrypted with a permissions password, false otherwise.]]>
      </doc>
    </method>
    <method name="importAnnotsFDF" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import annotations comments from an input stream in FDF format.
 
 @param inStream The input stream in FDF format to read the data from.
 
 @return This method returns an internal object.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importAnnotsFDF" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import annotations comments from a file in FDF Format.
 
 @param fileName The name of the FDF file to import the data from.
 
 @return This method returns an internal object.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importAnnotsXFDF" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import annotations from an input stream in XFDF Format.  XFDF uses XML as its underlying format.
 
 @param inStream The input stream in XML format to read the data from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importAnnotsXFDF" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import annotations from a file in XFDF Format.  XFDF uses XML as its underlying format.
 
 @param fileName The name of the XML file to import the annotations from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="importAnnotsPDF" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourcePDF" type="com.qoppa.pdfProcess.PDFDocument"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Import annotations from another PDFDocument.
 
 @param sourcePDF The PDF document to import the annotations from.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="insertNewPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageWidth" type="double"/>
      <param name="pageHeight" type="double"/>
      <param name="index" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a new PDFPage and inserts it into the document at the given position. The pageWidth and pageHeight are specified in 72DPI. The page object can be
 drawn to by getting a graphics object from it and then drawing to that.
 
 @param pageWidth Width of the page in 72DPI.
 @param pageHeight Height of the page in 72DPI.]]>
      </doc>
    </method>
    <method name="insertPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="page" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="index" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Inserts a page into this document at the given index. A copy of the page
 is made and the copy is then added to the document. The method returns
 the newly created PDFPage object. To move a page within the same
 document, use the {@link #movePage(int, int)} method.
 <p>
 If the index is less than 0, the page is inserted as the first page. If
 the index is greater than the number of pages in the document, the page
 is appended to the document.
 
 @param page
            The page to add to the document.
 @param index
            Location where to insert the new page.
 
 @return The newly created page
 @throws PDFException
             <ul>
             <li>if this <code>PDFDocument</code> has an AcroForm with XFA
             data and <code>page</code>'s <code>PDFDocument</code> has an
             AcroForm.</li> <li>if <code>page</code>'s <code>PDFDocument
             </code> has an AcroForm with XFA data and this <code>
             PDFDocument</code> has an AcroForm
             @see AcroForm#removeXFA()]]>
      </doc>
    </method>
    <method name="isDocumentModified" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document has been modified.
 
 @return boolean true if the document is modified, false otherwise.]]>
      </doc>
    </method>
    <method name="isEncrypted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted.
 
 @return boolean true if the document is encrypted with a user password, false otherwise.]]>
      </doc>
    </method>
    <method name="isPortfolio" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is a PDF Portfolio.
 
 @return true if the PDF is a portfolio, false otherwise.]]>
      </doc>
    </method>
    <method name="movePage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentIndex" type="int"/>
      <param name="newIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[moves an existing page to a new location.
 
 @param currentIndex The current index of the page to move.
 @param newIndex The location to move the page.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="print" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="graphics" type="java.awt.Graphics"/>
      <param name="pageFormat" type="java.awt.print.PageFormat"/>
      <param name="pageIndex" type="int"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints the page. This method fulfills the Printable interface and usually gets called by PrinterJob when printing the document.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document. This method will prompt the user with the printer dialog and then print the document. <br>
 <br>
 If more control is desired when printing, the calling application can create its own PrinterJob and then use this object as a Printable or a Pageable in
 the PrinterJob before initiating the printout.
 
 @param printSettings Print job settings. Use this object to tell jPDFProcess how to print the document. If null, the library will print using default
            settings.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document to the specified printer, by name. If the printerName parameter is null, this method will print to the default printer. This
 method can only be called if using Java 1.4.2 or higher as it needs PrintServices, which were only implemented starting on 1.4. <br>
 <br>
 If finer control of printing is necessary, the PDFPrint object implements both Printable and Pageable (through its getPageable method). The host
 application can then create its own PrinterJob and set any settings necessary, then call either setPageable or setPrintable and then start the print job.
 
 @param printSettings Print job settings. Use this object to tell the library how to print the document. If null, the library will print using default
            settings.
 @param printerName The name of the printer to print to. If this parameter is set to null, the method will print to the default printer.
 @throws PrinterException This exception is thrown if the printer is not found or if there is an error while printing.]]>
      </doc>
    </method>
    <method name="print"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="printAttrSet" type="javax.print.attribute.PrintRequestAttributeSet"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this PDF document to the specified printer, by name and passes the print request attribute set to the printer job.
 If the printerName parameter is null, this method will print to the default printer. If the printAttrSet parameter is null,
 this is equivalent to calling print (printerName, printSettings).  This method can only be called if using Java 1.4.2 or 
 higher as it needs PrintServices, which were only implemented starting on 1.4. <br><br>
 If finer control of printing is necessary, the PDFPrint object implements both Printable and Pageable (through its getPageable method). The host
 application can then create its own PrinterJob and set any settings necessary, then call either setPageable or setPrintable and then start the print job.
 
 @param printSettings Print job settings. Use this object to tell the library how to print the document. If null, the library will print using default
            settings.
 @param printerName The name of the printer to print to. If this parameter is set to null, the method will print to the default printer.
 @param printAttrSet The attribute set to pass to the printer.  This parameter simply gets passed through to the printer job to set options 
 such as the media tray, chromaticity and others.  If null is passed, the print job will use default attributes.
 
 @throws PrinterException This exception is thrown if the printer is not found or if there is an error while printing.]]>
      </doc>
    </method>
    <method name="printAsImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printerName" type="java.lang.String"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <param name="printAttrSet" type="javax.print.attribute.PrintRequestAttributeSet"/>
      <exception name="PDFPermissionException" type="com.qoppa.pdf.PDFPermissionException"/>
      <exception name="PrinterException" type="java.awt.print.PrinterException"/>
      <doc>
      <![CDATA[Prints this document by first converting each page to an image and then sending the image to the printer.  This method is
 here as a workaround to Java JDK issues where in some rare cases, the full page is not printed correctly.<br>
 When converting to an image, the method looks at the printer's DPI and creates an image of the page using that DPI.  By doing
 this, there should be no loss in quality.  However, this might cause performance issues because a full page image at high
 DPI values can get quite large, so this method should only be used when standard printing has issues.
 
 @param printerName The name of the printer to print to.  If this parameter
 is set to null, the method will print to the default printer.
 
 @param	printSettings Print job settings.  Use this object to tell
 the library how to print the document.  If null, the library will
 print using default settings.
 
 @param printAttrSet The attribute set to pass to the printer.  This parameter simply gets passed through to the printer job to set options 
 such as the media tray, chromaticity and others.  If null is passed, the print job will use default attributes.
 
 @throws PDFPermissionException This exception is thrown if the PDF does not allow for printing.
 
 @throws PrinterException This exception is thrown if the printer is not
 found or if there is an error while printing.
 
 @throws PrinterException]]>
      </doc>
    </method>
    <method name="removeDocumentListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="listener" type="com.qoppa.pdf.IDocumentListener"/>
      <doc>
      <![CDATA[Internal method to keep track of document events.]]>
      </doc>
    </method>
    <method name="removeEmbeddedFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ef" type="com.qoppa.pdf.IEmbeddedFile"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Remove a file embedded in this document. The list of embedded files can
 be obtained through the getEmbeddedFiles() method.
 
 @param ef
            the embedded file to remove
 @return true if the embedded file was removed, false if not]]>
      </doc>
    </method>
    <method name="addEmbeddedFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a file into this PDF document. The file is not embedded as an
 annotation, it simply gets embedded, so it will be visible in the
 attachments pane.
 
 @param file The file to embed in the document
 @return true if the file is embedded successfully
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addEmbeddedFile" return="com.qoppa.pdf.IEmbeddedFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="options" type="com.qoppa.pdf.EmbedFileOptions"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a file into this PDF document, with options. The file is not embedded 
 as an annotation, it simply gets embedded, so it will only be visible in the
 attachments pane.
 
 @param file The file to embed in the document
 @param options Options to set in the embedded file data.
 @return An interface to the embedded file in the document
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addEmbeddedFile" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="modDate" type="java.util.Date"/>
      <param name="creationDate" type="java.util.Date"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a file into this PDF document. The file is not embedded as an
 annotation, it simply gets embedded, so it will be visible in the
 attachments pane.
 
 @param inStream The input stream to embed.
 @param fileName The name of the embedded file.
 @param modDate The modification date of the embedded file.
 @param creationDate The creation date of the embedded file.
 @return true if the file was embedded successfully.
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addEmbeddedFile" return="com.qoppa.pdf.IEmbeddedFile"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="fileName" type="java.lang.String"/>
      <param name="modDate" type="java.util.Date"/>
      <param name="creationDate" type="java.util.Date"/>
      <param name="options" type="com.qoppa.pdf.EmbedFileOptions"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a file into this PDF document, with options. The file is not embedded 
 as an annotation, it simply gets embedded, so it will only be visible in the
 attachments pane.
 
 @param inStream The input stream to embed.
 @param fileName The name of the embedded file.
 @param modDate The modification date of the embedded file.
 @param creationDate The creation date of the embedded file.
 @param options Options to set in the embedded file data.
 @return An interface to the embedded file in the document
 @throws IOException
 @throws PDFException]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to an output stream.
 
 @param outStream OutputStream where the document will be written to.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to a file.
 
 @param fileName Name of the file to save the document.]]>
      </doc>
    </method>
    <method name="saveDocumentAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="resDPI" type="double"/>
      <param name="tiffCompression" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Save the entire document as a multi-page TIFF image to the given OutputStream.
 dpi is the resolution in DPI used to render the pages, 72 is the native PDF 
 resolution and is equivalent to 100% scale.<br><br>
 If any of the CCITT compression algorithms are used, the image will be converted 
 to black and white before saving.
 
 @param outStream The stream to save the image to.
 @param resDPI Dots per inch at which to render the image, 72 is the native PDF resolution and is equivalent to 100% scale..
 @param tiffCompression The type of TIFF compression to use.  This value needs to be one of
 these predefined values:<br><br>
 TIFFOptions.TIFF_DEFLATE - Deflate lossless compression (Zip-in-TIFF)<br>
 TIFFOptions.TIFF_CCITT_RLE - CCITT Modified Huffman RLE<br>
 TIFFOptions.TIFF_CCITT_T4 - CCITT Group 3 fax encoding<br>
 TIFFOptions.TIFF_CCITT_T6 - CCITT Group 4 fax encoding<br>
 TIFFOptions.TIFF_JPEG - JPEG-in-TIFF compression.<br>
 TIFFOptions.TIFF_LZW - LZW Compression<br>
 TIFFOptions.TIFF_PACKBITS - Byte-oriented run-length encoding "PackBits" compression.<br>
 TIFFOptions.TIFF_ZLIB - ZLib Compression.<br>
 TIFFOptions.TIFF_NO_COMPRESSION - No compression.<br>]]>
      </doc>
    </method>
    <method name="saveDocumentAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Save the entire document as a multi-page TIFF image to an OutputStream.  This method takes
 a {@link com.qoppa.pdf.TIFFOptions TIFFOptions} object as an argument to describe various
 TIFF options when saving the file.
 
 @param outStream The stream to save the image to.
 @param options Options to use when saving the TIFF file.]]>
      </doc>
    </method>
    <method name="setInitialPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="scale" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the initial page and scale to use when this document is opened with a PDF viewer.
 
 @param pageIndex The index of the page (0 based) to display upon opening the document.  If this value is -1, this method will clear
					the initial page entry.
 @param scale The scale to use when displaying the page.  This argument can be one of the following<br>
 			<ul>
 			<li>(percent scale, as a number) If this argument is a number, it will be interpreted as a percentage scale, 100 == actual size</li>
 			<li>"FitH" - Adjust the scale to fit the page to width.</li>
 			<li>"FitV" - Adjust the scale to fit the page to height.</li>
 			<li>"Fit" - Adjust the scale to fit the page to width and height</li>
 			<li>"FitBH" - Adjust the scale to fit the page's bounding box to width.
 			<li>"FitActual" - 100% Scale.</li>]]>
      </doc>
    </method>
    <method name="setPageLayout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageLayout" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Changes the value of the page layout key for this document.  This determines
 the layout of the page when initially opened.
 
 @param pageLayout The new page mode.  This value has to be one of:<br>
 IPDFDocument.PAGELAYOUT_SINGLEPAGE: Display one page at a time.<br>
 IPDFDocument.PAGELAYOUT_ONECOLUMN: Display the page in one column (single page continuous).<br>
 IPDFDocument.PAGELAYOUT_TWOCOLUMNLEFT: Display the page in two columns (two facing continuous).<br>
 IPDFDocuemnt.PAGELAYOUT_TWOPAGELEFT: Display two pages at a time (two facing).
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setPageMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageMode" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Changes the value of the page mode viewer preference in the document.  The page mode is
 used when the document is opened in a PDF Viewer.
 
 @param pageMode The new page mode.  This value has to be one of:<br>
 PAGEMODE_USENONE: Neither document outline nor thumbnail images are visible.<br>
 PAGEMODE_USEOUTLINES: Document outline visible.<br>
 PAGEMODE_USETHUMBS: Thumbnail images visible.<br>
 PAGEMODE_FULLSCREEN: Full screen mode, with no menu bar, window controls, or any other window visible.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setPrintSettings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <doc>
      <![CDATA[Set the PrintSettings to be used on the next printout.
 
 @param printSettings Settings to use on the next printout.]]>
      </doc>
    </method>
    <method name="setPasswordPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newPermissionsPwd" type="java.lang.String"/>
      <param name="newOpenPwd" type="java.lang.String"/>
      <param name="permissions" type="com.qoppa.pdf.permissions.PasswordPermissions"/>
      <param name="currentPermissionsPwd" type="java.lang.String"/>
      <param name="encryptType" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the security for this document. If the open password is null, the user won't have to enter a password to open the document. If the permissions
 password is null, any user can change the permissions on the document. The document will be encrypted regardless. To clear the encryption, call the
 clearPasswordPermissions method.
 
 
 @param newPermissionsPwd The document's permissions password.
 @param newOpenPwd The document's open password.
 @param permissions Permission object. 
 @param currentPermissionsPwd The current permissions password in the document, if any. This password is needed to be able to change the passwords and
            permissions in a document.
 @param encryptType The encryption type to use: PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_AES_128, etc...

 @throws PDFPermissionException If currentPermissionsPwd is invalid.]]>
      </doc>
    </method>
    <method name="getPDFPermissions" return="com.qoppa.pdf.permissions.AllPDFPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AllPDFPermissions object which encompasses this document's PasswordPermissions, DocMDPPermissions, and UsageRightsPermissions.]]>
      </doc>
    </method>
    <method name="clearUsageRights"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Remove extended permissions from the document.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="signDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signField" type="com.qoppa.pdf.form.SignatureField"/>
      <param name="signingInfo" type="com.qoppa.pdf.SigningInformation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Signs this document using the given signature field.
 
 @param signField The field to use to sign the document.
 @param signingInfo Information required to sign the document.
 @see SignatureAppearance]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFDocument object that the permissions password is known, so all permissions are granted.
 This method is here as a convenience so that if the owner password is known, the host application does not
 have to clear the security, make changes to the document, and then restore the security.
 
 @param password The permissions password
 @return true if the password was validated or the document is not encrypted
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getDestinationNames" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Get a vector of strings that are the names of named destinations (saved locations
 in the document used for links, bookmarks, buttons etc.).
 
 @return Vector of strings that are names of destinations
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getTemplateNames" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Get a vector of strings that are the names of templates.
 
 @return vector of strings that are names of templates
 @throws PDFException]]>
      </doc>
    </method>
    <method name="embedFont" return="java.awt.Font"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="instream" type="java.io.InputStream"/>
      <param name="fontFormat" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="FontFormatException" type="java.awt.FontFormatException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a font in the PDF file.  Use this method to use custom fonts
 when creating a PDF file.  The method returns a Font object that can then
 be used in the setFont method of Graphics2D.  The fonts returned by this
 method can be used to generate different sizes using deriveFont, but not
 to generate different styles (bold, italic)
 
 @param   instream    Input stream to read the font data from.
 @param   fontFormat  Font format.  This can be Font.TRUETYPE_FONT or Font.TYPE1_FONT
 
 @return  Font - The newly created Font object.  This can be used in Graphics2d.setFont().]]>
      </doc>
    </method>
    <method name="embedFont" return="java.awt.Font"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <param name="fontFormat" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="FontFormatException" type="java.awt.FontFormatException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Embeds a font in the PDF file.  Use this method to use custom fonts
 when creating a PDF file.  The method returns a Font object that can then
 be used in the setFont method of Graphics2D.  The fonts returned by this
 method can be used to generate different sizes using deriveFont, but not
 to generate different styles (bold, italic)
 
 @param   fileName    Name of the font file.
 @param   fontFormat  Font format.  This can be Font.TRUETYPE_FONT or Font.TYPE1_FONT (if using JDK1.5)
 
 @return  Font - The newly created Font object.  This can be used in Graphics2d.setFont().]]>
      </doc>
    </method>
    <method name="saveDocumentLinearized"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Saves this document as a linearized PDF document, for faster web viewing.
 
 @param outputStream The output stream to write the PDF contents to.
 @throws PDFException
 @throws IOException]]>
      </doc>
    </method>
    <method name="setPDFFileVersion"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="majorVersion" type="int"/>
      <param name="minorVersion" type="int"/>
      <doc>
      <![CDATA[Set the PDF file version.  This method does not check for valid PDF versions, please consult
 the current PDF reference to make sure that the version set is a valid version.  The method
 takes two arguments, one for the major part of the version and the second for the minor.  When
 writing the PDF, these two parts are put together as follows:<br><br>
 majorVersion.minorVersion<br>
 
 @param majorVersion The integer part of the version
 @param minorVersion The decimal part of the version]]>
      </doc>
    </method>
    <method name="setJSOpenAction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsAction" type="com.qoppa.pdf.actions.JSAction"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the open action for this document.  Passing in null will remove the document's open action.
 
  @param jsAction A JavaScript action]]>
      </doc>
    </method>
    <method name="getEncryptionType" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the encryption type used to encrypt the document (PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_AES_128, etc...).
 
 @return The encryption type.  Returns -1 if the encryption type is not supported or the document is not encrypted.]]>
      </doc>
    </method>
    <method name="getPageMode" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the page mode viewer preference in the document. The
 page mode is used when the document is opened in a PDF viewer.
 
 This value can either be null or one of:<br>
 PAGEMODE_USENONE: Neither document outline nor thumbnail images are
 visible.<br>
 PAGEMODE_USEOUTLINES: Document outline visible.<br>
 PAGEMODE_USETHUMBS: Thumbnail images visible.<br>
 PAGEMODE_FULLSCREEN: Full screen mode, with no menu bar, window controls,
 or any other window visible.<br>
 PAGEMODE_USEOC: Optional content group panel visible (PDF 1.5 and up).<br>
 PAGEMODE_USEATTACHMENTS: Attachments panel visible (PDF 1.6 and up).]]>
      </doc>
    </method>
    <method name="getMagnification" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use getOpenAction()">
      <doc>
      <![CDATA[Returns the magnification value of the OpenAction key.  This value is used to set the initial magnification of a document.
 
 This value can null, the percentage value of the magnification as a double converted to a string, or one of the following:<br>
 IPDFDocument.DEFAULT: Use default magnification.<br>
 IPDFDocument.MAGNIFICATION_FIT_WIDTH: Display with the page magnified just enough to fit the entire width of the page within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_VISIBLE: Display with the page magnified just enough to fit the entire width of its bounding box within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_HEIGHT: Display with the page magnified just enough to fit the entire height of the page within the window.<br>
 IPDFDocument.MAGNIFICATION_FIT_PAGE: Display with the page magnified just enough to fit the entire page within the window both horizontally and vertically .<br>
 IPDFDocument.MAGNIFICATION_FIT_ACTUAL: Display the page with 100% magnification.
 @deprecated Use getOpenAction()]]>
      </doc>
    </method>
    <method name="getPageLayout" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value of the page layout key for this document.  This determines
 the layout of the page when initially opened.
 
 This value will be null or one of:<br>
 IPDFDocument.PAGELAYOUT_SINGLEPAGE: Display one page at a time.<br>
 IPDFDocument.PAGELAYOUT_ONECOLUMN: Display the page in one column (single page continuous).<br>
 IPDFDocument.PAGELAYOUT_TWOCOLUMNLEFT: Display the page in two columns (two facing continuous).<br>
 IPDFDocuemnt.PAGELAYOUT_TWOPAGELEFT: Display two pages at a time (two facing).]]>
      </doc>
    </method>
    <method name="getIPage" return="com.qoppa.pdf.dom.IPDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <doc>
      <![CDATA[Returns an object that implements IPDFPage given the page index.
 
 @param pageIndex
            Index of the page to return.]]>
      </doc>
    </method>
    <method name="getLinearizationVersionNumber" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the linearization version number.
 @return Linearization version number.]]>
      </doc>
    </method>
    <method name="isLinearized" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if document is formatted for Fast Web View.
 @return True if document is formatted for Fast Web View.]]>
      </doc>
    </method>
    <method name="addPrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Adds a <code>PrintListener</code> to the PDFDocument
 @param printListener - the <code>PrintListener</code> to be added]]>
      </doc>
    </method>
    <method name="removePrintListener"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="printListener" type="com.qoppa.pdf.PrintListener"/>
      <doc>
      <![CDATA[Removes a <code>PrintListener</code> from the PDFDocument
 @param printListener - the <code>PrintListener</code> to be removed]]>
      </doc>
    </method>
    <method name="getDocumentViewPrefs" return="com.qoppa.pdf.DocumentViewPrefs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentViewPrefs object containing information about the
 way the document is to be presented on the screen or in print.
 
 @return The viewer preferences for the document.]]>
      </doc>
    </method>
    <method name="getOpenAction" return="com.qoppa.pdf.actions.Action"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Action to run when the document is opened.
 @return the Action to run when the document is opened.]]>
      </doc>
    </method>
    <method name="getResourceManager" return="com.qoppa.pdf.resources.IResourceManager"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the IResourceManager for this document.
 
 @return The resource manager for the document.]]>
      </doc>
    </method>
    <method name="setWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="watermark" type="com.qoppa.pdf.IWatermark"/>
      <doc>
      <![CDATA[Sets the watermark on the PDF document. Depending on the capabilities of
 the Java PDF Library, the PDF document will make callbacks to the
 watermark with types <code>IWatermark.TYPE_IMAGES</code>,
 <code>IWatermark.TYPE_PRINT</code>, <code>IWatermark.TYPE_VIEWER</code>
 when creating images, printing, and viewing the PDF document,
 respectively.
 
 @param watermark
            the <code>IWatermark</code> object to use when creating
            images, printing, and viewing the PDF document]]>
      </doc>
    </method>
    <method name="getWatermark" return="com.qoppa.pdf.IWatermark"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the watermark for the PDF document.
 
 @return the <code>IWatermark</code> object
 @see #setWatermark]]>
      </doc>
    </method>
    <method name="containsJavaScript" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true when the PDF document contains javascript.
 @return true when the PDF document contains javascript.]]>
      </doc>
    </method>
    <method name="setPageLabels"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="indices" type="int[]"/>
      <param name="prefix" type="java.lang.String"/>
      <param name="style" type="java.lang.String"/>
      <param name="offset" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets a page label to identify each page visually on the screen or in
 print. Consecutive pages create a labeling range using the same numbering
 system.
 
 @param indices
            The page indices with this page label.
 @param prefix
            The label prefix for page labels in this range.
 @param style
            The numbering style to be used for the numeric portion of each
            page label: PageLabels.DECIMAL_NUMERALS,
            PageLabels.UPPERCASE_ROMAN_NUMERALS,
            PageLabels.LOWERCASE_ROMAN_NUMERALS,
            PageLabels.UPPERCASE_LETTERS, PageLabels.LOWERCASE_LETTERS.
 @param offset
            The value of the numeric portion for the first page label in
            the range. Subsequent pages are numbered sequentially from
            this value, which must be greater than or equal to 1.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="createTemplateFromPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="templateName" type="java.lang.String"/>
      <param name="visible" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Create a template based off an existing page in the document
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @param templateName is a unique name for the template to be created.  Check {@link #getTemplateNames()} to see if a name already exists.
 @param visible a boolean indicating if the template should be visible (remains a regular page in the document)
 			or invisible (removes the page from document, but still exists and is available to create pages from).
 @throws PDFException]]>
      </doc>
    </method>
    <method name="removeTemplate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="templateName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Remove an existing template.  If the template is invisible, it will be reinstantiated as a page at the end of the document.
 
 @param templateName is the name of the template to be removed.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="addPageFromTemplate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="templateName" type="java.lang.String"/>
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Add a page from a template.
 
 @param templateName The name of the template.
 @param pageIndex The index to insert the page.
 @throws PDFException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[PDF Document object. This class provides methods to load, modify, print and save PDF documents.<br>
 <br>
 Documents can be loaded from a file, an input stream or a URL. Use the URL constructor when loading a document from a web server or from a servlet.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfProcess.PDFDocument -->
  <!-- start class com.qoppa.pdfProcess.PDFDocument.KeyInfoProcess -->
  <class name="PDFDocument.KeyInfoProcess" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFDocument.KeyInfoProcess"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFProcess.jar that can generate server
 key requests, validate a key, and display server information. Valid usage
 is:
 </p>
 <p>
 <strong>java -jar jPDFProcess.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFProcess.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFProcess.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfProcess.PDFDocument.KeyInfoProcess -->
  <!-- start class com.qoppa.pdfProcess.PDFGraphics -->
  <class name="PDFGraphics" extends="java.awt.Graphics2D"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addRenderingHints"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;?, ?&gt;"/>
      <doc>
      <![CDATA[Sets the values of an arbitrary number of preferences for the rendering algorithms. 
 Only values for the rendering hints that are present in the specified Map object are modified. 
 All other preferences not present in the specified object are left unmodified. 
 Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. 
 Refer to the RenderingHints class for definitions of some common keys and values.
 
 @param map - the rendering hints to be set]]>
      </doc>
    </method>
    <method name="clearRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Clears the specified rectangle by filling it with the background
 color of the current drawing surface. This operation does not 
 use the current paint mode. 
 <p>
 Beginning with Java&nbsp;1.1, the background color 
 of offscreen images may be system dependent. Applications should 
 use <code>setColor</code> followed by <code>fillRect</code> to 
 ensure that an offscreen image is cleared to a specific color. 
 @param       x the <i>x</i> coordinate of the rectangle to clear.
 @param       y the <i>y</i> coordinate of the rectangle to clear.
 @param       width the width of the rectangle to clear.
 @param       height the height of the rectangle to clear.
 @see         java.awt.Graphics#fillRect(int, int, int, int)
 @see         java.awt.Graphics#drawRect
 @see         java.awt.Graphics#setColor(java.awt.Color)
 @see         java.awt.Graphics#setPaintMode
 @see         java.awt.Graphics#setXORMode(java.awt.Color)]]>
      </doc>
    </method>
    <method name="clip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clipShape" type="java.awt.Shape"/>
      <doc>
      <![CDATA[Intersects the current Clip with the interior of the specified Shape and sets the Clip to the resulting intersection. 
 The specified Shape is transformed with the current Graphics2D Transform before being intersected with the current Clip. 
 This method is used to make the current Clip smaller. To make the Clip larger, use setClip. 
 The user clip modified by this method is independent of the clipping associated with device bounds and visibility. 
 If no clip has previously been set, or if the clip has been cleared using setClip with a null argument, 
 the specified Shape becomes the new user clip.
 
 @param clipShape - the Shape to be intersected with the current Clip. If s is null, this method clears the current Clip.]]>
      </doc>
    </method>
    <method name="clipRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Intersects the current clip with the specified rectangle.
 The resulting clipping area is the intersection of the current
 clipping area and the specified rectangle.  If there is no 
 current clipping area, either because the clip has never been 
 set, or the clip has been cleared using <code>setClip(null)</code>, 
 the specified rectangle becomes the new clip.
 This method sets the user clip, which is independent of the
 clipping associated with device bounds and window visibility.  
 This method can only be used to make the current clip smaller.
 To set the current clip larger, use any of the setClip methods.
 Rendering operations have no effect outside of the clipping area.
 @param x the x coordinate of the rectangle to intersect the clip with
 @param y the y coordinate of the rectangle to intersect the clip with
 @param width the width of the rectangle to intersect the clip with
 @param height the height of the rectangle to intersect the clip with
 @see #setClip(int, int, int, int)
 @see #setClip(Shape)]]>
      </doc>
    </method>
    <method name="copyArea"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="dx" type="int"/>
      <param name="dy" type="int"/>
      <doc>
      <![CDATA[Copies an area of the component by a distance specified by 
 <code>dx</code> and <code>dy</code>. From the point specified
 by <code>x</code> and <code>y</code>, this method
 copies downwards and to the right.  To copy an area of the 
 component to the left or upwards, specify a negative value for 
 <code>dx</code> or <code>dy</code>.
 If a portion of the source rectangle lies outside the bounds 
 of the component, or is obscured by another window or component, 
 <code>copyArea</code> will be unable to copy the associated
 pixels. The area that is omitted can be refreshed by calling 
 the component's <code>paint</code> method.
 @param       x the <i>x</i> coordinate of the source rectangle.
 @param       y the <i>y</i> coordinate of the source rectangle.
 @param       width the width of the source rectangle.
 @param       height the height of the source rectangle.
 @param       dx the horizontal distance to copy the pixels.
 @param       dy the vertical distance to copy the pixels.]]>
      </doc>
    </method>
    <method name="create" return="java.awt.Graphics"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new <code>Graphics</code> object that is 
 a copy of this <code>Graphics</code> object.
 @return     a new graphics context that is a copy of 
                       this graphics context.]]>
      </doc>
    </method>
    <method name="dispose"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Disposes of this graphics context and releases 
 any system resources that it is using. 
 A <code>Graphics</code> object cannot be used after 
 <code>dispose</code>has been called.
 <p>
 When a Java program runs, a large number of <code>Graphics</code>
 objects can be created within a short time frame.
 Although the finalization process of the garbage collector 
 also disposes of the same system resources, it is preferable 
 to manually free the associated resources by calling this
 method rather than to rely on a finalization process which 
 may not run to completion for a long period of time.
 <p>
 Graphics objects which are provided as arguments to the 
 <code>paint</code> and <code>update</code> methods 
 of components are automatically released by the system when 
 those methods return. For efficiency, programmers should
 call <code>dispose</code> when finished using
 a <code>Graphics</code> object only if it was created 
 directly from a component or another <code>Graphics</code> object.
 @see         java.awt.Graphics#finalize
 @see         java.awt.Component#paint
 @see         java.awt.Component#update
 @see         java.awt.Component#getGraphics
 @see         java.awt.Graphics#create]]>
      </doc>
    </method>
    <method name="draw"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shape" type="java.awt.Shape"/>
      <doc>
      <![CDATA[Strokes the outline of a Shape using the settings of the current Graphics2D context. 
 The rendering attributes applied include the Clip, Transform, Paint, Composite and Stroke attributes.
 
 @param shape - the Shape to be rendered]]>
      </doc>
    </method>
    <method name="drawArc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="startAngle" type="int"/>
      <param name="arcAngle" type="int"/>
      <doc>
      <![CDATA[Draws the outline of a circular or elliptical arc 
 covering the specified rectangle.
 <p>
 The resulting arc begins at <code>startAngle</code> and extends  
 for <code>arcAngle</code> degrees, using the current color.
 Angles are interpreted such that 0&nbsp;degrees 
 is at the 3&nbsp;o'clock position. 
 A positive value indicates a counter-clockwise rotation
 while a negative value indicates a clockwise rotation.
 <p>
 The center of the arc is the center of the rectangle whose origin 
 is (<i>x</i>,&nbsp;<i>y</i>) and whose size is specified by the 
 <code>width</code> and <code>height</code> arguments. 
 <p>
 The resulting arc covers an area 
 <code>width&nbsp;+&nbsp;1</code> pixels wide
 by <code>height&nbsp;+&nbsp;1</code> pixels tall.
 <p>
 The angles are specified relative to the non-square extents of
 the bounding rectangle such that 45 degrees always falls on the
 line from the center of the ellipse to the upper right corner of
 the bounding rectangle. As a result, if the bounding rectangle is
 noticeably longer in one axis than the other, the angles to the
 start and end of the arc segment will be skewed farther along the
 longer axis of the bounds.
 @param        x the <i>x</i> coordinate of the 
                    upper-left corner of the arc to be drawn.
 @param        y the <i>y</i>  coordinate of the 
                    upper-left corner of the arc to be drawn.
 @param        width the width of the arc to be drawn.
 @param        height the height of the arc to be drawn.
 @param        startAngle the beginning angle.
 @param        arcAngle the angular extent of the arc, 
                    relative to the start angle.
 @see         java.awt.Graphics#fillArc]]>
      </doc>
    </method>
    <method name="drawGlyphVector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="glyph" type="java.awt.font.GlyphVector"/>
      <param name="x" type="float"/>
      <param name="y" type="float"/>
      <doc>
      <![CDATA[Renders the text of the specified GlyphVector using the Graphics2D context's rendering attributes. 
 The rendering attributes applied include the Clip, Transform, Paint, and Composite attributes. 
 The GlyphVector specifies individual glyphs from a Font. The GlyphVector can also contain the glyph positions. 
 This is the fastest way to render a set of characters to the screen.
 
 @param glyph - the GlyphVector to be rendered
 @param x y - the position in User Space where the glyphs should be rendered]]>
      </doc>
    </method>
    <method name="drawImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.image.BufferedImage"/>
      <param name="imageOp" type="java.awt.image.BufferedImageOp"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Renders a BufferedImage that is filtered with a BufferedImageOp. The rendering attributes applied include the Clip, Transform and Composite attributes.
 
 @param image - the BufferedImage to be rendered
 @param imageOp - the filter to be applied to the image before rendering
 @param x y - the location in user space where the upper left corner of the image is rendered]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.Image"/>
      <param name="transform" type="java.awt.geom.AffineTransform"/>
      <param name="obs" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Renders an image, applying a transform from image space into user space before drawing. 
 The transformation from user space into device space is done with the current Transform in the Graphics2D. 
 The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. 
 The rendering attributes applied include the Clip, Transform, and Composite attributes. 
 Note that no rendering is done if the specified transform is noninvertible.
 
 @param image - the Image to be rendered
 @param transform - the transformation from image space into user space
 @param obs - the ImageObserver to be notified as more of the Image is converted

 @return boolean]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="bgcolor" type="java.awt.Color"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified image as is currently available.
 The image is drawn with its top-left corner at 
 (<i>x</i>,&nbsp;<i>y</i>) in this graphics context's coordinate 
 space.  Transparent pixels are drawn in the specified
 background color.
 <p> 
 This operation is equivalent to filling a rectangle of the
 width and height of the specified image with the given color and then
 drawing the image on top of it, but possibly more efficient.
 <p>
 This method returns immediately in all cases, even if the
 complete image has not yet been loaded, and it has not been dithered 
 and converted for the current output device.
 <p>
 If the image has not yet been completely loaded, then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the specified image observer.
 @param    img    the specified image to be drawn.
 @param    x      the <i>x</i> coordinate.
 @param    y      the <i>y</i> coordinate.
 @param    bgcolor the background color to paint under the
                         non-opaque portions of the image.
 @param    observer    object to be notified as more of 
                          the image is converted.
 @return   <code>true</code> if the image is completely loaded;
           <code>false</code> otherwise.
 @see      java.awt.Image
 @see      java.awt.image.ImageObserver
 @see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified image as is currently available.
 The image is drawn with its top-left corner at 
 (<i>x</i>,&nbsp;<i>y</i>) in this graphics context's coordinate 
 space. Transparent pixels in the image do not affect whatever 
 pixels are already there. 
 <p>
 This method returns immediately in all cases, even if the
 complete image has not yet been loaded, and it has not been dithered 
 and converted for the current output device.
 <p>
 If the image has not yet been completely loaded, then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the specified image observer.
 @param    img the specified image to be drawn.
 @param    x   the <i>x</i> coordinate.
 @param    y   the <i>y</i> coordinate.
 @param    observer    object to be notified as more of 
                          the image is converted.
 @return   <code>true</code> if the image is completely loaded;
           <code>false</code> otherwise.
 @see      java.awt.Image
 @see      java.awt.image.ImageObserver
 @see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="bgcolor" type="java.awt.Color"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified image as has already been scaled
 to fit inside the specified rectangle.
 <p>
 The image is drawn inside the specified rectangle of this 
 graphics context's coordinate space, and is scaled if 
 necessary. Transparent pixels are drawn in the specified
 background color. 
 This operation is equivalent to filling a rectangle of the
 width and height of the specified image with the given color and then
 drawing the image on top of it, but possibly more efficient.
 <p>
 This method returns immediately in all cases, even if the
 entire image has not yet been scaled, dithered, and converted
 for the current output device.
 If the current output representation is not yet complete then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the specified image observer.
 <p>
 A scaled version of an image will not necessarily be
 available immediately just because an unscaled version of the
 image has been constructed for this output device.  Each size of
 the image may be cached separately and generated from the original
 data in a separate image production sequence.
 @param    img       the specified image to be drawn.
 @param    x         the <i>x</i> coordinate.
 @param    y         the <i>y</i> coordinate.
 @param    width     the width of the rectangle.
 @param    height    the height of the rectangle.
 @param    bgcolor   the background color to paint under the
                         non-opaque portions of the image.
 @param    observer    object to be notified as more of 
                          the image is converted.
 @return   <code>true</code> if the current output representation
           is complete; <code>false</code> otherwise.
 @see      java.awt.Image
 @see      java.awt.image.ImageObserver
 @see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified image as has already been scaled
 to fit inside the specified rectangle.
 <p>
 The image is drawn inside the specified rectangle of this 
 graphics context's coordinate space, and is scaled if 
 necessary. Transparent pixels do not affect whatever pixels
 are already there. 
 <p>
 This method returns immediately in all cases, even if the
 entire image has not yet been scaled, dithered, and converted
 for the current output device.
 If the current output representation is not yet complete, then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the image observer by calling its <code>imageUpdate</code> method.
 <p>
 A scaled version of an image will not necessarily be
 available immediately just because an unscaled version of the
 image has been constructed for this output device.  Each size of
 the image may be cached separately and generated from the original
 data in a separate image production sequence.
 @param    img    the specified image to be drawn.
 @param    x      the <i>x</i> coordinate.
 @param    y      the <i>y</i> coordinate.
 @param    width  the width of the rectangle.
 @param    height the height of the rectangle.
 @param    observer    object to be notified as more of 
                          the image is converted.
 @see      java.awt.Image
 @see      java.awt.image.ImageObserver
 @see      java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="dx1" type="int"/>
      <param name="dy1" type="int"/>
      <param name="dx2" type="int"/>
      <param name="dy2" type="int"/>
      <param name="sx1" type="int"/>
      <param name="sy1" type="int"/>
      <param name="sx2" type="int"/>
      <param name="sy2" type="int"/>
      <param name="bgcolor" type="java.awt.Color"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified area of the specified image as is
 currently available, scaling it on the fly to fit inside the
 specified area of the destination drawable surface. 
 <p>
 Transparent pixels are drawn in the specified background color. 
 This operation is equivalent to filling a rectangle of the
 width and height of the specified image with the given color and then
 drawing the image on top of it, but possibly more efficient.
 <p>
 This method returns immediately in all cases, even if the
 image area to be drawn has not yet been scaled, dithered, and converted
 for the current output device.
 If the current output representation is not yet complete then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the specified image observer.
 <p>
 This method always uses the unscaled version of the image
 to render the scaled rectangle and performs the required
 scaling on the fly. It does not use a cached, scaled version
 of the image for this operation. Scaling of the image from source
 to destination is performed such that the first coordinate
 of the source rectangle is mapped to the first coordinate of
 the destination rectangle, and the second source coordinate is
 mapped to the second destination coordinate. The subimage is
 scaled and flipped as needed to preserve those mappings.
 @param       img the specified image to be drawn
 @param       dx1 the <i>x</i> coordinate of the first corner of the
                    destination rectangle.
 @param       dy1 the <i>y</i> coordinate of the first corner of the
                    destination rectangle.
 @param       dx2 the <i>x</i> coordinate of the second corner of the
                    destination rectangle.
 @param       dy2 the <i>y</i> coordinate of the second corner of the
                    destination rectangle.
 @param       sx1 the <i>x</i> coordinate of the first corner of the
                    source rectangle.
 @param       sy1 the <i>y</i> coordinate of the first corner of the
                    source rectangle.
 @param       sx2 the <i>x</i> coordinate of the second corner of the
                    source rectangle.
 @param       sy2 the <i>y</i> coordinate of the second corner of the
                    source rectangle.
 @param       bgcolor the background color to paint under the
                    non-opaque portions of the image.
 @param       observer object to be notified as more of the image is
                    scaled and converted.
 @see         java.awt.Image
 @see         java.awt.image.ImageObserver
 @see         java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="drawImage" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="img" type="java.awt.Image"/>
      <param name="dx1" type="int"/>
      <param name="dy1" type="int"/>
      <param name="dx2" type="int"/>
      <param name="dy2" type="int"/>
      <param name="sx1" type="int"/>
      <param name="sy1" type="int"/>
      <param name="sx2" type="int"/>
      <param name="sy2" type="int"/>
      <param name="observer" type="java.awt.image.ImageObserver"/>
      <doc>
      <![CDATA[Draws as much of the specified area of the specified image as is
 currently available, scaling it on the fly to fit inside the
 specified area of the destination drawable surface. Transparent pixels 
 do not affect whatever pixels are already there.
 <p>
 This method returns immediately in all cases, even if the
 image area to be drawn has not yet been scaled, dithered, and converted
 for the current output device.
 If the current output representation is not yet complete then
 <code>drawImage</code> returns <code>false</code>. As more of
 the image becomes available, the process that draws the image notifies 
 the specified image observer.
 <p>
 This method always uses the unscaled version of the image
 to render the scaled rectangle and performs the required
 scaling on the fly. It does not use a cached, scaled version
 of the image for this operation. Scaling of the image from source
 to destination is performed such that the first coordinate
 of the source rectangle is mapped to the first coordinate of
 the destination rectangle, and the second source coordinate is
 mapped to the second destination coordinate. The subimage is
 scaled and flipped as needed to preserve those mappings.
 @param       img the specified image to be drawn
 @param       dx1 the <i>x</i> coordinate of the first corner of the
                    destination rectangle.
 @param       dy1 the <i>y</i> coordinate of the first corner of the
                    destination rectangle.
 @param       dx2 the <i>x</i> coordinate of the second corner of the
                    destination rectangle.
 @param       dy2 the <i>y</i> coordinate of the second corner of the
                    destination rectangle.
 @param       sx1 the <i>x</i> coordinate of the first corner of the
                    source rectangle.
 @param       sy1 the <i>y</i> coordinate of the first corner of the
                    source rectangle.
 @param       sx2 the <i>x</i> coordinate of the second corner of the
                    source rectangle.
 @param       sy2 the <i>y</i> coordinate of the second corner of the
                    source rectangle.
 @param       observer object to be notified as more of the image is
                    scaled and converted.
 @see         java.awt.Image
 @see         java.awt.image.ImageObserver
 @see         java.awt.image.ImageObserver#imageUpdate(java.awt.Image, int, int, int, int, int)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="drawLine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x1" type="int"/>
      <param name="y1" type="int"/>
      <param name="x2" type="int"/>
      <param name="y2" type="int"/>
      <doc>
      <![CDATA[Draws a line, using the current color, between the points 
 <code>(x1,&nbsp;y1)</code> and <code>(x2,&nbsp;y2)</code> 
 in this graphics context's coordinate system. 
 @param   x1  the first point's <i>x</i> coordinate.
 @param   y1  the first point's <i>y</i> coordinate.
 @param   x2  the second point's <i>x</i> coordinate.
 @param   y2  the second point's <i>y</i> coordinate.]]>
      </doc>
    </method>
    <method name="drawOval"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Draws the outline of an oval.
 The result is a circle or ellipse that fits within the 
 rectangle specified by the <code>x</code>, <code>y</code>, 
 <code>width</code>, and <code>height</code> arguments. 
 <p> 
 The oval covers an area that is 
 <code>width&nbsp;+&nbsp;1</code> pixels wide 
 and <code>height&nbsp;+&nbsp;1</code> pixels tall. 
 @param       x the <i>x</i> coordinate of the upper left 
                     corner of the oval to be drawn.
 @param       y the <i>y</i> coordinate of the upper left 
                     corner of the oval to be drawn.
 @param       width the width of the oval to be drawn.
 @param       height the height of the oval to be drawn.
 @see         java.awt.Graphics#fillOval]]>
      </doc>
    </method>
    <method name="drawPolygon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xPoints" type="int[]"/>
      <param name="yPoints" type="int[]"/>
      <param name="nPoints" type="int"/>
      <doc>
      <![CDATA[Draws a closed polygon defined by 
 arrays of <i>x</i> and <i>y</i> coordinates. 
 Each pair of (<i>x</i>,&nbsp;<i>y</i>) coordinates defines a point.
 <p>
 This method draws the polygon defined by <code>nPoint</code> line 
 segments, where the first <code>nPoint&nbsp;-&nbsp;1</code> 
 line segments are line segments from 
 <code>(xPoints[i&nbsp;-&nbsp;1],&nbsp;yPoints[i&nbsp;-&nbsp;1])</code> 
 to <code>(xPoints[i],&nbsp;yPoints[i])</code>, for 
 1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<code>nPoints</code>.  
 The figure is automatically closed by drawing a line connecting
 the final point to the first point, if those points are different.
 @param        xPoints   a an array of <code>x</code> coordinates.
 @param        yPoints   a an array of <code>y</code> coordinates.
 @param        nPoints   a the total number of points.
 @see          java.awt.Graphics#fillPolygon
 @see          java.awt.Graphics#drawPolyline]]>
      </doc>
    </method>
    <method name="drawPolyline"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xPoints" type="int[]"/>
      <param name="yPoints" type="int[]"/>
      <param name="nPoints" type="int"/>
      <doc>
      <![CDATA[Draws a sequence of connected lines defined by 
 arrays of <i>x</i> and <i>y</i> coordinates. 
 Each pair of (<i>x</i>,&nbsp;<i>y</i>) coordinates defines a point.
 The figure is not closed if the first point 
 differs from the last point.
 @param       xPoints an array of <i>x</i> points
 @param       yPoints an array of <i>y</i> points
 @param       nPoints the total number of points
 @see         java.awt.Graphics#drawPolygon(int[], int[], int)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="drawRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Draws the outline of the specified rectangle. The left and right edges of the rectangle are at x and x + width. 
 The top and bottom edges are at y and y + height. The rectangle is drawn using the graphics context's current color.
 @param x - the x coordinate of the rectangle to be drawn.
 @param y - the y coordinate of the rectangle to be drawn.
 @param width - the width of the rectangle to be drawn.
 @param height - the height of the rectangle to be drawn.]]>
      </doc>
    </method>
    <method name="drawRenderableImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.image.renderable.RenderableImage"/>
      <param name="transform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Renders a RenderableImage, applying a transform from image space into user space before drawing. 
 The transformation from user space into device space is done with the current Transform in the Graphics2D. 
 The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. 
 The rendering attributes applied include the Clip, Transform, and Composite attributes. 
 Note that no rendering is done if the specified transform is noninvertible.
 
 Rendering hints set on the Graphics2D object might be used in rendering the RenderableImage. 
 If explicit control is required over specific hints recognized by a specific RenderableImage, or if knowledge of 
 which hints are used is required, then a RenderedImage should be obtained directly from the RenderableImage and 
 rendered using drawRenderedImage.
 
 @param image - the image to be rendered
 @param transform - the transformation from image space into user space]]>
      </doc>
    </method>
    <method name="drawRenderedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.image.RenderedImage"/>
      <param name="transform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Renders a RenderedImage, applying a transform from image space into user space before drawing. 
 The transformation from user space into device space is done with the current Transform in the Graphics2D. 
 The specified transformation is applied to the image before the transform attribute in the Graphics2D context is applied. 
 The rendering attributes applied include the Clip, Transform, and Composite attributes. Note that no rendering is done 
 if the specified transform is noninvertible.
 
 @param image - the image to be rendered
 @param transform - the transformation from image space into user space]]>
      </doc>
    </method>
    <method name="drawRoundRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="arcWidth" type="int"/>
      <param name="arcHeight" type="int"/>
      <doc>
      <![CDATA[Draws an outlined round-cornered rectangle using this graphics 
 context's current color. The left and right edges of the rectangle 
 are at <code>x</code> and <code>x&nbsp;+&nbsp;width</code>, 
 respectively. The top and bottom edges of the rectangle are at 
 <code>y</code> and <code>y&nbsp;+&nbsp;height</code>. 
 @param      x the <i>x</i> coordinate of the rectangle to be drawn.
 @param      y the <i>y</i> coordinate of the rectangle to be drawn.
 @param      width the width of the rectangle to be drawn.
 @param      height the height of the rectangle to be drawn.
 @param      arcWidth the horizontal diameter of the arc 
                    at the four corners.
 @param      arcHeight the vertical diameter of the arc 
                    at the four corners.
 @see        java.awt.Graphics#fillRoundRect]]>
      </doc>
    </method>
    <method name="drawString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="x" type="float"/>
      <param name="y" type="float"/>
      <doc>
      <![CDATA[Renders the text specified by the specified String, using the current Font and Paint attributes in the Graphics2D 
 context. The baseline of the first character is at position (x, y) in the User Space. 
 The rendering attributes applied include the Clip, Transform, Paint, Font and Composite attributes. 
 For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, 
 in which case the coordinate supplied is the location of the leftmost character on the baseline.
 
 @param str - the String to be rendered
 @param x y - the coordinates where the String should be rendered]]>
      </doc>
    </method>
    <method name="drawString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Draws the text given by the specified string, using this 
 graphics context's current font and color. The baseline of the 
 first character is at position (<i>x</i>,&nbsp;<i>y</i>) in this 
 graphics context's coordinate system. 
 @param       str      the string to be drawn.
 @param       x        the <i>x</i> coordinate.
 @param       y        the <i>y</i> coordinate.
 @see         java.awt.Graphics#drawBytes
 @see         java.awt.Graphics#drawChars]]>
      </doc>
    </method>
    <method name="drawString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iterator" type="java.text.AttributedCharacterIterator"/>
      <param name="x" type="float"/>
      <param name="y" type="float"/>
      <doc>
      <![CDATA[Renders the text of the specified iterator, using the Graphics2D context's current Paint. 
 The iterator must specify a font for each character. The baseline of the first character is at position (x, y) 
 in the User Space. The rendering attributes applied include the Clip, Transform, Paint, and Composite attributes. 
 For characters in script systems such as Hebrew and Arabic, the glyphs can be rendered from right to left, 
 in which case the coordinate supplied is the location of the leftmost character on the baseline.
 
 @param iterator - the iterator whose text is to be rendered
 @param x y - the coordinates where the iterator's text is to be rendered]]>
      </doc>
    </method>
    <method name="drawString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iterator" type="java.text.AttributedCharacterIterator"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Draws the text given by the specified iterator, using this 
 graphics context's current color. The iterator has to specify a font
 for each character. The baseline of the 
 first character is at position (<i>x</i>,&nbsp;<i>y</i>) in this 
 graphics context's coordinate system. 
 @param       iterator the iterator whose text is to be drawn
 @param       x        the <i>x</i> coordinate.
 @param       y        the <i>y</i> coordinate.
 @see         java.awt.Graphics#drawBytes
 @see         java.awt.Graphics#drawChars]]>
      </doc>
    </method>
    <method name="fill"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shape" type="java.awt.Shape"/>
      <doc>
      <![CDATA[Fills the interior of a Shape using the settings of the Graphics2D context. 
 The rendering attributes applied include the Clip, Transform, Paint, and Composite.
 
 @param shape - the Shape to be filled]]>
      </doc>
    </method>
    <method name="fillArc"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="startAngle" type="int"/>
      <param name="arcAngle" type="int"/>
      <doc>
      <![CDATA[Fills a circular or elliptical arc covering the specified rectangle.
 <p>
 The resulting arc begins at <code>startAngle</code> and extends  
 for <code>arcAngle</code> degrees.
 Angles are interpreted such that 0&nbsp;degrees 
 is at the 3&nbsp;o'clock position. 
 A positive value indicates a counter-clockwise rotation
 while a negative value indicates a clockwise rotation.
 <p>
 The center of the arc is the center of the rectangle whose origin 
 is (<i>x</i>,&nbsp;<i>y</i>) and whose size is specified by the 
 <code>width</code> and <code>height</code> arguments. 
 <p>
 The resulting arc covers an area 
 <code>width&nbsp;+&nbsp;1</code> pixels wide
 by <code>height&nbsp;+&nbsp;1</code> pixels tall.
 <p>
 The angles are specified relative to the non-square extents of
 the bounding rectangle such that 45 degrees always falls on the
 line from the center of the ellipse to the upper right corner of
 the bounding rectangle. As a result, if the bounding rectangle is
 noticeably longer in one axis than the other, the angles to the
 start and end of the arc segment will be skewed farther along the
 longer axis of the bounds.
 @param        x the <i>x</i> coordinate of the 
                    upper-left corner of the arc to be filled.
 @param        y the <i>y</i>  coordinate of the 
                    upper-left corner of the arc to be filled.
 @param        width the width of the arc to be filled.
 @param        height the height of the arc to be filled.
 @param        startAngle the beginning angle.
 @param        arcAngle the angular extent of the arc, 
                    relative to the start angle.
 @see         java.awt.Graphics#drawArc]]>
      </doc>
    </method>
    <method name="fillOval"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Fills an oval bounded by the specified rectangle with the
 current color.
 @param       x the <i>x</i> coordinate of the upper left corner 
                     of the oval to be filled.
 @param       y the <i>y</i> coordinate of the upper left corner 
                     of the oval to be filled.
 @param       width the width of the oval to be filled.
 @param       height the height of the oval to be filled.
 @see         java.awt.Graphics#drawOval]]>
      </doc>
    </method>
    <method name="fillPolygon"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="xPoints" type="int[]"/>
      <param name="yPoints" type="int[]"/>
      <param name="nPoints" type="int"/>
      <doc>
      <![CDATA[Fills a closed polygon defined by 
 arrays of <i>x</i> and <i>y</i> coordinates. 
 <p>
 This method draws the polygon defined by <code>nPoint</code> line 
 segments, where the first <code>nPoint&nbsp;-&nbsp;1</code> 
 line segments are line segments from 
 <code>(xPoints[i&nbsp;-&nbsp;1],&nbsp;yPoints[i&nbsp;-&nbsp;1])</code> 
 to <code>(xPoints[i],&nbsp;yPoints[i])</code>, for 
 1&nbsp;&le;&nbsp;<i>i</i>&nbsp;&le;&nbsp;<code>nPoints</code>.  
 The figure is automatically closed by drawing a line connecting
 the final point to the first point, if those points are different.
 <p>
 The area inside the polygon is defined using an 
 even-odd fill rule, also known as the alternating rule.
 @param        xPoints   a an array of <code>x</code> coordinates.
 @param        yPoints   a an array of <code>y</code> coordinates.
 @param        nPoints   a the total number of points.
 @see          java.awt.Graphics#drawPolygon(int[], int[], int)]]>
      </doc>
    </method>
    <method name="fillRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Fills the specified rectangle. 
 The left and right edges of the rectangle are at 
 <code>x</code> and <code>x&nbsp;+&nbsp;width&nbsp;-&nbsp;1</code>. 
 The top and bottom edges are at 
 <code>y</code> and <code>y&nbsp;+&nbsp;height&nbsp;-&nbsp;1</code>. 
 The resulting rectangle covers an area 
 <code>width</code> pixels wide by 
 <code>height</code> pixels tall.
 The rectangle is filled using the graphics context's current color. 
 @param         x   the <i>x</i> coordinate 
                         of the rectangle to be filled.
 @param         y   the <i>y</i> coordinate 
                         of the rectangle to be filled.
 @param         width   the width of the rectangle to be filled.
 @param         height   the height of the rectangle to be filled.
 @see           java.awt.Graphics#clearRect
 @see           java.awt.Graphics#drawRect]]>
      </doc>
    </method>
    <method name="fillRoundRect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="arcWidth" type="int"/>
      <param name="arcHeight" type="int"/>
      <doc>
      <![CDATA[Fills the specified rounded corner rectangle with the current color.
 The left and right edges of the rectangle 
 are at <code>x</code> and <code>x&nbsp;+&nbsp;width&nbsp;-&nbsp;1</code>, 
 respectively. The top and bottom edges of the rectangle are at 
 <code>y</code> and <code>y&nbsp;+&nbsp;height&nbsp;-&nbsp;1</code>. 
 @param       x the <i>x</i> coordinate of the rectangle to be filled.
 @param       y the <i>y</i> coordinate of the rectangle to be filled.
 @param       width the width of the rectangle to be filled.
 @param       height the height of the rectangle to be filled.
 @param       arcWidth the horizontal diameter 
                     of the arc at the four corners.
 @param       arcHeight the vertical diameter 
                     of the arc at the four corners.
 @see         java.awt.Graphics#drawRoundRect]]>
      </doc>
    </method>
    <method name="finalize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Cleanup.]]>
      </doc>
    </method>
    <method name="getBackground" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the background color used for clearing a region.
 
 @return the current Graphics2D Color, which defines the background color.]]>
      </doc>
    </method>
    <method name="getClip" return="java.awt.Shape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current clipping area.
 This method returns the user clip, which is independent of the
 clipping associated with device bounds and window visibility.
 If no clip has previously been set, or if the clip has been 
 cleared using <code>setClip(null)</code>, this method returns 
 <code>null</code>.
 @return      a <code>Shape</code> object representing the 
              current clipping area, or <code>null</code> if
              no clip is set.
 @see         java.awt.Graphics#getClipBounds
 @see         java.awt.Graphics#clipRect
 @see         java.awt.Graphics#setClip(int, int, int, int)
 @see         java.awt.Graphics#setClip(Shape)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="getClipBounds" return="java.awt.Rectangle"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the bounding rectangle of the current clipping area.
 This method refers to the user clip, which is independent of the
 clipping associated with device bounds and window visibility.  
 If no clip has previously been set, or if the clip has been 
 cleared using <code>setClip(null)</code>, this method returns
 <code>null</code>.
 The coordinates in the rectangle are relative to the coordinate
 system origin of this graphics context.
 @return      the bounding rectangle of the current clipping area,
              or <code>null</code> if no clip is set.
 @see         java.awt.Graphics#getClip
 @see         java.awt.Graphics#clipRect
 @see         java.awt.Graphics#setClip(int, int, int, int)
 @see         java.awt.Graphics#setClip(Shape)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="getColor" return="java.awt.Color"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets this graphics context's current color.
 @return    this graphics context's current color.
 @see       java.awt.Color
 @see       java.awt.Graphics#setColor]]>
      </doc>
    </method>
    <method name="getComposite" return="java.awt.Composite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current Composite in the Graphics2D context.
 
 @return the current Graphics2D Composite, which defines a compositing style.]]>
      </doc>
    </method>
    <method name="getDeviceConfiguration" return="java.awt.GraphicsConfiguration"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the device configuration associated with this Graphics2D.
 
 @return the device configuration.]]>
      </doc>
    </method>
    <method name="getFont" return="java.awt.Font"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the current font.
 @return    this graphics context's current font.
 @see       java.awt.Font
 @see       java.awt.Graphics#setFont]]>
      </doc>
    </method>
    <method name="getFontMetrics" return="java.awt.FontMetrics"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="f" type="java.awt.Font"/>
      <doc>
      <![CDATA[Gets the font metrics for the specified font.
 @return    the font metrics for the specified font.
 @param     f the specified font
 @see       java.awt.Graphics#getFont
 @see       java.awt.FontMetrics
 @see       java.awt.Graphics#getFontMetrics()]]>
      </doc>
    </method>
    <method name="getFontRenderContext" return="java.awt.font.FontRenderContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the rendering context of the Font within this Graphics2D context. The FontRenderContext encapsulates 
 application hints such as anti-aliasing and fractional metrics, as well as target device specific information 
 such as dots-per-inch. This information should be provided by the application when using objects that perform 
 typographical formatting, such as Font and TextLayout. This information should also be provided by applications 
 that perform their own layout and need accurate measurements of various characteristics of glyphs such as advance 
 and line height when various rendering hints have been applied to the text rendering.
 
 @return a reference to an instance of FontRenderContext.]]>
      </doc>
    </method>
    <method name="getPaint" return="java.awt.Paint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current Paint of the Graphics2D context.  jPDFWriter
 only supports simple colors as paints.
 
 @return the current Graphics2D Paint, which defines a color or pattern.]]>
      </doc>
    </method>
    <method name="getRenderingHint" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.awt.RenderingHints.Key"/>
      <doc>
      <![CDATA[Returns the value of a single preference for the rendering algorithms. 
 Hint categories include controls for rendering quality and overall time/quality trade-off in the rendering process. 
 Refer to the RenderingHints class for definitions of some common keys and values.
 <p>
 Rendering hints are kept track of for compatibility only.  They have no effect on the PDF document created.
 
 @param key - the key corresponding to the hint to get.
 
 @return an object representing the value for the specified hint key. Some of the keys and their associated values are defined in the RenderingHints class.]]>
      </doc>
    </method>
    <method name="getRenderingHints" return="java.awt.RenderingHints"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the preferences for the rendering algorithms. Hint categories include controls for rendering quality and 
 overall time/quality trade-off in the rendering process. Returns all of the hint key/value pairs that were ever 
 specified in one operation. Refer to the RenderingHints class for definitions of some common keys and values.
 
 <p>
 Rendering hints are kept track of for compatibility only.  They have no effect on the PDF document created.
 
 @return a reference to an instance of RenderingHints that contains the current preferences.]]>
      </doc>
    </method>
    <method name="getStroke" return="java.awt.Stroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current Stroke in the Graphics2D context.
 
 @return the current Graphics2D Stroke, which defines the line style.]]>
      </doc>
    </method>
    <method name="getTransform" return="java.awt.geom.AffineTransform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a copy of the current Transform in the Graphics2D context.
 
 @return the current AffineTransform in the Graphics2D context.]]>
      </doc>
    </method>
    <method name="hit" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rect" type="java.awt.Rectangle"/>
      <param name="shape" type="java.awt.Shape"/>
      <param name="onStroke" type="boolean"/>
      <doc>
      <![CDATA[Checks whether or not the specified Shape intersects the specified Rectangle, which is in device space. 
 If onStroke is false, this method checks whether or not the interior of the specified Shape intersects 
 the specified Rectangle. If onStroke is true, this method checks whether or not the Stroke of the specified 
 Shape outline intersects the specified Rectangle. The rendering attributes taken into account include the Clip, 
 Transform, and Stroke attributes.
 
 @param rect - the area in device space to check for a hit
 @param shape - the Shape to check for a hit
 @param onStroke - flag used to choose between testing the stroked or the filled shape. If the flag is true, the Stroke oultine is tested. If the flag is false, the filled Shape is tested.
 
 @return true if there is a hit; false otherwise.]]>
      </doc>
    </method>
    <method name="rotate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="theta" type="double"/>
      <doc>
      <![CDATA[Concatenates the current Graphics2D Transform with a rotation transform.
 
 @param theta - the angle of rotation in radians]]>
      </doc>
    </method>
    <method name="rotate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="theta" type="double"/>
      <param name="x" type="double"/>
      <param name="y" type="double"/>
      <doc>
      <![CDATA[Concatenates the current Graphics2D Transform with a translated rotation transform.
 
 @param theta - the angle of rotation in radians
 @param x y - coordinates of the origin of the rotation]]>
      </doc>
    </method>
    <method name="scale"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sx" type="double"/>
      <param name="sy" type="double"/>
      <doc>
      <![CDATA[Concatenates the current Graphics2D Transform with a scaling transformation.
 
 @param sx - the amount by which X coordinates in subsequent rendering operations are multiplied relative to previous rendering operations.
 @param sy - the amount by which Y coordinates in subsequent rendering operations are multiplied relative to previous rendering operations.]]>
      </doc>
    </method>
    <method name="setBackground"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bgnd" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the background color for the Graphics2D context. The background color is used for clearing a region. 
 When a Graphics2D is constructed for a Component, the background color is inherited from the Component. 
 Setting the background color in the Graphics2D context only affects the subsequent clearRect calls and not 
 the background color of the Component. To change the background of the Component, use appropriate methods
 of the Component.
 
 @param bgnd - the background color that isused in subsequent calls to clearRect]]>
      </doc>
    </method>
    <method name="setClip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <doc>
      <![CDATA[Sets the current clip to the rectangle specified by the given
 coordinates.  This method sets the user clip, which is 
 independent of the clipping associated with device bounds
 and window visibility.  
 Rendering operations have no effect outside of the clipping area.
 @param       x the <i>x</i> coordinate of the new clip rectangle.
 @param       y the <i>y</i> coordinate of the new clip rectangle.
 @param       width the width of the new clip rectangle.
 @param       height the height of the new clip rectangle.
 @see         java.awt.Graphics#clipRect
 @see         java.awt.Graphics#setClip(Shape)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="setClip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clip" type="java.awt.Shape"/>
      <doc>
      <![CDATA[Sets the current clipping area to an arbitrary clip shape.
 Not all objects that implement the <code>Shape</code> 
 interface can be used to set the clip.  The only 
 <code>Shape</code> objects that are guaranteed to be 
 supported are <code>Shape</code> objects that are
 obtained via the <code>getClip</code> method and via 
 <code>Rectangle</code> objects.  This method sets the
 user clip, which is independent of the clipping associated
 with device bounds and window visibility.
 @param clip the <code>Shape</code> to use to set the clip
 @see         java.awt.Graphics#getClip()
 @see         java.awt.Graphics#clipRect
 @see         java.awt.Graphics#setClip(int, int, int, int)
 @since       JDK1.1]]>
      </doc>
    </method>
    <method name="setColor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets this graphics context's current color to the specified 
 color. All subsequent graphics operations using this graphics 
 context use this specified color. 
 @param     c   the new rendering color.
 @see       java.awt.Color
 @see       java.awt.Graphics#getColor]]>
      </doc>
    </method>
    <method name="setComposite"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="composite" type="java.awt.Composite"/>
      <doc>
      <![CDATA[Sets the Composite for the Graphics2D context.
 <p>
 This method is implemented for compatibility only.  Setting the composite has no effect on the PDF output.
 
 @param composite - the Composite object to be used for rendering]]>
      </doc>
    </method>
    <method name="setFont"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="font" type="java.awt.Font"/>
      <doc>
      <![CDATA[Sets this graphics context's font to the specified font. 
 All subsequent text operations using this graphics context 
 use this font. 
 @param  font   the font.
 @see     java.awt.Graphics#getFont]]>
      </doc>
    </method>
    <method name="setPaint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paint" type="java.awt.Paint"/>
      <doc>
      <![CDATA[Sets the Paint attribute for the Graphics2D context. Calling this method with a null Paint object does not 
 have any effect on the current Paint attribute of this Graphics2D.
 <p>
 jPDFWriter only supports <code>Color</code> as a paint.
 
 @param paint - the Paint object to be used to generate color during the rendering process, or null]]>
      </doc>
    </method>
    <method name="setPaintMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the paint mode of this graphics context to overwrite the 
 destination with this graphics context's current color. 
 This sets the logical pixel operation function to the paint or
 overwrite mode.  All subsequent rendering operations will
 overwrite the destination with the current color. 
 <p>
 This method is implemented for compatibility only.  Setting the paint mode has no effect on the PDF output.]]>
      </doc>
    </method>
    <method name="setRenderingHint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.awt.RenderingHints.Key"/>
      <param name="hintValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the value of a single preference for the rendering algorithms. Hint categories include controls for 
 rendering quality and overall time/quality trade-off in the rendering process. Refer to the RenderingHints
 class for definitions of some common keys and values.
 <p>
 This method is implemented for compatibility only.  Rendering hints have no effect on the PDF output.
 
 @param key - the key of the hint to be set.
 @param hintValue - the value indicating preferences for the specified hint category.]]>
      </doc>
    </method>
    <method name="setRenderingHints"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;?, ?&gt;"/>
      <doc>
      <![CDATA[Replaces the values of all preferences for the rendering algorithms with the specified hints. 
 The existing values for all rendering hints are discarded and the new set of known hints and values 
 are initialized from the specified Map object. Hint categories include controls for rendering quality 
 and overall time/quality trade-off in the rendering process. Refer to the RenderingHints class for 
 definitions of some common keys and values.
 <p>
 This method is implemented for compatibility only.  Rendering hints have no effect on the PDF output.
 
 @param map - the rendering hints to be set]]>
      </doc>
    </method>
    <method name="setStroke"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stroke" type="java.awt.Stroke"/>
      <doc>
      <![CDATA[Sets the Stroke for the Graphics2D context.
 
 @param stroke - the Stroke object to be used to stroke a Shape during the rendering process]]>
      </doc>
    </method>
    <method name="setTransform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Sets the Transform in the Graphics2D context.
 
 @param transform - the AffineTransform object to be used in the rendering process]]>
      </doc>
    </method>
    <method name="setXORMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="c1" type="java.awt.Color"/>
      <doc>
      <![CDATA[Sets the paint mode of this graphics context to alternate between 
 this graphics context's current color and the new specified color. 
 <p>
 This method is implemented for compatibility only.  Rendering hints have no effect on the PDF output.
 
 @param     c1 the XOR alternation color]]>
      </doc>
    </method>
    <method name="shear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shx" type="double"/>
      <param name="shy" type="double"/>
      <doc>
      <![CDATA[Concatenates the current Graphics2D Transform with a shearing transform.
 
 @param shx - the multiplier by which coordinates are shifted in the positive X axis direction as a function of their Y coordinate
 @param shy - the multiplier by which coordinates are shifted in the positive Y axis direction as a function of their X coordinate]]>
      </doc>
    </method>
    <method name="transform"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="transform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Composes an AffineTransform object with the Transform in this Graphics2D according to the rule 
 last-specified-first-applied. If the current Transform is Cx, the result of composition with Tx 
 is a new Transform Cx'. Cx' becomes the current Transform for this Graphics2D. Transforming a point 
 p by the updated Transform Cx' is equivalent to first transforming p by Tx and then transforming the 
 result by the original Transform Cx. In other words, Cx'(p) = Cx(Tx(p)). A copy of the Tx is made, 
 if necessary, so further modifications to Tx do not affect rendering.
 
 @param transform - the AffineTransform object to be composed with the current Transform]]>
      </doc>
    </method>
    <method name="translate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tx" type="double"/>
      <param name="ty" type="double"/>
      <doc>
      <![CDATA[Concatenates the current Graphics2D Transform with a translation transform.
 
 @param tx - the distance to translate along the x-axis
 @param ty - the distance to translate along the y-axis]]>
      </doc>
    </method>
    <method name="translate"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <doc>
      <![CDATA[Translates the origin of the graphics context to the point
 (<i>x</i>,&nbsp;<i>y</i>) in the current coordinate system. 
 Modifies this graphics context so that its new origin corresponds 
 to the point (<i>x</i>,&nbsp;<i>y</i>) in this graphics context's 
 original coordinate system.  All coordinates used in subsequent 
 rendering operations on this graphics context will be relative 
 to this new origin.
 @param  x   the <i>x</i> coordinate.
 @param  y   the <i>y</i> coordinate.]]>
      </doc>
    </method>
    <method name="getImageCompression" return="com.qoppa.pdf.settings.ImageCompression"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current image compression settings.  Image compression settings are used to tell PDFGraphics
 how to compress images into the PDF document.
 
 @return The current ImageCompression.]]>
      </doc>
    </method>
    <method name="setImageCompression"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="imageCompression" type="com.qoppa.pdf.settings.ImageCompression"/>
      <doc>
      <![CDATA[Sets the image compression settings.  The compression settings are used to determine
 compression and quality when writing images to a PDF document.

 @param imageCompression The new compression settings.]]>
      </doc>
    </method>
    <method name="setTextRenderMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="renderMode" type="int"/>
      <doc>
      <![CDATA[Sets the text render mode.  The mode has to be one of the pre-defined constants: 
 TEXT_RENDER_FILL through TEXT_RENDER_CLIP.
 
 @param renderMode The new render mode.]]>
      </doc>
    </method>
    <method name="setBlendMode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="blendMode" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </method>
    <method name="getTextRenderMode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current text render mode.]]>
      </doc>
    </method>
    <method name="getDocument" return="com.qoppa.pdfProcess.PDFDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the PDFDocument object that this page belongs to.

 @return  PDFDocument PDFDocument object that owns this page.]]>
      </doc>
    </method>
    <method name="getPage" return="com.qoppa.pdfProcess.PDFPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the PDFPage object that created this graphics object.
 
 @return PDFPage The PDFPage this graphics object writes to.]]>
      </doc>
    </method>
    <field name="HELVETICA" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COURIER" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TIMESROMAN" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SYMBOL" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ZAPFDINGBATS" type="java.awt.Font"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TEXT_RENDER_FILL" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Normal text: fill the text outline.  This is the default mode.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_STROKE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Draw the outline of the text.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_OUTLINE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Draw the outline of the text.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_FILL_AND_STROKE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Fill the text and then draw its outline.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_NO_TEXT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[No text is drawn.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_FILL_AND_CLIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Fill the text and then add the outline to the clip path.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_FILL_AND_STROKE_AND_CLIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Fill and stroke the text, then add the outline to the clip path.]]>
      </doc>
    </field>
    <field name="TEXT_RENDER_CLIP" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Use the text outline to set the clipping region.]]>
      </doc>
    </field>
    <field name="BLEND_NORMAL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_MULTIPLY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_SCREEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_OVERLAY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_DARKEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_LIGHTEN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_COLORDODGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_COLORBURN" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_HARDLIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_SOFTLIGHT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_DIFFERENCE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BLEND_EXCLUSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Implementation of Graphics2D to draw on a PDF page.  Use this class when
 modifying or creating new PDF pages in a document to draw into them.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfProcess.PDFGraphics -->
  <!-- start class com.qoppa.pdfProcess.PDFPage -->
  <class name="PDFPage" extends="com.qoppa.pdfViewer.hiObjects.AbstractPDFPage"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="addAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annot" type="com.qoppa.pdf.annotations.Annotation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a new annotation to this page.  This method should only be used with annotations that have been newly
 created using the AnnotationFactory.  It should not be used with existing annotations from this documetn or
 from other documents.  To do this, use the copyAnnotation method.
 
 @param annot The annotation to add.]]>
      </doc>
    </method>
    <method name="addJPEGImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jpegFile" type="java.io.File"/>
      <param name="x" type="int"/>
      <param name="y" type="int"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Adds a JPEG image onto this page.
 
 @param   jpegFile The JPEG file.
 @param   x The horizontal position of the image in 72 DPI.
 @param   y The vertical position of the image in 72 DPI.
 @param   xform A transform to apply to the image before drawing it to the page.  This parameter can be left null for no transform.]]>
      </doc>
    </method>
    <method name="addSignatureField" return="com.qoppa.pdf.form.SignatureField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="bounds" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a signature field to this page.  The signature field is added to the page but is NOT signed.  To sign
 the document, the application must call {@link com.qoppa.pdfProcess.PDFDocument#signDocument(SignatureField, com.qoppa.pdf.SigningInformation) PDFDocument.signDocument}.
 To create an invisible signature field, the bound rectangle should be set to (0,0,0,0) for the bounds.
 
 @param fieldName The name of the new field.
 @param bounds The bounds of the field on the page. (0,0,0,0) indicates that the signature field will be invisible.]]>
      </doc>
    </method>
    <method name="appendPageContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="srcPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="x" type="double"/>
      <param name="y" type="double"/>
      <param name="scaleX" type="double"/>
      <param name="scaleY" type="double"/>
      <param name="layer" type="com.qoppa.pdf.Layer"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds the content of another page to this page. This method takes the
 content stream and directly appends it to this page without doing any
 processing. If x and y are set to 0, the source page will be aligned with
 the destination so that the upper left corners coincide. An optional
 layer argument can be specified in which to put the source page content.
 
 @param srcPage
            The source page to take the content stream from.
 @param x
            The X position on the destination page at which the upper left
            corner of the source page will be placed.
 @param y
            The Y position on the destination page at which the upper left
            corner of the source page will be placed.
 @param scaleX
            Horizontal scale to apply to the source page before adding it
            to the destination page. The scale is 1 based, 1 = full scale.
 @param scaleY
            Vertical scale to apply to the source page before adding it to
            the destination page. The scale is 1 based, 1 = full scale.
 @param layer
            The layer to append the source page content stream, or null.
 
 @throws PDFException
 @throws IllegalArgumentException
             if layer is not null, layer must be from the target document
 @see #prependPageContent(PDFPage, double, double, double, double, Layer)]]>
      </doc>
    </method>
    <method name="copyAnnotation" return="com.qoppa.pdf.annotations.Annotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annot" type="com.qoppa.pdf.annotations.Annotation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Use this method to copy a single annotation onto this page, from this or other documents.  The method will
 clone the annotation and then add it to this page.  Because this method only copies a single annotation, 
 the copied annotation will lose any associations to other annotations which it had in the previous document; 
 if it was part of a group, it no longer will be.
 
 @return The new annotation.]]>
      </doc>
    </method>
    <method name="copyAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="srcPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Use this method to copy annotations onto this page, from this or other
 documents. The method will clone all annotations (except for widgets/fields)
 on the source page, and add them to this page. All annotation
 groupings will be preserved.
 
 @param srcPage
            The source page to copy annotations from]]>
      </doc>
    </method>
    <method name="copyAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="srcPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="layer" type="com.qoppa.pdf.Layer"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Use this method to copy annotations onto this page, from this or other
 documents. The method will clone all annotations (except for widgets/fields)
 on the source page, and add them to this page. All annotation
 groupings will be preserved. If layer is not null, the layer must belong
 to this <code>PDFPage</code>'s <code>PDFDocument</code>.
 
 @param srcPage
            The source page to copy annotations from
 @param layer
 			  The layer to add the annotations to, may be null]]>
      </doc>
    </method>
    <method name="createGraphics" return="java.awt.Graphics2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a Graphics2D object to draw into this page.  Anything drawn 
 to this graphics object will be drawn onto the PDF page and can then
 be saved into a PDF document or printed.  New content will be drawn
 on top of the current page content.<br><br>
 The Graphics2D object will initially have its origin on the upper left
 corner of the page's crop box (the visible area of the page).
 
 @return	Graphics2D	Graphics object used to draw into this page.]]>
      </doc>
    </method>
    <method name="createGraphics" return="java.awt.Graphics2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="layer" type="com.qoppa.pdf.Layer"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a graphics object that encapsulates a layer in a PDF document.
 When drawing to this graphics object, all elements will be drawn into
 a new layer (optional content group) in the pdf document.<br><br>
 
 The Graphics2D object will initially have its origin on the upper left
 corner of the page's crop box (the visible area of the page).
 
 @param layer	The layer to draw into.  This object must be created through PDFDocument.addLayer()
 @return A Graphics2D object that can be drawn into.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="deleteAnnotations"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Delete all annotations from the page.  This removes all the annotations in the PDF page.
 Even though technically, links, sounds, redactions, widgets (text fields, buttons, etc)
 and file attachments are annotations, this method does not delete them as they are not
 annotations in the logical sense.]]>
      </doc>
    </method>
    <method name="drawImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.Image"/>
      <param name="dstX" type="int"/>
      <param name="dstY" type="int"/>
      <param name="bgndColor" type="java.awt.Color"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <param name="imageSettings" type="com.qoppa.pdf.settings.ImageCompression"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Draws an image onto this page.  The image will be drawn at the specified dstX, dstY location and will
 not be scaled except for any transform passed into the method.
 
 @param	image The image to draw.
 @param	dstX The horizontal position of the image in 72 DPI.
 @param	dstY The vertical position of the image in 72 DPI.
 @param	bgndColor The background color if any.  If this parameter is not null, the method will first
 			fill a rectangle with this color where the image will be drawn, then draw the image on top.
 @param	xform A transform to apply to the image before drawing it to the page.  This parameter can be left null for no transform.
 @param   imageSettings An ImageCompression object describing what compression to use when writing images to the PDF document.  If null, the
          library will use default settings.]]>
      </doc>
    </method>
    <method name="drawImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.Image"/>
      <param name="dstX" type="int"/>
      <param name="dstY" type="int"/>
      <param name="dstWidth" type="int"/>
      <param name="dstHeight" type="int"/>
      <param name="bgndColor" type="java.awt.Color"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <param name="imageSettings" type="com.qoppa.pdf.settings.ImageCompression"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Draws an image onto this page.  The image will be scaled to dstWidth and dstHeight.  If dstWidth or dstHeight are set to 0,
 the method will get the destination width and/or height from the image size.
 
 @param   image The image to draw.
 @param   dstX The horizontal position of the image in 72 DPI.
 @param   dstY The vertical position of the image in 72 DPI.
 @param   dstWidth The width on the page that the image will occupy.  If this is <= 0, the method will use the image's width.
 @param   dstHeight The height on the page that the image will occupy.  If this is <= 0, the method will use the image's height.
 @param   bgndColor The background color if any.  If this parameter is not null, the method will first
          fill a rectangle with this color where the image will be drawn, then draw the image on top.
 @param   xform A transform to apply to the image before drawing it to the page.  This parameter can be left null for no transform.
 @param   params An ImageParam object describing what compression to use when writing images to the PDF document.  If null, the
          library will use default settings.]]>
      </doc>
    </method>
    <method name="drawImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="image" type="java.awt.Image"/>
      <param name="dstX" type="int"/>
      <param name="dstY" type="int"/>
      <param name="dstWidth" type="int"/>
      <param name="dstHeight" type="int"/>
      <param name="bgndColor" type="java.awt.Color"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <param name="params" type="com.qoppa.pdf.settings.ImageCompression"/>
      <param name="alpha" type="java.lang.Float"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Draws an image onto this page.  The image will be scaled to dstWidth and dstHeight.  If dstWidth or dstHeight are set to 0,
 the method will get the destination width and/or height from the image size.
 
 @param   image The image to draw.
 @param   dstX The horizontal position of the image in 72 DPI.
 @param   dstY The vertical position of the image in 72 DPI.
 @param   dstWidth The width on the page that the image will occupy.  If this is <= 0, the method will use the image's width.
 @param   dstHeight The height on the page that the image will occupy.  If this is <= 0, the method will use the image's height.
 @param   bgndColor The background color if any.  If this parameter is not null, the method will first
          fill a rectangle with this color where the image will be drawn, then draw the image on top.
 @param   xform A transform to apply to the image before drawing it to the page.  This parameter can be left null for no transform.
 @param   params An ImageParam object describing what compression to use when writing images to the PDF document.  If null, the
          library will use default settings.
 @param   alpha The alpha component to display the image with transparency]]>
      </doc>
    </method>
    <method name="drawText"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="font" type="java.awt.Font"/>
      <param name="textPaint" type="java.awt.Paint"/>
      <param name="x" type="double"/>
      <param name="y" type="double"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Draw text to this page using Java Font
 
 @param	str The string to draw on the page.
 @param	font The font to use when drawing the text.
 @param	textPaint The color to use when drawing the text.
 @param	x The horizontal position of the text on the page, in 72 DPI.
 @param	y The vertical position of the text on the page, in 72 DPI.
 @param	xform A transform to apply to the text before drawing it to the page.]]>
      </doc>
    </method>
    <method name="fillShape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shape" type="java.awt.Shape"/>
      <param name="shapePaint" type="java.awt.Paint"/>
      <param name="offsetX" type="double"/>
      <param name="offsetY" type="double"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Fills a shape on this page.
 
 @param	shape The shape to fill.
 @param	shapePaint The color to use when filling the shape.
 @param	offsetX A horizontal offset to apply before drawing the shape, in 72 DPI.
 @param	offsetY A vertical offset to apply before drawing the shape, in 72 DPI.
 @param	xform A transform to apply to the shape before drawing it to the page.]]>
      </doc>
    </method>
    <method name="findText" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="searchText" type="java.lang.String"/>
      <param name="caseSensitive" type="boolean"/>
      <param name="wholeWords" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method searches for the given text in the page.  If there are instances of the text found,
 the method returns a Vector of TextPosition objects.  These objects contain information about the
 text and its position.  If there is no occurrences of the search text found on the page, the
 method returns a Vector of 0 length.
 
 @param searchText The text to search for.
 @param caseSensitive Flag to determine if the search should be case sensitive.
 @param wholeWords Flag to indicate if only whole words should be found
 
 @return A list of TextPosition objects
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getTextWithCursors" return="com.qoppa.pdf.TextSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="startCursor" type="java.awt.geom.Point2D"/>
      <param name="endCursor" type="java.awt.geom.Point2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text contained between the start and end cursors, in "reading mode".  Reading
 mode implies line wrapping, column detection and wrapping and more.  The effect should be the 
 same as if the user chose the text selection tool, pressed down at the startCursor location and 
 dragged to the endCursor location.
 
 @param startCursor the location where the cursor should start selection
 @param endCursor The location where the cursor ends selection
 
 @return A TextSelection object representing the text that was selected.]]>
      </doc>
    </method>
    <method name="getTextInArea" return="com.qoppa.pdf.TextSelection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="selectArea" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Selects the text in an area of the page.  The coordinates on the page should be in
 'display' coords, i.e. the origin of the coordinates is page.getCropBox.getX() and
 page.getCropBox().getY().
 
 @return A TextSelection object representing the selected text.  null if no text is
 selected.  The text selection coordinates will be returned in 'display' space as well,
 i.e. the origin of the coordinates is page.getCropBox.getX() and
 page.getCropBox().getY();]]>
      </doc>
    </method>
    <method name="flattenAnnotation" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annot" type="com.qoppa.pdf.annotations.Annotation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flatten an annotation into the content. When an annotation is flattened,
 it becomes part of the content of the PDF and is not editable anymore.
 
 @param annot
            The annotation to flatten.
 
 @return This method returns an internal object.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="flattenAnnotations" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paintNonPrintableAnnots" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flattens the annotations. This makes the annotations uneditable and
 merges the content of the annotations with the page. Even though
 technically, links, sounds, redactions, widgets (text fields, buttons, etc)
 and file attachments are annotations, this method does not delete them as
 they are not annotations in the logical sense. To delete these, the application
 needs to call the removeAnnotation() method with the annotation as an
 argument.
 
 @param paintNonPrintableAnnots
            Flag to indicate whether non-printable annotations should be
            painted or not.
 @return This method returns an internal object.]]>
      </doc>
    </method>
    <method name="flattenWidget"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="widget" type="com.qoppa.pdf.annotations.Widget"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Flatten a widget into the content layer of the page.  After flattening the widget, the widget
 is removed from the list of widgets in the page. 
 
 @param widget The widget to flatten
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getDocument" return="com.qoppa.pdfProcess.PDFDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the document that this page belongs to.  A PDFPage can only belong to a single
 document at a time.
 
 @return The parent document.]]>
      </doc>
    </method>
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage containing a rendering
 of the page at the default PDF resolution: 72 DPI.]]>
      </doc>
    </method>
    <method name="getImageCS" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dpi" type="int"/>
      <param name="imageCS" type="java.awt.color.ColorSpace"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage, created in the given color space, containing a rendering of the page at the given resolution in DPI.
 Note that this method will render content directly onto the image in the image's color space, not render in RGB and then convert.
 This method should can be used to preview output to devices that have a specific color spaces, such as printers. 
 
 @param dpi Dots per inch at which to render the image.
 @param imageCS The color space to use when creating the image.
 
 @return A BufferedImage object of the page at the requested DPI.]]>
      </doc>
    </method>
    <method name="getImageCS" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dpi" type="int"/>
      <param name="imageCS" type="java.awt.color.ColorSpace"/>
      <param name="simOverprint" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage, created in the given color space, containing a rendering of the page at the given resolution in DPI.
 Note that this method will render content directly onto the image in the image's color space, not render in RGB and then convert.
 This method should can be used to preview output to devices that have a specific color spaces, such as printers. 
 
 @param dpi Dots per inch at which to render the image.
 @param imageCS The color space to use when creating the image.
 @param simOverprint Flag indicating whether the renderer should simulate overprinting.
 
 @return A BufferedImage object of the page at the requested DPI.]]>
      </doc>
    </method>
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a BufferedImage containing a rendering
 of the page at the given resolution in DPI.
 
 @param dpi Dots per inch at which to render the image.
 @return A BufferedImage object of the page at the requested DPI.]]>
      </doc>
    </method>
    <method name="getPageIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page index of this page within the document. Page index starts at 0.
 @return    int This page's index]]>
      </doc>
    </method>
    <method name="getPageLabel" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the page label for this page.  Labels can be defined in a document
 to use any string, including for instance roman numerals, or any other labels.
 This method returns the page label defined for this page, if there is a definition
 in the document.  If there is no definition, this method returns the page number
 as a string. Page numbers start with 1.
 
 @return the page label]]>
      </doc>
    </method>
    <method name="getPaperHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the paper's height of this page in 72 DPI.  This
 values comes from the page's MediaBox.
 
 @return	double	Height of this page]]>
      </doc>
    </method>
    <method name="getPaperWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the paper's width of this page in 72 DPI.  This
 values comes from the page's MediaBox.
 
 @return	double	Width of this page]]>
      </doc>
    </method>
    <method name="getSubImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageArea" type="java.awt.geom.Rectangle2D"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns an image for part of the page.  The section of the page to get the image for
 is specified in a rectangle, the resolution of the image is given in the dpi argument.
 
 @param pageArea The area of the page to get an image for.
 @param dpi The desired resolution for the image.
 
 @return A BufferedImage object of the section of the page requested.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="isEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Check whether the page is empty. An empty page is a page without any content on it. 
 
 @return true if the page is empty, false otherwise.]]>
      </doc>
    </method>
    <method name="prependPageContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="srcPage" type="com.qoppa.pdfProcess.PDFPage"/>
      <param name="x" type="double"/>
      <param name="y" type="double"/>
      <param name="scaleX" type="double"/>
      <param name="scaleY" type="double"/>
      <param name="layer" type="com.qoppa.pdf.Layer"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Prepend the contents of another page to this page. This method takes the
 content stream and adds it directly before the current page's content.
 This will have the effect of adding the content underneath the current
 content. If x and y are set to 0, the upper left corners of the two pages
 will coincide. An optional layer argument can be specified in which to
 put the source page content.
 
 @param srcPage
            The source page to take the content stream from.
 @param x
            The X position on the destination page at which the upper left
            corner of the source page will be placed
 @param y
            The Y position on the destination page at which the upper left
            corner of the source page will be placed
 @param scaleX
            Horizontal scale to apply to the source page before adding it
            to the destination page.
 @param scaleY
            Vertical scale to apply to the source page before adding it to
            the destination page.
 @param layer
            The layer to append the source page content stream, or null.
 @throws PDFException
 @throws IllegalArgumentException
             if layer is not null, layer must be from the target document
 @see #appendPageContent(PDFPage, double, double, double, double, Layer)]]>
      </doc>
    </method>
    <method name="removeAnnotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="annot" type="com.qoppa.pdf.annotations.Annotation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Removes an annotation from this page.
 
 @param	annot A reference to the annotation that needs to be removed.]]>
      </doc>
    </method>
    <method name="savePageAsGIF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Render the page as an image and save it to the output stream in GIF format.
 
 @param outStream The stream to save the image to.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution.]]>
      </doc>
    </method>
    <method name="savePageAsJPEG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="dpi" type="int"/>
      <param name="quality" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Render the page as an image and save it to the output stream in JPEG format.
 The range for this value is 0.0 to 1.0 with lower values producing higher compression and lower quality.  
 As a guideline, 0.25 is low quality, 0.5 is medium quality and 0.75 is high quality.  
 Depending on the quality of the content in the page, using a higher value may not necessarily produce
 a larger image.  For example, if a quality of 0.5 produces lossless compression, then anything higher 
 than 0.5 will produce the same results.  However using a compression of 0.4 will produce a smaller, lower quality file.
 
 @param outStream The stream to save the image to.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution.
 @param quality The quality setting to use for JPEG compression.  The range for this value is 0.0 to 1.0.
 Lower values mean higher compression and lower quality.  As a guideline, 0.25 is low quality, 0.5 is medium
 quality and 0.75 is high quality.]]>
      </doc>
    </method>
    <method name="savePageAsJPEG2000"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="dpi" type="int"/>
      <param name="quality" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Render the page as an image and save it to the output stream in JPEG2000 format. 
 The quality setting is used to calculate the data rate (bits per pixel).  
 The range for this value is 0.0 to 1.0 with lower values producing higher compression and lower quality.  
 As a guideline, 0.25 is low quality, 0.5 is medium quality and 0.75 is high quality.  
 If a value higher than the lossless compression rate is provided, then making a small change in the value will not make a difference. 
 For example, if a quality of 0.5 produces lossless compression, then anything higher than 0.5 will produce the same results.  
 However using a compression of 0.4 will produce a smaller, lower quality file.
 
 @param outStream The stream to save the image to.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution.
 @param quality The quality setting to use for JPEG compression.  The range for this value is 0.0 to 1.0.
 Lower values mean higher compression and lower quality.  As a guideline, 0.25 is low quality, 0.5 is medium
 quality and 0.75 is high quality.]]>
      </doc>
    </method>
    <method name="savePageAsPNG"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="dpi" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Render the page as an image and save it to the output stream in PNG format.
 
 @param outStream The stream to save the image to.
 @param dpi Dots per inch at which to render the image.  72 is the native PDF resolution.]]>
      </doc>
    </method>
    <method name="savePageAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="resDPI" type="double"/>
      <param name="tiffCompression" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Save the rendering image of the page to the given OutputStream
 in TIFF format. The image will be converted to black and white and fax compression
 will be used. resDPI is the resolution in DPI used to render the page,
 72 is the recommended value for the resolution.<br>
 This method requires Java Advanced Imaging (JAI) classes in the class 
 path (jai_codec.jar).  See our documentation regarding Distribution and JAR 
 Files for more info.
 
 @param outStream The stream to save the image to.
 @param resDPI Dots per inch at which to render the image.
 @param tiffCompression The type of TIFF compression to use.  This value needs to be one of
 these predefined values:<br><br>
 TIFFOptions.TIFF_DEFLATE - Deflate lossless compression (Zip-in-TIFF)<br>
 TIFFOptions.TIFF_CCITT_RLE - CCITT Modified Huffman RLE<br>
 TIFFOptions.TIFF_CCITT_T4 - CCITT Group 3 fax encoding<br>
 TIFFOptions.TIFF_CCITT_T6 - CCITT Group 4 fax encoding<br>
 TIFFOptions.TIFF_JPEG - JPEG-in-TIFF compression.<br>
 TIFFOptions.TIFF_LZW - LZW Compression<br>
 TIFFOptions.TIFF_PACKBITS - Byte-oriented run-length encoding "PackBits" compression.<br>
 TIFFOptions.TIFF_ZLIB - ZLib Compression.<br>
 TIFFOptions.TIFF_NO_COMPRESSION - No compression.<br>]]>
      </doc>
    </method>
    <method name="savePageAsTIFF"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <param name="options" type="com.qoppa.pdf.TIFFOptions"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Render the page to an image and save it in TIFF format to the given OutputStream.
 If fax compression is used, the image will be converted automatically to black and white.<br>
 This method requires Java Advanced Imaging (JAI) classes in the class 
 path (jai_codec.jar).  See our documentation regarding Distribution and JAR 
 Files for more info.
 
 @param outStream The stream to save the image to.
 @param options Options when saving the image, such as the output DPI, the TIFF compression method and more.]]>
      </doc>
    </method>
    <method name="setArtBox"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rect" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets this page's Art Box. The art box defines the extent of the page's
 meaningful content (including potential whitespace). This rectangle is in
 PDF native coordinates starting at the bottom left and increasing up to
 the right.
 
 @param rect
            The new art box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="setBleedBox"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rect" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets this page's Bleed Box. A page should be clipped to this coordinates
 when output to a production environment. This rectangle is in PDF native
 coordinates starting at the bottom left and increasing up to the right.
 
 @param rect
            The new bleed box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="setClip"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newClip" type="java.awt.geom.Area"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the clip area in the page's content stream when drawing to the page.
 
 @param newClip The new clip area.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setCropBox"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rect" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the PDF page's 'CropBox'.  The CropBox is a 
 rectangle that is used to crop content before displaying
 or printing the page. This rectangle is in PDF native
 coordinates starting at the bottom left and increasing
 up to the right.
 
 @param rect
            The new crop box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="resizePage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="options" type="com.qoppa.pdf.ResizePageOptions"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets this page's Media Box. The Media Box is a rectangle defining the
 boundaries of the physical medium on which the page is intended to be
 displayed or printed.
 
 @param options The resize page options.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setPageRotation"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="degrees" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Changes this page's rotation.
 
 @param degrees The new page rotation, in degrees
 @throws PDFException]]>
      </doc>
    </method>
    <method name="setTrimBox"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="rect" type="java.awt.geom.Rectangle2D"/>
      <doc>
      <![CDATA[Sets this page's Trim Box. The trim box defines a finished page's
 intended dimension after trimming. This rectangle is in PDF native
 coordinates starting at the bottom left and increasing up to the right.
 
 @param rect
            The new trim box. The dimensions are given in PostScript
            points. 1 inch = 72 points, 1cm = 28.3465 points, 1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="strokeShape"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="shape" type="java.awt.Shape"/>
      <param name="shapePaint" type="java.awt.Paint"/>
      <param name="offsetX" type="double"/>
      <param name="offsetY" type="double"/>
      <param name="xform" type="java.awt.geom.AffineTransform"/>
      <doc>
      <![CDATA[Draws the outline of a shape on this page.
 
 @param	shape The shape whose outline will be drawn.
 @param	shapePaint The color to use when drawing the outline of the shape.
 @param	offsetX A horizontal offset to apply before drawing the shape, in 72 DPI.
 @param	offsetY A vertical offset to apply before drawing the shape, in 72 DPI.
 @param	xform A transform to apply to the shape before drawing it to the page.]]>
      </doc>
    </method>
    <method name="useGradientPaint" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="paint" type="java.awt.GradientPaint"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </method>
    <method name="useGState" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="strokeAlpha" type="double"/>
      <param name="fillAlpha" type="double"/>
      <param name="blendName" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
    </method>
    <method name="insert_hOCR"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hocrText" type="java.lang.String"/>
      <param name="renderText" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This methods inserts hOCR text into this page.  hOCR is an open standard that defines a data format representation of OCR results.  The hOCR
 standard is supported by a number of OCR engines, including Tesseract, CuneiForm and OCRopus.  This method will take hOCR content and insert
 the text content into the page.<br>
 <br>
 This function is an optional component for Qoppa Software's PDF libraries, it requires separate licensing.  If the method is called without
 being licensed, OCR will be performed and all text results inserted into the page, but the method will add a watermark to the page.
 
 @param hocrText The hOCR text content.
 @param renderText Flag indicating whether the text should be shown on the page.  If the flag is false, the text is added in "No Render" mode.  
 Text that uses this mode is present in the page and it is selectable, but it is not visible.  
 @throws PDFException]]>
      </doc>
    </method>
    <method name="applyRedactionAnnotations" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method will apply or "burn in" all redaction annotations that are on
 this <code>PDFPage</code>. The page content that is contained within the
 redaction annotation's bounds will be redacted.
 
 @return true if this <code>PDFPage</code> contains ANY redaction annotations that were burned in.  If there are no
 redaction annotations, this method returns false.
         otherwise false.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="applyRedactionAnnotation" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="redactionAnnot" type="com.qoppa.pdf.annotations.Redaction"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method will apply or "burn in" the redaction annotation. The
 redaction annotation must already be on this <code>PDFPage</code>. The
 page content that is contained within the redaction annotation's bounds
 will be redacted.
 
 @return true if this <code>PDFPage</code> contains the redaction annotation that was passed in and the content was redacted, false otherwise.
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getMediaBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns this page's Media Box. The media box is equivalent to the
 physical paper the page was designed for.
 
 @return The page's media box. The dimensions are given
         in PostScript points. 1 inch = 72 points, 1cm = 28.3465 points,
         1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="getCropBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Crop Box. The crop box in a page determines what area
 of the page will be displayed or printed.
 
 @return The page's crop box. The dimensions are given
         in PostScript points. 1 inch = 72 points, 1cm = 28.3465 points,
         1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="getBleedBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Bleed Box. A page should be clipped to this
 coordinates when output to a production environment. jPDFViewer does not
 use the Bleed Box, it uses the Crop Box to clip a page before displaying.
 The method is provided for information to the host application.
 
 @return The page's bleed box. The dimensions are given
         in PostScript points. 1 inch = 72 points, 1cm = 28.3465 points,
         1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="getTrimBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Trim Box. The trim box defines a finished page's
 intended dimension after trimming. jPDFViewer does not use the Trim Box,
 the method is provided here for information to the host application.
 
 @return The page's crop box. The dimensions are given
         in PostScript points. 1 inch = 72 points, 1cm = 28.3465 points,
         1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="getArtBox" return="java.awt.geom.Rectangle2D"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return this page's Art Box. The art box defines the extent of the page's
 meaningful content (including potential whitespace). jPDFViewer does not
 use the Art Box, the method is provided here for information to the host
 application.
 
 @return The page's art box. The dimensions are given
         in PostScript points. 1 inch = 72 points, 1cm = 28.3465 points,
         1mm = 2.8346 points]]>
      </doc>
    </method>
    <method name="paintPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <doc>
      <![CDATA[Paints this page to the given graphics object.
 
 @param g2d Graphics objects to paint the page to.
 
 @throws PDFException Any errors encountered during painting the page.]]>
      </doc>
    </method>
    <method name="paintPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <param name="paintAnnotations" type="boolean"/>
      <doc>
      <![CDATA[Paints this page to the given graphics object, with an option to paint the annotations on the page.
 
 @param g2d Graphics objects to paint the page to.
 @param paintAnnotations Flag indicating whether annotations should be painted
 
 @throws PDFException Any errors encountered during painting the page.]]>
      </doc>
    </method>
    <method name="printPage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="g2d" type="java.awt.Graphics2D"/>
      <param name="pf" type="java.awt.print.PageFormat"/>
      <param name="printSettings" type="com.qoppa.pdf.PrintSettings"/>
      <doc>
      <![CDATA[Prints this page given a page format describing the printer's page and
 a PrintSettings object.
 
 @param g2d Printer graphics object.
 @param pf PageFormat object to use when printing.
 @param printSettings Printing preferences.]]>
      </doc>
    </method>
    <method name="getDisplayHeight" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page's display height.  This is equivalent to getCropBox().getHeight();
 @return The page's display height.]]>
      </doc>
    </method>
    <method name="getDisplayWidth" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets the page's display width.  This is equivalent to getCropBox().getWidth();
 @return The page's display width.]]>
      </doc>
    </method>
    <method name="getDisplayX" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page's left margin.  This value correspond to the different between
 the page's CropBox X coordinate and the MediaBox X coordinate.  When the page is,
 this will be the origin of the displayed page.
 
 @return The page's display X coordinate.]]>
      </doc>
    </method>
    <method name="getDisplayY" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the page's top margin.  This value correspond to the different between
 the page's CropBox Y coordinate and the MediaBox Y coordinate.  When the page is,
 this will be the origin of the displayed page.
 
 @return The page's display Y coordinate.]]>
      </doc>
    </method>
    <method name="getPageRotation" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the rotation of this page in degrees.
 
 @return	int	Page rotation in degrees.]]>
      </doc>
    </method>
    <method name="getAnnotations" return="java.util.Vector&lt;com.qoppa.pdf.annotations.Annotation&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a list of PDF annotations in this page, including form fields widgets. 
 This vector is a clone of the actual annotations vector so removing or adding annotations 
 to this vector will not affect the page annotations. However annotations contained 
 in the vector can be edited. 
 
 @return List of annotations.]]>
      </doc>
    </method>
    <method name="getImage" return="java.awt.image.BufferedImage"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="width" type="int"/>
      <param name="height" type="int"/>
      <param name="keepAspect" type="boolean"/>
      <doc>
      <![CDATA[Returns a buffered image showing the contents of this page.  The image is
 resized to the given width and height.  If keepAspect is true, the resized
 image keeps its aspect ratio.
 
 @param width Width of the desired image.
 @param height Height of the desired image.
 @param keepAspect Flag to indicate whether the resized image should keep its aspect ratio.
 
 @return BufferedImage with the contents of the page.]]>
      </doc>
    </method>
    <method name="findTextWithContext" return="java.util.Vector&lt;com.qoppa.pdf.TextPositionWithContext&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="searchText" type="java.lang.String"/>
      <param name="caseSensitive" type="boolean"/>
      <param name="wholeWords" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[This method searches for the given text in the page.  If there are instances of the text found,
 the method returns a Vector of TextPositionWithContext objects.  These objects contain information about the
 text, its position and the surrounding text.
 
 @param searchText The text to search for.
 @param caseSensitive Flag to determine if the search should be case sensitive.
 @param wholeWords Flag to indicate if only whole words should be found
 
 @return A list of TextPositionWithContext objects
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="getTabbingOrder" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the tabbing order as defined in the page description, if present.  The tabbing order is used by
 viewers to determine the tabbing between form fields.  The possible values are R for row order, C for column
 order and S for structure order.
 
 @return A string that holds the entry for the tabbing order from the page description.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text content of this page as a <code>String</code>.
 
 @return The text content of this page.]]>
      </doc>
    </method>
    <method name="containsInvisibleText" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Checks whether the page contains text which is invisible.
 
 @return true if page contains text which is invisible, false otherwise.
 @throws PDFException]]>
      </doc>
    </method>
    <field name="COMPRESSION_DEFLATE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMPRESSION_JBIG2" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="COMPRESSION_JPEG" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[This class holds a page in a PDF document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfProcess.PDFPage -->
</package>
<package name="com.qoppa.pdfSecure">
  <!-- start class com.qoppa.pdfSecure.PDFSecure -->
  <class name="PDFSecure" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFSecure" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a file.
 
 @param	fileName	Name of the PDF file.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @throws PDFException When there is an error loading the document.]]>
      </doc>
    </constructor>
    <constructor name="PDFSecure" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from an InputStream.
 
 @param	inStream InputStream to read the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @throws PDFException When there is an error loading the document.]]>
      </doc>
    </constructor>
    <constructor name="PDFSecure" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDF document from a URL.
 
 @param	url	Location of the PDF document.
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.
 
 @throws PDFException When there is an error loading the document.]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this PDFPrint object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <method name="setSecurity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="Use {@link #setPasswordPermissions(String, String, PasswordPermissions, String, int)} instead.">
      <param name="newPermPwd" type="java.lang.String"/>
      <param name="newOpenPwd" type="java.lang.String"/>
      <param name="permissions" type="com.qoppa.pdf.permissions.PasswordPermissions"/>
      <param name="currentPermPwd" type="java.lang.String"/>
      <param name="encryptType" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the security for this document. 
 If the open password is null, the user won't have to enter a password to open the document.
 If the permissions password is null, any user can change the permissions on the document.
 The document will be encrypted regardless. To clear the encryption, call the @method clearSecurity
 method.
 @param	newPermPwd  The document's new permissions password.
 @param	newOpenPwd  The document's new open password.
 @param	permissions  Permission object.  
 @param   currentPermPwd  The current permissions password.  This parameter is needed if the
 document has a permissions password.
 @param encryptType - The encryption type to use: PDFPermissions.ENCRYPTION_RC4_128, PDFPermissions.ENCRYPTION_RC4_128, PDFPermissions.ENCRYPTION_AES_128, etc...
 @deprecated Use {@link #setPasswordPermissions(String, String, PasswordPermissions, String, int)} instead.]]>
      </doc>
    </method>
    <method name="setPasswordPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newPermPwd" type="java.lang.String"/>
      <param name="newOpenPwd" type="java.lang.String"/>
      <param name="permissions" type="com.qoppa.pdf.permissions.PasswordPermissions"/>
      <param name="currentPermPwd" type="java.lang.String"/>
      <param name="encryptType" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Sets the security for this document. 
 If the open password is null, the user won't have to enter a password to open the document.
 If the permissions password is null, any user can change the permissions on the document.
 The document will be encrypted regardless. To clear the encryption, call the clearPasswordPermissions
 method.
 @param	newPermPwd  The document's new permissions password.
 @param	newOpenPwd  The document's new open password.
 @param	permissions  Permission object.  
 @param   currentPermPwd  The current permissions password.  This parameter is needed if the
 document has a permissions password.
 @param encryptType - The encryption type to use: PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_AES_128, etc...
 
 @throws PDFException If there is an error setting the password permissions.]]>
      </doc>
    </method>
    <method name="hasOpenPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted with a
 'user' password.
 
 @return boolean true if the document is encrypted with an open password, false otherwise.]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)
 
 @return DocumentInfo Object containing header information for the document.]]>
      </doc>
    </method>
    <method name="getPDFPermissions" return="com.qoppa.pdf.permissions.AllPDFPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the AllPDFPermissions object which encompasses this document's PasswordPermissions, DocMDPPermissions, and UsageRightsPermissions.]]>
      </doc>
    </method>
    <method name="clearUsageRights"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Remove extended permissions from the document.
 
 @throws PDFException If there is an error clearing the usage rights.]]>
      </doc>
    </method>
    <method name="hasPermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted with a
 'owner' password.
 
 @return boolean true if the document is encrypted with a permissions password, false otherwise.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileName" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to a file.
 
 @param	fileName	Name of the file to save the document.]]>
      </doc>
    </method>
    <method name="saveDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Saves this document to an output stream.
 
 @param	outStream	OutputStream where the document will be written to.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param	key		Production key.
 @return True when the key is valid, false if not.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.
 @return True when the key is valid, false if not.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFSecure.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="isEncrypted" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a flag indicating whether this document is encrypted.
 
 @return boolean true if the document is encrypted with a user password, false otherwise.]]>
      </doc>
    </method>
    <method name="clearSecurity"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="deprecated, no comment">
      <param name="currentPermissionsPwd" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Clears the security for this document.  Calling this method will clear user password, owner password,
 permissions and encryption.
 
 @param   currentPermissionsPwd    The document's current permissions password.  This parameter is needed
 if the document has a permissions password.
 
 @deprecated]]>
      </doc>
    </method>
    <method name="clearPasswordPermissions"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="currentPermissionsPwd" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Clears the security for this document.  Calling this method will clear user password, owner password,
 permissions and encryption.
 
 @param   currentPermissionsPwd    The document's current permissions password.  This parameter is needed
 if the document has a permissions password.]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ownerPassword" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFSecure object that the permissions password is known, so all
 permissions are granted. This method is here as a convenience so that if
 the owner password is known, the host application does not have to clear
 the security, make changes to the document, and then restore the
 security.
 
 @param ownerPassword
            The permissions password
 @return true if the password was validated
 @throws PDFException]]>
      </doc>
    </method>
    <method name="signDocument"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signField" type="com.qoppa.pdf.form.SignatureField"/>
      <param name="signingInfo" type="com.qoppa.pdf.SigningInformation"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Signs this document using the given signature field.
 
 @param signField The field to use to sign the document.
 @param signingInfo Information required to sign the document.]]>
      </doc>
    </method>
    <method name="addSignatureField" return="com.qoppa.pdf.form.SignatureField"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="fieldName" type="java.lang.String"/>
      <param name="bounds" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Adds a signature field to a page in the document.  The signature field is added to the page but is NOT signed.  To sign
 the document, the application must call {@link com.qoppa.pdfSecure.PDFSecure#signDocument(SignatureField, SigningInformation) PDFSecure.signDocument}.
 To create an invisible signature field, the bound rectangle should be set to (0,0,0,0) for the bounds.

 @param pageIndex The index of the page to add the signature field on.
 @param fieldName The name of the new field.
 @param bounds The bounds of the field on the page. (0,0,0,0) indicates that the signature field will be invisible.
 
 @throws PDFException If there is a problem adding the signature field.]]>
      </doc>
    </method>
    <method name="getSignatureFields" return="java.util.Vector&lt;com.qoppa.pdf.form.SignatureField&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Gets a list of signature fields, if any.  The list returned contains objects of type SignatureField.
 
 @return List of signature fields (if any) in the AcroForm.  If there are no fields, this method returns null.]]>
      </doc>
    </method>
    <method name="getEncryptionType" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the encryption type used to encrypt the document (PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_RC4_128, PasswordPermissions.ENCRYPTION_AES_128, etc...).
 
 @return The encryption type.  Returns -1 if the encryption type is not supported or the document is not encrypted.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[The <code>PDFSecure</code> class provides methods to update security settings on a pdf document.
 It can encrypt and decrypt a PDF document as well as set permissions on the document.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfSecure.PDFSecure -->
  <!-- start class com.qoppa.pdfSecure.PDFSecure.KeyInfoSecure -->
  <class name="PDFSecure.KeyInfoSecure" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFSecure.KeyInfoSecure"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFSecure.jar that can generate server
 key requests, validate a key, and display server information. Valid usage
 is:
 </p>
 <p>
 <strong>java -jar jPDFSecure.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFSecure.jar -validatekey &lt;key&gt;</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFSecure.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfSecure.PDFSecure.KeyInfoSecure -->
</package>
<package name="com.qoppa.pdfText">
  <!-- start class com.qoppa.pdfText.PDFText -->
  <class name="PDFText" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFText" type="java.io.InputStream, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Creates a PDFText object from a PDF InputStream.
 
 @param   inStream    InputStream to read the pdf document from.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFText" type="java.lang.String, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDFText object from a file.
 
 @param   fileName    Name of the PDF file.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <constructor name="PDFText" type="java.net.URL, com.qoppa.pdf.IPassword"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Loads a PDFText object from a URL.
 
 @param   url         URL pointint to the location of the PDF file.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </constructor>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)]]>
      </doc>
    </method>
    <method name="getDocumentInfo" return="com.qoppa.pdf.DocumentInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inStream" type="java.io.InputStream"/>
      <param name="password" type="com.qoppa.pdf.IPassword"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns a DocumentInfo object containing the information
 section of a PDF document (author, title, etc.)
  
 @param inStream InputStream to read the pdf document from.
 
 @param password An object that provides passwords to open the document, leave null if not needed.
 When working with documents that have no passwords, the host application should pass null for the
 value of this parameter.  When documents are known to have passwords, the host application should 
 pass an instance of the {@link com.qoppa.pdf.PDFPassword PDFPassword} class that can hold a single
 password or a list of passwords.]]>
      </doc>
    </method>
    <method name="getFileName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the pdf document.]]>
      </doc>
    </method>
    <method name="getPageCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of pages of the pdf document.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text in the pdf document as a <code>String</code>. Pages are separated with a return char.
 
 @return Text contained in the pdf document as String.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns text contained in the specified page of the pdf document 
 as a String. 
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @return Text contained in the specified page as a String.]]>
      </doc>
    </method>
    <method name="getTextInArea" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="textArea" type="java.awt.geom.Rectangle2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns text contained in an area of a page
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @param textArea the area of the page to get text from.
 
 @return A String containing the text in the area.  If there is no text, this method will return null.]]>
      </doc>
    </method>
    <method name="getTextWithCursors" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="startCursor" type="java.awt.geom.Point2D"/>
      <param name="endCursor" type="java.awt.geom.Point2D"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns the text contained between the start and end cursors, in "reading mode".  Reading
 mode implies line wrapping, column detection and wrapping and more.  The effect should be the 
 same as if the user chose the text selection tool, pressed down at the startCursor location and 
 dragged to the endCursor location.
 
 @param startCursor the location where the cursor should start selection
 @param endCursor The location where the cursor ends selection
 
 @return A TextSelection object representing the text that was selected.]]>
      </doc>
    </method>
    <method name="setAppletKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="applet" type="java.applet.Applet"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="setKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Method to unlock the production version of the library.
 
 @param   key     Production key.]]>
      </doc>
    </method>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns version string for jPDFText.  If this is the demo version,
 the return string will contain 'Demo Version' at the end.]]>
      </doc>
    </method>
    <method name="getWords" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns all words in the pdf document as a <code>Vector</code> of <code>Strings</code>.
 
 The default separators used to separate words are the following: ,/;\n><():?&.@*\t
 To customize separators, see {@link #getWordsWithPositions(int, String) getWordsWithPositions(int, String)}
 
 @return Words contained in the pdf document as a Vector of Strings.]]>
      </doc>
    </method>
    <method name="getWords" return="java.util.Vector&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns all words contained in the specified page of the pdf document 
 as a Vector of Strings. 
 
 The default separators used to separate words are the following: ,/;\n><():?&.@*\t
 To customize separators, see {@link #getWordsWithPositions(int, String) getWordsWithPositions(int, String)}
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @return Words contained in the specified page as a Vector of Strings.]]>
      </doc>
    </method>
    <method name="getLinesWithPositions" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns position information for all the lines of text in the specified page of the
 PDF document.
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 
  @return A Vector of TextPosition objects.]]>
      </doc>
    </method>
    <method name="getWordsWithPositions" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns position information for all the words in the specified page of the
 PDF document. 
 
 The default separators used to separate words are the following: ,/;\n><():?&.@*\t
 To customize separators, see {@link #getWordsWithPositions(int, String) getWordsWithPositions(int, String)}
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 
  @return A Vector of TextPosition objects.]]>
      </doc>
    </method>
    <method name="getWordsWithPositions" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="wordSeparators" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Returns position information for all the words in the specified page of the
 PDF document, given a set of word separators.
 
 @param pageIndex is the 0 based page number.  pageIndex = 0 is the first page of the document.
 @param wordSeparators A list of single character word separators.
 
  @return A Vector of TextPosition objects.]]>
      </doc>
    </method>
    <method name="findText" return="java.util.Vector&lt;com.qoppa.pdf.TextPosition&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pageIndex" type="int"/>
      <param name="searchText" type="java.lang.String"/>
      <param name="caseSensitive" type="boolean"/>
      <param name="wholeWords" type="boolean"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Searches a page for text and returns a list of TextPosition objects for each of
 the occurrences of the string in the page.  If there are no occurrences, the method returns a
 Vector of length 0.

 @param pageIndex The index of the page to search in
 @param searchText The text to search for.
 @param caseSensitive Flag indicating whether the search should be case sensitive.
 @param wholeWords Flag indicating whether the search should only look at whole words.
 
 @return A list of TextPosition objects.
 
 @throws PDFException]]>
      </doc>
    </method>
    <method name="usePermissionsPassword" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="password" type="java.lang.String"/>
      <exception name="PDFException" type="com.qoppa.pdf.PDFException"/>
      <doc>
      <![CDATA[Tells the PDFText object that the permissions password is known, so all
 permissions are granted.
 
 @param password
            The permissions password
 @return true if the password was validated or the document is not
         encrypted
 @throws PDFException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Close / release all resources held by this document. After this method is
 called, this object becomes invalid and should not be used
 anymore.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<code>PDFText</code> is the class to extract the list of words contained in a PDF document as a <code>Vector</code>.
 It also returns the <code>DocumentInfo</code> for the document as well as the page count.
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfText.PDFText -->
  <!-- start class com.qoppa.pdfText.PDFText.KeyInfoText -->
  <class name="PDFText.KeyInfoText" extends="com.qoppa.key.KeyInfo"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PDFText.KeyInfoText"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
    </method>
    <doc>
    <![CDATA[<p>
 This is the Main-Class for the jPDFText.jar that can generate server key
 requests, validate a key, and display server information. Valid usage is:
 </p>
 <p>
 <strong>java -jar jPDFText.jar -genkeyreq</strong><br>
 This flag will generate a license key request with the relevant server
 information
 </p>
 <p>
 <strong>java -jar jPDFText.jar -validatekey &ltkey&gt</strong><br>
 This flag will check the license key and echo a message to the console
 that shows information about the key.<br>
 </p>
 <p>
 <strong> java -jar jPDFText.jar -serverinfo</strong><br>
 This flag will echo the server information to the console.
 </p>
 
 @author Qoppa Software]]>
    </doc>
  </class>
  <!-- end class com.qoppa.pdfText.PDFText.KeyInfoText -->
</package>

</api>
